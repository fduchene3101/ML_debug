Page 1           Source Listing                                                                
2024-11-22 11:31                                 /tmp/ifortViQ8xZ.i90

apl_arome.F90(2417): error #6628: Non-keyword arguments are invalid after keyword arguments have been encountered.   [ZTOWNS
     & ZTOWNS(KIDIA:KFDIA))
-------^
apl_arome.F90(2490): error #6628: Non-keyword arguments are invalid after keyword arguments have been encountered.   [ZTOWNS
     & ZTOWNS(KIDIA:KFDIA))
-------^
.D[24]/fcttrm.func.h(35): remark #7713: This statement function has not been used.   [RLF
REAL(KIND=JPRB) :: RLV,RLS,RLF,ESW,ESS,ES
---------------------------^
.D[24]/fcttrm.func.h(35): remark #7713: This statement function has not been used.   [ESW
REAL(KIND=JPRB) :: RLV,RLS,RLF,ESW,ESS,ES
-------------------------------^
.D[24]/fcttrm.func.h(35): remark #7713: This statement function has not been used.   [ESS
REAL(KIND=JPRB) :: RLV,RLS,RLF,ESW,ESS,ES
-----------------------------------^
.D[24]/fcttrm.func.h(35): remark #7713: This statement function has not been used.   [ES
REAL(KIND=JPRB) :: RLV,RLS,RLF,ESW,ESS,ES
---------------------------------------^
.D[24]/fcttrm.func.h(67): remark #7713: This statement function has not been used.   [FODLEW
REAL(KIND=JPRB) :: FODLEW
-------------------^
.D[24]/fcttrm.func.h(83): remark #7713: This statement function has not been used.   [FOQSTP
REAL(KIND=JPRB) :: FOQSTP
-------------------^
.D[24]/fcttrm.func.h(91): remark #7713: This statement function has not been used.   [FODQS
REAL(KIND=JPRB) :: FODQS 
-------------------^
.D[24]/fcttrm.func.h(100): remark #7713: This statement function has not been used.   [FDQW
REAL(KIND=JPRB) :: FDQW
-------------------^

Page 2           Source Listing                  
2024-11-22 11:31                                 /tmp/ifortViQ8xZ.i90

      1 # 1 "apl_arome.F90"
      2 !OPTION! -pvctl noloopfusion
      3 SUBROUTINE APL_AROME(YDGEOMETRY,YDSURF, KBL, KGPCOMP, KIDIA , KFDIA , KLON ,&
      4  & KTDIA  , KLEV , KSTEP ,&
      5  & KSGST, PDT, LDXFUMSE, PINDX, PINDY ,&
      6  & PGEMU,PGELAM,POROG,PGM,PMU0,PMU0LU,PMU0M,PMU0N,PCLON, PSLON,PVO3ABC,PLSM,&
      7  & PAESEA , PAELAN , PAESOO , PAEDES , PAESUL, PAEVOL,&
      8  & PGP2DSDT,&
      9 !---------------------------------------------------------------------
     10 ! - INPUT A M
     11  & PAPHIM,PAPHIFM,PAPRSM, PAPRSFM, PRDELPM, PDELPM, PTM, PQVM ,&
     12  & PCPM    , PRM     ,PALPHM , PLNPRM,&
     13  & PQCM    , PQIM    ,PQRM   , PQSM, PQGM, PQHM,&
     14  & PTKEM   , PEFB1   ,PEFB2  , PEFB3,&
     15  & PSIGM,PSVM,&
     16  & PUM    , PVM, PWM, PEDR,&
     17 !---------------------------------------------------------------------
     18 !  - INOUT A S
     19  & PGPAR, PEMTD, PEMTU, PTRSO,&
     20  & PGDEOSI, PGUEOSI, PGMU0, PGMU0_MIN, PGMU0_MAX,&
     21  & PGDEOTI, PGDEOTI2, PGUEOTI, PGUEOTI2, PGEOLT, PGEOXT,&
     22  & PGRPROX, PGMIXP, PGFLUXC, PGRSURF,&
     23 !  - OUT A S
     24  & PQLRAD, PQIRAD, PRH, PCLFS, PSIGS,&
     25  & PTENDT, PTENDR, PTENDU, PTENDV,PTENDW,&
     26  & PTENDTKE, PTENDEFB1, PTENDEFB2, PTENDEFB3,&
     27  & PTENDEXT,PFRTH, PFRSO,PFRTHDS, PFRSODS, PFRSOPS, PFRSDNI,&
     28  & PFRSOPT, PFRTHC, PFRSOC, &
     29 !---------------------------------------------------------------------
     30 !  - IN FOR RADIATION IF NO SURFACE SCHEME
     31  & PALBIN,PEMIS,&
     32 !  - INOUT for easy diag
     33  & PEZDIAG,&
     34 !  - INOUT for CFU XFU
     35  & PCLCH,PCLCL,PCLCM,PCLCT,PFPLSL,PFPLSN,PFPLSG,PFPLSH,PSTRTU,PSTRTV,PFCS,PFCLL,&
     36  & PFCLN,PUCLS,PVCLS,PNUCLS,PNVCLS,PTCLS,PQCLS,PHUCLS,PUGST,PVGST,PFEVL,PFEVN, PPBLH,PSPSG,&
     37  & PSDUR,PDIAGH,PSFORC,&
     38 ! daand: radflex
     39  & YDPROCSET ,YDDDH)
     40 
     41 !**** *APL_AROME * - CALL OF PHYSICAL PARAMETERISATIONS FOR ALARO/AROME
     42 
     43 !     Sujet.
     44 !     ------
     45 !     - APPEL DES SOUS-PROGRAMMES DE PARAMETRISATION
     46 
     47 !**   Interface.
     48 !     ----------
     49 !        *CALL* *APL_AROME*
     50 
     51 !-----------------------------------------------------------------------
     52 
     53 ! -   ARGUMENTS D'ENTREE.
     54 ! -   INPUT ARGUMENTS.
     55 !     -------------------
     56 
     57 ! - NOM DES PARAMETRES DE DIMENSIONNEMENT DE LA PHYSIQUE.

Page 3           Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

     58 ! - DIMENSIONS.
     59 
     60 ! KBL  : NUMERO DE BLOC NPROMA
     61 ! KBL  : NPROMA-PACKETS NUMBER
     62 ! KGPCOMP : NOMBRE TOTAL DE POINTS DE GRILLE SUR LE DOMAINE
     63 ! KGPCOMP : TOTAL GRID POINTS NUMBER IN THE DOMAIN
     64 ! KIDIA, KFDIA : BORNES BOUCLES HORIZONTALES   (IST,IEND DANS CPG).
     65 ! KIDIA, KFDIA : START/END OF HORIZONTAL LOOP  (IST,IEND IN *CPG*).
     66 ! KLON : DIMENSION HORIZONTALE                 (NPROMA DANS CPG).
     67 ! KLON : HORIZONTAL DIMENSION                  (NPROMA IN *CPG*).
     68 ! KTDIA : DEBUT BOUCLE VERTICALE DANS LA PHYSIQUE.
     69 ! KTDIA : START OF THE VERTICAL LOOP IN THE PHYSICS (IF SOME LEVELS ARE
     70 !                     SKIPPED AT THE TOP OF THE MODEL).
     71 ! KLEV : FIN BOUCLE VERTICE ET DIMENSION VERTICALE (NFLEVG DANS CPG).
     72 ! KLEV : END OF VERTICAL LOOP AND VERTICAL DIMENSION(NFLEVG IN *CPG*).
     73 ! KSTEP : TIME STEP NUMBER (starting with zero)
     74 ! KSGST : NUMBER OF SUBGRID SURFACE TEMPERATURES AND FLUXES (NTSSG IN *CPG*)
     75 ! PDT : TIME STEP (in s)
     76 ! LDXFUMSE : T if CDCONF=X in order not to increment surfex timer in that case
     77 !-----------------------------------------------------------------------
     78 ! PGEMU      : SINE OF GEOGRAPHICAL LATITUDE
     79 ! PGELAM     :  LONGITUDE
     80 ! POROG      : g * OROGRAPHY
     81 ! PGM        : MAP FACTOR (used in ALARO convection only)
     82 ! PMU0       : COSINUS LOCAL INSTANTANE DE L'ANGLE ZENITHAL SOLAIRE.
     83 ! PMU0LU     : COSINUS LOCAL INSTANTANE DE L'ANGLE ZENITHAL LUNAIRE.
     84 ! PMU0       : LOCAL COSINE OF INSTANTANEOUS SOLAR ZENITH ANGLE.
     85 ! PMU0M      : COSINUS LOCAL MOYEN DE L'ANGLE ZENITHAL.
     86 ! PMU0M      : LOCAL COSINE OF AVERAGED SOLAR ZENITH ANGLE.
     87 ! PMU0N      : COSINUS LOCAL AU PAS DE TEMPS SUIVANT DE L'ANGLE ZENITHAL SOLAIRE.
     88 ! PMU0N      : NEXT TIME STEP COSINUS LOCAL INSTANTANE DE L'ANGLE ZENITHAL SOLAIRE.
     89 ! PCLON      : cosine of geographical longitude.
     90 ! PSLON      : sine of geographical longitude.
     91 ! PVO3ABC    : OZONE COEFFICIENTS FOR ARPEGE PROFILES
     92 ! PLSM       : -ATMOSPHERIC MODEL- LAND-SEA MASK (! MAY BE DIFFERENT FROM
     93 !              THE SURFACE ONE)
     94 ! PAESEA     : AEROSOLS MARINS (SI NVCLIA >= 4)
     95 ! PAESEA     : MARINE AEROSOLS (IF NVCLIA >= 4)
     96 ! PAELAN     : AEROSOLS CONTINENTAUX (SI NVCLIA >= 4)
     97 ! PAELAN     : CONTINENTAL AEROSOLS (IF NVCLIA >= 4)
     98 ! PAESOO     : AEROSOLS CARBONES (SI NVCLIA >= 4)
     99 ! PAESOO     : SOOT AEROSOLS (IF NVCLIA >= 4)
    100 ! PAEDES     : AEROSOLS DESERTIQUES (SI NVCLIA >= 4)
    101 ! PAEDES     : DESERT AEROSOLS (IF NVCLIA >= 4)
    102 ! PAESUL     : AEROSOLS SULFATES (SI LAEROSUL=.T.)
    103 ! PAESUL     : SULFATE AEROSOLS  (IF LAEROSUL=.T.)
    104 ! PAEVOL     : AEROSOLS VOLCAN   (SI LAEROVOL=.T.)
    105 ! PAEVOL     : VOLCANO AEROSOLS  (IF LAEROVOL=.T.)
    106 ! PGP2DSDT   : STOCHASTIC PHYSICS PATTERNS
    107 
    108 ! FIELDS WITH SUBSCRIPT M FOR TIME T-DT IN 3TL OR T IN 2TL
    109 
    110 ! PAPHIM     : GEOPOTENTIAL ON HALF-LEVELS
    111 ! PAPHIFM    : GEOPOTENTIAL ON FULL-LEVELS
    112 ! PAPRSM     : PRESSURE ON HALF LEVELS
    113 ! PAPRSFM    : PRESSURE ON FULL LEVELS.
    114 ! PRDELPM    : INVERSE OF PDELP

Page 4           Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

    115 ! PDELPM     : LAYER THICKNESS IN PRESSURE UNITS
    116 
    117 ! PTM        : TEMPERATURE.
    118 ! PQVM        : SPECIFIC HUMIDITY OF WATER VAPOR
    119 ! PCPM        : SPECIFIC HEAT AT CONSTANT PRESSURE FOR AIR
    120 ! PRM         : GAS CONSTANT FOR AIR
    121 ! PALPHM      : "alpha" on layers
    122 ! PLNPRM      : "delta" on layers
    123 
    124 ! PQCM        : SPECIFIC HUMIDITY OF CLOUD WATER
    125 ! PQIM        : SPECIFIC HUMIDITY OF ICE
    126 ! PQRM        : SPECIFIC HUMIDITY OF RAIN
    127 ! PQSM        : SPECIFIC HUMIDITY OF SNOW
    128 ! PQGM        : SPECIFIC HUMIDITY OF GRAUPEL
    129 ! PQHM        : SPECIFIC HUMIDITY OF HAIL
    130 ! PTKEM       : TURBULENT KINETIC ENERGY
    131 ! PSVM        : PASSIVE SCALARS
    132 ! PSIGM       : SIGMA FOR SUBGRIDCOND
    133 ! PUM         : ZONAL WIND
    134 ! PVM         : MERIDIAN WIND
    135 ! PWM         : VERTICAL VELOCITY (m/s)
    136 
    137 !-----------------------------------------------------------------------
    138 ! - INOUT
    139 
    140 ! PGPAR       : BUFFER FOR 2D FIELDS - CONTAINS PRECIP, ALBEDO, EMISS, TS
    141 !             : SURFACE FLUXES
    142 ! PEMTD       : DOWNWARD LONGWAVE EMISSIVITY
    143 ! PEMTU       : UPWARD   LONGWAVE EMISSIVITY
    144 ! PTRSO       : SHORTWAVE TRANSMISSIVITY
    145 
    146 ! ACRANEB2 intermittency storage
    147 
    148 ! PGDEOSI   : DESCENDING INCREMENTAL OPTICAL DEPTHS, SOLAR
    149 ! PGUEOSI   : ASCENDING  INCREMENTAL OPTICAL DEPTHS, SOLAR
    150 ! PGMU0     : COSINE OF SOLAR ZENITH ANGLE, APPROXIMATE ACTUAL VALUE
    151 ! PGMU0_MIN : COSINE OF SOLAR ZENITH ANGLE, MIN VALUE
    152 ! PGMU0_MAX : COSINE OF SOLAR ZENITH ANGLE, MAX VALUE
    153 ! PGDEOTI     : DESCENDING INCREMENTAL OPTICAL DEPTHS, dB/dT(T0) WEIGHTS
    154 ! PGDEOTI2    : DESCENDING INCREMENTAL OPTICAL DEPTHS, B WEIGHTS WITH
    155 !               LINEAR T_e CORRECTION
    156 ! PGUEOTI     : ASCENDING INCREMENTAL OPTICAL DEPTHS, dB/dT(T0) WEIGHTS
    157 ! PGUEOTI2    : ASCENDING INCREMENTAL OPTICAL DEPTHS, B WEIGHTS WITH
    158 !               LINEAR T_e CORRECTION
    159 ! PGEOLT      : LOCAL OPTICAL DEPTHS, dB/dT(T0) WEIGHTS
    160 ! PGEOXT      : MAXIMUM OPTICAL DEPTHS FOR EBL-EAL, dB/dT(T0) WEIGHTS
    161 ! PGRPROX     : CORRECTION TERM FOR ADJACENT EXCHANGES
    162 ! PGMIXP      : NON-STATISTICAL WEIGHTS FOR BRACKETING
    163 ! PGFLUXC     : OUT OF BRACKET PART OF CLEARSKY EBL, RESP. EBL-EAL FLUX
    164 ! PGRSURF     : CORRECTIVE RATIO FOR SURFACE CTS CONTRIBUTION
    165 !-----------------------------------------------------------------------
    166 ! - OUTPUT (SUBSCRIPT S FOR T+DT)
    167 
    168 ! PCLFS       : CLOUD FRACTION
    169 ! PQLRAD      : SPECIFIC HUMIDITY OF CLOUD WATER FOR RTTOV
    170 ! PQIRAD      : SPECIFIC HUMIDITY OF ICE FOR RTTOV
    171 ! PSIGS       : SIGMA FOR SUBGRIDCOND

Page 5           Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

    172 ! PTENDT      : TEMPERATURE TENDENCY
    173 ! PTENDR      : HYDROMETEORE TENDENCIES
    174 ! PTENDU      : ZONAL WIND TENDENCY
    175 ! PTENDV      : MERIDIAN WIND TENDENCY
    176 ! PTENDW      : VERTICAL VELOCITY TENDENCY
    177 ! PTENDTKE    : TKE TENDENCY
    178 ! PTENDEXT    : PASSIVE SCALARS TENDENCY
    179 ! PFRTH       : LONGWAVE RADIATIVE FLUX
    180 ! PFRSO       : SHORTWAVE RADIATIVE FLUX
    181 ! PFRTHDS     : LONGWAVE DOWNWARD SURFACE RADIATIVE FLUX
    182 ! PFRSOPS     : SHORTWAVE DOWNWARD SURFACE RADIATIVE FLUX DIRECT
    183 ! PFRSDNI     : SHORTWAVE DIRECT NORMAL IRRADIANCE
    184 ! PFRSODS     : SHORTWAVE DOWNWARD SURFACE RADIATIVE FLUX GLOBAL
    185 ! PFRSOPT     : SHORTWAVE DOWNWARD TOP RADIATIVE FLUX DIRECT
    186 ! - 2D (0:1)
    187 ! PFRTHC      : LONGWAVE CLEAR SKY NET RADIATIVE FLUX
    188 ! PFRSOC      : SHORTWAVE CLEAR SKY NET RADIATIVE FLUX
    189 
    190 ! variables used in input for radiation in case no surface scheme is used
    191 
    192 ! PALBIN     : MODEL SURFACE SHORTWAVE ALBEDO.
    193 ! PEMIS      : MODEL SURFACE LONGWAVE EMISSIVITY.
    194 
    195 ! Part of GFL strcture dedicated to easy diagnostics (to be used as a print...)
    196 ! PEZDIAG    : MULPITPLE ARRAY TO BE FILLED BY THE USER BY 3D FIELDS
    197 !              (NGFL_EZDIAG ONES)
    198 ! output for CFU XFU
    199 ! PCLCH      : HIGH CLOUD COVER (DIAGNOSTIC).
    200 ! PCLCL      : LOW CLOUD COVER (DIAGNOSTIC).
    201 ! PCLCM      : MEDIUM CLOUD COVER (DIAGNOSTIC).
    202 ! PCLCT      : TOTAL CLOUD COVER (DIAGNOSTIC).
    203 ! PFPLSL     : RESOLVED PRECIPITATION AS RAIN.
    204 ! PFPLSN     : RESOLVED PRECIPITATION AS SNOW
    205 ! PFPLSG     : RESOLVED PRECIPITATION AS GRAUPEL
    206 ! PFPLSH     : RESOLVED PRECIPITATION AS HAIL
    207 ! PSTRTU     : TURBULENT FLUX OF MOMENTUM "U".
    208 ! PSTRTV     : TURBULENT FLUX OF MOMENTUM "V".
    209 ! PFCS       : SENSIBLE HEAT FLUX AT SURFACE LEVEL.
    210 ! PFCLL      : LATENT HEAT FLUX AT SURFACE LEVEL OVER WATER.
    211 ! PFCLN      : LATENT HEAT FLUX AT SURFACE LEVEL OVER SNOW.
    212 ! PUCLS      : SORTIE DIAGNOSTIQUE DU VENT EN X A HUV METEO.
    213 ! PUCLS      : U-COMPONENT OF WIND AT 10 METERS (DIAGNOSTIC).
    214 ! PVCLS      : SORTIE DIAGNOSTIQUE DU VENT EN Y A HUV METEO.
    215 ! PVCLS      : V-COMPONENT OF WIND AT 10 METERS (DIAGNOSTIC).
    216 ! PNUCLS     : SORTIE DIAGNOSTIQUE DU VENT NEUTRE EN X A HUV METEO.
    217 ! PNUCLS     : U-COMPONENT OF NEUTRAL WIND AT 10 METERS (DIAGNOSTIC).
    218 ! PNVCLS     : SORTIE DIAGNOSTIQUE DU VENT NEUTRE EN Y A HUV METEO.
    219 ! PNVCLS     : V-COMPONENT OF NEUTRAL WIND AT 10 METERS (DIAGNOSTIC).
    220 ! PTCLS      : SORTIE DIAGNOSTIQUE DE LA TEMPERATURE A HTQ METEO.
    221 ! PTCLS      : TEMPERATURE AT 2 METERS (DIAGNOSTIC).
    222 ! PQCLS      : SORTIE DIAGNOSTIQUE DE L'HUMIDITE SPECIFIQUE A HTQ METEO.
    223 ! PQCLS      : SPECIFIC HUMIDITY AT 2 METERS (DIAGNOSTIC).
    224 ! PHUCLS     : SORTIE DIAGNOSTIQUE DE L'HUMIDITE RELATIVE A HTQ METEO.
    225 ! PHUCLS     : RELATIVE HUMIDITY AT 2 METERS (DIAGNOSTIC).
    226 ! PUGST      : SORTIE DIAGNOSTIQUE DU VENT RAFALE EN X A HUV METEO.
    227 ! PUGST      : U-COMPONENT OF WIND GUST AT 10 METERS (DIAGNOSTIC).
    228 ! PVGST      : SORTIE DIAGNOSTIQUE DU VENT RAFALE EN Y A HUV METEO.

Page 6           Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

    229 ! PVGST      : V-COMPONENT OF WIND GUST AT 10 METERS (DIAGNOSTIC).
    230 ! PFEVL      : FLUX DE VAPEUR D'EAU SUR EAU LIQUIDE (OU SOL HUMIDE).
    231 ! PFEVL      : WATER VAPOUR FLUX OVER LIQUID WATER (OR WET SOIL)
    232 ! PFEVN      : FLUX DE VAPEUR D'EAU SUR NEIGE (OU GLACE) ET SOL GELE.
    233 ! PFEVN      : WATER VAPOUR FLUX OVER SNOW (OR ICE) AND FROZEN SOIL.
    234 ! PPBLH      : PSEUDO-HISTORICAL ARRAY FOR PBL HEIGHT
    235 ! PSPSG      : SNOW COVER
    236 ! PSDUR      : SUNSHINE DURATION [s]
    237 ! PDIAGH     : HAIL DIAGNOSTIC
    238 
    239 !-----------------------------------------------------------------------
    240 
    241 !     Externes.
    242 !     ---------
    243 
    244 !     Method
    245 !     ------
    246 !     - convert aladin variables into mesonh variables (level inversion
    247 !       and q to r, t to theta)
    248 !     - call mesoNH physics and ECMWF radiation scheme
    249 !     - convert mesoNH tendencies to aladin tendencies
    250 
    251 !     Auteur.
    252 !     -------
    253 !      S.Malardel et Y. Seity
    254 !      10-03-03
    255 !      big cleaning (18/06/04) S. Malardel and Y. Seity
    256 !     externalisation of surface scheme call + small cleaning (20-07-04) Y.Seity
    257 !     Modifications
    258 !     -------------
    259 !      G. Hello 04-02-06: Add the call of KFB-convection scheme
    260 !                         for future use in ALARO
    261 !      T.Kovacic 04-05-05: Added ZCVTENDPR and ZCVTENDPRS
    262 !        M.Hamrud      01-Oct-2003 CY28 Cleaning
    263 !      F.Bouyssel 04-05-05: New arguments in ACRADIN
    264 !     Y. Seity 30-Sept-2005 Add MNH Chemistry scheme
    265 !     R. Zaaboul 15-feb-2006 add surface scheme call
    266 !     T.Kovacic  2006-03-23: calls to subroutines for budgets
    267 !                             and new arguments PFRTH and PFRSO
    268 !     Y. Seity   2007-05-07: add CFU and XFU calculations
    269 !                           and call aro_ground_diag
    270 !     S.Ivatek-S 2007-04-17: Over dimensioning of PGPAR by NGPAR+1 just
    271 !                            (KLON,NGPAR) is used boundary checking bf
    272 !     T.Kovacic  2007-03-16: Fourth dim. in APFT
    273 !     JJMorcrette, ECMWF, 20080325: dummy arguments for RADACT to allow for
    274 !                        using a new sulphate climatology in the ECMWF model
    275 !     Y. Seity   2008-06-15: correct calculations of PFRTHDS, PFRSODS and PFCLL
    276 !     Y. Seity   2008-09-29: phasing Chemistry corrections
    277 !     O.Riviere  2008-10-01: introduction of new data flow for DDH in Arome
    278 !     Y. Seity   2009-05-03: new version of EDKF and implementation of EDMF
    279 !     Y. Seity   2009-10-03: add missed deallocations
    280 !     S. Riette  2009-03-25: Arguments modification for AROCLDIA to add HTKERAF
    281 !     K. Yessad (Jul 2009): remove CDLOCK + some cleanings
    282 !     A. Alias   2009-09-01: Sulfate and Volcano aerosols added (call radaer)
    283 !     S. Riette  2010-01-19: ZZI_UM, ZZI_VM and ZDEPTH_HEIGHT are given
    284 !                            ARO_GROUND_DIAG in 3D.
    285 !     Y. Seity   2010-03-09: add PFEVN and PFEVL

Page 7           Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

    286 !     Y. Bouteloup 2010-03-26 : Add PQLRAD et PQIRAD
    287 !     Y. Seity : Test TKE > 0.
    288 !     Y. Seity : Optimized version of EDKF + diag HCLS
    289 !     Y. Seity : 2010-09 Save Ts at the end of apl_arome for ICMSH+0000
    290 !     L. Bengtsson (2010): Introduce cloud diagnostics based on geop.
    291 !                               height (LWMOCLOUD), AND cloud-overlap assumptions
    292 !                               from C. Wittman 2009 (LACPANMX + WMXOV)
    293 !     S. Riette: 2010-12 aro_ground_diag interface modified
    294 !     Y. Seity: 2010-12 add hail diagnostic
    295 !     R. El Khatib 30-Jun-2010 NEC directive noloopfusion to preserve critical regions
    296 !     P.Marguinaud 2010-06-29 : KSURFEXCTL flag (disable SURFEX)
    297 !     2010-12    B. Decharme  : modify the radiative coupling with surfex (SW per band in ACRADIN and RADHEAT)
    298 !     2011-02    A. Voldoire : add ZAERINDS to CALL RADAER and ACRADIN
    299 !                              for sulfate indirect effect computation
    300 !     2011-06: M. Jerczynski - some cleaning to meet norms
    301 !     S. Riette: 2011-10 : Modifications for DUAL-MF scheme (according to Wim de Rooy's apl_arome version)
    302 !                          Ice in EDKF
    303 !     Y. Seity : 2012-03 : add LMNHLEV option to revert/or not arrays for MesoNH parameterisations
    304 !     F. Bouttier: 2012-07 add SPPT stochastic physics
    305 !     JJMorcrette, ECMWF, 20120815 additional dummy due to changes in RADACT
    306 !     P. Marguinaud : 2012-09 : Add control threshold for orography
    307 !     Y. Seity : 2013-01 Cleaning LMNHLEV and remove JPVEXT points
    308 !     Y. Seity : 2013-02 Cleaning (add compute_neb)
    309 !     L. Bengtsson: 2013-02: add LOLSMC and LOTOWNC options to compute (or not) cloud sedimentation
    310 !                            using different cloud droplet number conc. depending on land/sea/town.
    311 !     2013-11, D. Degrauwe: Introduction of radflex interface, export
    312 !                           upper-air precipitation fluxes PFPR.
    313 !     2013-11, J. Masek: Inclusion of ACRANEB2 radiation scheme.
    314 !     S. Riette: 2013-11: subgrid precipitation
    315 !     K. Yessad (July 2014): Move some variables.
    316 !     2014-09, C. Wastl: Adaptations for orographic shadowing
    317 !     2014-11, Y. Seity: add TKE budgets for DDH
    318 !     2016-03, E. Bazile: Phasing MUSC for surf_ideal_flux
    319 !     2016-04, J. Masek: LRNUEXP cloud overlap option (COMPUTE_NEB replaced
    320 !                        by ACNPART), passing of sushine duration, fix of
    321 !                        E. Gleeson for ACRANEB2 with SURFEX.
    322 !     2016-09, J. Masek: Proper calculation of sunshine duration in ACRANEB2.
    323 !     2016-10, P. Marguinaud : Port to single precision
    324 !     2018-05, E. Gleeson: Corrected misplaced arguments in ACRANEB2 call.
    325 ! End modifications
    326 !-------------------------------------------------------------------------------
    327 
    328 USE GEOMETRY_MOD , ONLY : GEOMETRY
    329 USE SURFACE_FIELDS_MIX , ONLY : TSURF
    330 USE PARKIND1  ,ONLY : JPIM     ,JPRB     ,JPRD
    331 USE YOMHOOK   ,ONLY : LHOOK    ,DR_HOOK
    332 
    333 ! AROME SPECIFIC
    334 USE YOMPARAR  ,ONLY : YRPARAR
    335 
    336 USE YOMARPHY  ,ONLY : YRARPHY
    337 USE YOMMSE    ,ONLY : YRMSE
    338 
    339 ! OTHERS
    340 USE YOESW, ONLY : RSUN2
    341 USE YOMCST   , ONLY : RG       ,RCPD     ,RD       ,RATM     ,RTT      ,&
    342           & RCW      ,RCPV     ,RLVTT    ,RCS      ,RLSTT    ,RGAMW    ,&

Page 8           Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

    343           & RBETW    ,RALPW    ,RGAMS    ,RBETS    ,RALPS    ,RGAMD    ,&
    344           & RBETD    ,RALPD    ,RETV     ,RV       ,RKAPPA
    345 USE YOERAD   , ONLY : YRERAD
    346 USE YOERDI   , ONLY : YRERDI
    347 USE YOMPHY   , ONLY : YRPHY
    348 USE YOMPHY0  , ONLY : YRPHY0
    349 USE YOMPHY3  , ONLY : YRPHY3
    350 USE YOMLDDH  , ONLY : YRLDDH
    351 USE YOMTOPH  , ONLY : YRTOPH
    352 USE YOMLUN   , ONLY : NULOUT
    353 USE YOMCT0   , ONLY : LTWOTL, LSFORCS
    354 USE YOMVERT  , ONLY : VP00
    355 USE YOMRIP0  , ONLY : NINDAT
    356 USE YOMRIP   , ONLY : YRRIP
    357 USE YOM_YGFL , ONLY : YGFL
    358 USE YOMNSV   , ONLY : NSV_CO2
    359 USE YOMXFU   , ONLY : YRXFU
    360 USE DDH_MIX, ONLY: ADD_FIELD_3D, NEW_ADD_FIELD_3D, TYP_DDH ! for new diag data flow
    361 USE YOMPHYDS , ONLY : YRPHYDS
    362 USE YOMSPSDT , ONLY : LSPSDT,YGPSDT
    363 USE YOMLSFORC, ONLY : LMUSCLFA, NMUSCLFA, REMIS_FORC, RALB_FORC
    364 ! daand: radflex
    365 USE INTFLEX_MOD, ONLY : LINTFLEX, LRADFLEX,&
    366                       & TYPE_INTPROC, TYPE_INTPROCSET,&
    367                       & NEWINTFIELD, NEWINTPROC
    368 
    369 !     --------------------------------------------------------------------------
    370 
    371 IMPLICIT NONE
    372 
    373 TYPE(GEOMETRY), INTENT(INOUT) :: YDGEOMETRY
    374 TYPE(TSURF), INTENT(INOUT) :: YDSURF
    375 INTEGER(KIND=JPIM),INTENT(IN)    :: KLON
    376 INTEGER(KIND=JPIM),INTENT(IN)    :: KLEV
    377 INTEGER(KIND=JPIM),INTENT(IN)    :: KBL 
    378 INTEGER(KIND=JPIM),INTENT(IN)    :: KGPCOMP 
    379 INTEGER(KIND=JPIM),INTENT(IN)    :: KIDIA 
    380 INTEGER(KIND=JPIM),INTENT(IN)    :: KFDIA 
    381 INTEGER(KIND=JPIM),INTENT(IN)    :: KTDIA 
    382 INTEGER(KIND=JPIM),INTENT(IN)    :: KSTEP 
    383 INTEGER(KIND=JPIM),INTENT(IN)    :: KSGST
    384 REAL(KIND=JPRB)   ,INTENT(IN)    :: PDT 
    385 LOGICAL           ,INTENT(IN)    :: LDXFUMSE 
    386 REAL(KIND=JPRB)   ,INTENT(IN)    :: PINDX(KLON) 
    387 REAL(KIND=JPRB)   ,INTENT(IN)    :: PINDY(KLON) 
    388 REAL(KIND=JPRB)   ,INTENT(IN)    :: PGEMU(KLON)
    389 REAL(KIND=JPRB)   ,INTENT(IN)    :: PGELAM(KLON)
    390 REAL(KIND=JPRB)   ,INTENT(IN)    :: PGM(KLON) 
    391 REAL(KIND=JPRB)   ,INTENT(IN)    :: POROG(KLON)
    392 REAL(KIND=JPRB)   ,INTENT(IN)    :: PMU0(KLON)
    393 REAL(KIND=JPRB)   ,INTENT(IN)    :: PMU0LU(KLON)
    394 REAL(KIND=JPRB)   ,INTENT(IN)    :: PMU0M(KLON)
    395 REAL(KIND=JPRB)   ,INTENT(IN)    :: PMU0N(KLON)
    396 REAL(KIND=JPRB)   ,INTENT(IN)    :: PCLON(KLON)
    397 REAL(KIND=JPRB)   ,INTENT(IN)    :: PSLON(KLON)
    398 REAL(KIND=JPRB)   ,INTENT(IN)    :: PVO3ABC(KLON,3) 
    399 REAL(KIND=JPRB)   ,INTENT(IN)    :: PLSM(KLON) 

Page 9           Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

    400 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PAESEA(KLON)
    401 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PAELAN(KLON)
    402 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PAESOO(KLON)
    403 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PAEDES(KLON)
    404 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PAESUL(KLON)
    405 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PAEVOL(KLON)
    406 REAL(KIND=JPRB)   ,INTENT(IN)    :: PGP2DSDT(KLON,YGPSDT%NG2D)
    407 REAL(KIND=JPRB)   ,INTENT(IN)    :: PAPHIM(KLON,0:KLEV) 
    408 REAL(KIND=JPRB)   ,INTENT(IN)    :: PAPHIFM(KLON,KLEV) 
    409 REAL(KIND=JPRB)   ,INTENT(IN)    :: PAPRSM(KLON,0:KLEV) 
    410 REAL(KIND=JPRB)   ,INTENT(IN)    :: PAPRSFM(KLON,KLEV) 
    411 REAL(KIND=JPRB)   ,INTENT(IN)    :: PRDELPM(KLON,KLEV) 
    412 REAL(KIND=JPRB)   ,INTENT(IN)    :: PDELPM(KLON,KLEV) 
    413 REAL(KIND=JPRB)   ,INTENT(IN)    :: PTM(KLON,KLEV) 
    414 REAL(KIND=JPRB)   ,INTENT(IN)    :: PQVM(KLON,KLEV) 
    415 REAL(KIND=JPRB)   ,INTENT(IN)    :: PCPM(KLON,KLEV)
    416 REAL(KIND=JPRB)   ,INTENT(IN)    :: PRM(KLON,KLEV) 
    417 REAL(KIND=JPRB)   ,INTENT(IN)    :: PALPHM(KLON,KLEV) 
    418 REAL(KIND=JPRB)   ,INTENT(IN)    :: PLNPRM(KLON,KLEV) 
    419 REAL(KIND=JPRB)   ,INTENT(IN)    :: PQCM(KLON,KLEV) 
    420 REAL(KIND=JPRB)   ,INTENT(IN)    :: PQIM(KLON,KLEV) 
    421 REAL(KIND=JPRB)   ,INTENT(IN)    :: PQRM(KLON,KLEV) 
    422 REAL(KIND=JPRB)   ,INTENT(IN)    :: PQSM(KLON,KLEV) 
    423 REAL(KIND=JPRB)   ,INTENT(IN)    :: PQGM(KLON,KLEV) 
    424 REAL(KIND=JPRB)   ,INTENT(IN)    :: PQHM(KLON,KLEV) 
    425 REAL(KIND=JPRB)   ,INTENT(IN)    :: PTKEM(KLON,KLEV) 
    426 REAL(KIND=JPRB)   ,INTENT(IN)    :: PEFB1(KLON,KLEV) 
    427 REAL(KIND=JPRB)   ,INTENT(IN)    :: PEFB2(KLON,KLEV) 
    428 REAL(KIND=JPRB)   ,INTENT(IN)    :: PEFB3(KLON,KLEV) 
    429 REAL(KIND=JPRB)   ,INTENT(IN)    :: PSVM(KLON,KLEV,YGFL%NGFL_EXT)
    430 REAL(KIND=JPRB)   ,INTENT(IN)    :: PSIGM(KLON,KLEV) 
    431 REAL(KIND=JPRB)   ,INTENT(IN)    :: PUM(KLON,KLEV) 
    432 REAL(KIND=JPRB)   ,INTENT(IN)    :: PVM(KLON,KLEV) 
    433 REAL(KIND=JPRB)   ,INTENT(IN)    :: PWM(KLON,KLEV) 
    434 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGPAR(KLON,YRPARAR%NGPAR+1) 
    435 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PEMTD(KLON,0:KLEV)
    436 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PEMTU(KLON,0:KLEV)
    437 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PTRSO(KLON,0:KLEV)
    438 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGDEOSI(KLON,0:KLEV,2)
    439 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGUEOSI(KLON,0:KLEV,2)
    440 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGMU0(KLON,YRPHY%NSORAYFR)
    441 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGMU0_MIN(KLON)
    442 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGMU0_MAX(KLON)
    443 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGDEOTI(KLON,0:KLEV)
    444 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGDEOTI2(KLON,0:KLEV)
    445 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGUEOTI(KLON,0:KLEV)
    446 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGUEOTI2(KLON,0:KLEV)
    447 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGEOLT(KLON,KLEV)
    448 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGEOXT(KLON,KLEV)
    449 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGRPROX(KLON,0:KLEV)
    450 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGMIXP(KLON,0:KLEV)
    451 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGFLUXC(KLON,0:KLEV)
    452 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PGRSURF(KLON)
    453 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PCLFS(KLON,KLEV) 
    454 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PQLRAD(KLON,KLEV)
    455 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PEDR(KLON,KLEV)
    456 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PQIRAD(KLON,KLEV)

Page 10          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

    457 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PSIGS(KLON,KLEV) 
    458 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PTENDT(KLON,KLEV) 
    459 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PTENDR(KLON,KLEV,YRPARAR%NRR) 
    460 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PTENDU(KLON,KLEV) 
    461 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PTENDV(KLON,KLEV) 
    462 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PTENDW(KLON,KLEV) 
    463 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PTENDTKE(KLON,KLEV) 
    464 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PRH(KLON,KLEV)
    465 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PTENDEFB1(KLON,KLEV) 
    466 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PTENDEFB2(KLON,KLEV) 
    467 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PTENDEFB3(KLON,KLEV) 
    468 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PTENDEXT(KLON,KLEV,YGFL%NGFL_EXT)
    469 REAL(KIND=JPRB)   ,INTENT(IN)    :: PALBIN(KLON)
    470 ! daand: radflex; made target
    471 REAL(KIND=JPRB)   ,INTENT(INOUT), TARGET :: PFRTH(KLON,0:KLEV,KSGST+1)
    472 REAL(KIND=JPRB)   ,INTENT(OUT), TARGET :: PFRSO(KLON,0:KLEV,KSGST+1)
    473 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PFRTHDS(KLON)
    474 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PFRSOPS(KLON)
    475 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PFRSDNI(KLON)
    476 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PFRSODS(KLON)
    477 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PFRSOPT(KLON)
    478 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PFRSOC(KLON,0:1)
    479 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PFRTHC(KLON,0:1)
    480 REAL(KIND=JPRB)   ,INTENT(IN)    :: PEMIS(KLON) 
    481 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PEZDIAG(KLON,KLEV,YGFL%NGFL_EZDIAG)
    482 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PCLCH(KLON) 
    483 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PCLCL(KLON) 
    484 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PCLCM(KLON) 
    485 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PCLCT(KLON) 
    486 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PFPLSL(KLON,0:KLEV) 
    487 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PFPLSN(KLON,0:KLEV) 
    488 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PFPLSG(KLON,0:KLEV) 
    489 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PFPLSH(KLON,0:KLEV) 
    490 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PSTRTU(KLON,0:KLEV) 
    491 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PSTRTV(KLON,0:KLEV) 
    492 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PFCS(KLON,KSGST+1) 
    493 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PFCLL(KLON,KSGST+1)
    494 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PFCLN(KLON,KSGST+1)
    495 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PFEVL(KLON,KSGST+1)
    496 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PFEVN(KLON,KSGST+1)
    497 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PUCLS(KLON)
    498 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PVCLS(KLON)
    499 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PNUCLS(KLON)
    500 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PNVCLS(KLON)
    501 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PTCLS(KLON)
    502 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PQCLS(KLON)
    503 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PHUCLS(KLON)
    504 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PUGST(KLON)
    505 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PVGST(KLON)
    506 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PPBLH(KLON)
    507 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PSPSG(KLON) 
    508 REAL(KIND=JPRB)   ,INTENT(INOUT) :: PSDUR(KLON)
    509 REAL(KIND=JPRB)   ,INTENT(OUT)   :: PDIAGH(KLON) 
    510 REAL(KIND=JPRB)   ,INTENT(IN)    :: PSFORC(KLON,YRPHYDS%NSFORC)
    511 ! daand: radflex
    512 TYPE(TYPE_INTPROCSET), INTENT(INOUT) :: YDPROCSET
    513 TYPE(TYP_DDH)     ,INTENT(INOUT) :: YDDDH

Page 11          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

    514 !*
    515 !     ------------------------------------------------------------------
    516 !     DECLARATION DES TABLEAUX ARGUMENTS
    517 ! pour le rayonnement
    518 !!    LOCAL VARIABLES :
    519 !    4D arrays
    520 REAL(KIND=JPRB), DIMENSION (KLON,1,KLEV,YRPARAR%NRR) :: ZZI_RM, ZZI_RS, ZZI_RSAVE
    521 REAL(KIND=JPRB), DIMENSION (KLON,1,KLEV,YRPARAR%NRR) :: ZZI_PFPR
    522 !    3D arrays
    523 REAL(KIND=JPRB), DIMENSION (KLON,1,KLEV) :: ZZZ,ZDZZ, ZZZF,ZDZZF,ZZI_PABSM, ZZI_THM,&
    524                 & ZZI_THS, ZCIT, ZZI_MFM, ZZI_EXNREFM, ZZI_SIGM, ZZI_SIGS,&
    525                 & ZZI_THSAVE, ZNEBMNH,ZEVAP, &
    526 ! length scales for momentum and heat for mnh level definitions in case LHARATU=TRUE
    527                 & ZZI_LENGTHM, ZZI_LENGTHH
    528 REAL(KIND=JPRB), DIMENSION (KLON,KLEV) ::  ZQDM, ZQV, ZGEOSLC, ZQCO2
    529 REAL(KIND=JPRB), DIMENSION (KLON,1,KLEV) :: ZZI_EDR
    530 
    531 !    2D arrays
    532 REAL(KIND=JPRB), DIMENSION (KLON,1) :: ZSEA, ZTOWN
    533 REAL(KIND=JPRB), DIMENSION (KLON,1) :: ZINPRR, ZACPRR, ZINPRS, ZACPRS, ZINPRG
    534 REAL(KIND=JPRB), DIMENSION (KLON,1) :: ZACPRG, ZINPRR_NOTINCR, ZINPRS_NOTINCR
    535 REAL(KIND=JPRB), DIMENSION (KLON,1) :: ZINPRG_NOTINCR,ZINPRH_NOTINCR,ZINPRH
    536 REAL(KIND=JPRB), DIMENSION (KLON,1) :: ZLAT, ZLON, ZZENITH, ZZS, ZALB_UV
    537 REAL(KIND=JPRB) :: ZEMIS (KLON)
    538 !    Integers
    539 INTEGER(KIND=JPIM) :: JLEV, JLON, JRR, JGFL, ISPLITR
    540 INTEGER(KIND=JPIM) :: IJN  ! max. number of day/night slices within NRPOMA
    541 INTEGER(KIND=JPIM) :: IKL  !ordering of vert levels 1:MNH -1:AROME
    542 INTEGER (KIND=JPIM) :: IOFF_MFSHAL, IEZDIAG_CHEM
    543 INTEGER (KIND=JPIM) :: IKA,IKB,IKU,IKT,IKTE,IKTB ! vertical points as in mpa
    544 INTEGER(KIND=JPIM) :: IMODE,JCHA,&
    545  & JSG, JAE ,JK, JR, JSW
    546 INTEGER(KIND=JPIM) :: ILONMNH   ! useful size of klon arrays for mesonh physics
    547 ! Check TKE for LHARATU similar to CBR but in apl_arome
    548 LOGICAL,DIMENSION(SIZE(PTKEM,1),SIZE(PTKEM,2)) :: LLTKENEG
    549 ! 3D mask .T. if TKE < ZTKEMIN
    550 
    551 !       Real
    552 REAL(KIND=JPRB) :: ZAEO, ZAEN
    553 REAL(KIND=JPRB) :: ZDT, ZDT2, ZINVDT, ZINVG, ZRSCP, ZINVATM, Z_WMAX, Z_WMIN
    554 REAL(KIND=JPRB) :: ZALBD(KLON,YRERAD%NSW), ZALBP(KLON,YRERAD%NSW)
    555 REAL(KIND=JPRB) :: ZALBD1(KLON), ZALBP1(KLON), ZSALBCOR(KLON)
    556 REAL(KIND=JPRB) :: ZTSURF(KLON), ZTN(KLON), ZQS(KLON), ZGZ0(KLON), ZGZ0H(KLON), ZTOWNS(KLON) 
    557 REAL(KIND=JPRB) :: ZQSAT(KLON,KLEV)
    558 ! length scales for momentum and heat and TKE in case LHARATU=TRUE
    559 REAL(KIND=JPRB) :: ZLENGTH_M(KLON,KLEV),ZLENGTH_H(KLON,KLEV)
    560 REAL(KIND=JPRB) :: PTKEEDMF(KLON,KLEV)
    561 REAL(KIND=JPRB) :: ZVETAH(0:KLEV)
    562 REAL(KIND=JPRB) :: ZLH(KLON,KLEV), ZLSCPE(KLON,KLEV)
    563 REAL(KIND=JPRB) :: ZQW(KLON,KLEV), ZTW(KLON,KLEV)
    564 REAL(KIND=JPRB) :: ZFRSOLU(KLON)
    565 REAL(KIND=JPRB) :: ZFRSODS(KLON), ZFRSOPS(KLON)
    566 REAL(KIND=JPRB) :: ZFRSOFS(KLON), ZFRSDNI(KLON)
    567 REAL(KIND=JPRB) :: ZFSDNN(KLON), ZFSDNV(KLON)
    568 REAL(KIND=JPRB) :: ZQICE(KLON,KLEV), ZQLIQ(KLON,KLEV)
    569 REAL(KIND=JPRB) :: ZQO3(KLON,0:KLEV), ZKAPM(KLON,KLEV)
    570 REAL(KIND=JPRB) :: ZAER(KLON,KLEV,6), ZRAER(KLON,6,KLEV)

Page 12          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

    571 REAL(KIND=JPRB) :: ZAERINDS(KLON,KLEV)
    572 REAL(KIND=JPRB) :: ZAERD(KLON,KLEV)
    573 REAL(KIND=JPRB) :: ZAESUL(KLON), ZAEVOL(KLON)
    574 REAL(KIND=JPRB) :: ZCARDI
    575 REAL(KIND=JPRB) :: ZROZ(YDGEOMETRY%YRGEM%NGPTOT,KLEV)
    576 REAL(KIND=JPRB) :: ZCHTIX(YDGEOMETRY%YRGEM%NGPTOT+2,KLEV+1), ZDUM(YDGEOMETRY%YRGEM%NGPTOT+2,KLEV)
    577 REAL(KIND=JPRB) :: ZTENT(KLON,KLEV)
    578 REAL(KIND=JPRB) :: ZTRSOD(KLON)
    579 REAL(KIND=JPRB) :: ZCEMTR(KLON,KLEV+1), ZCTRSO(KLON,KLEV+1)
    580 REAL(KIND=JPRB) :: ZSUDU(KLON), ZSDUR(KLON), ZDSRP(KLON)
    581 REAL(KIND=JPRB) :: ZAESEA(KLON), ZAELAN(KLON), ZAESOO(KLON), ZAEDES(KLON)
    582 REAL(KIND=JPRB) :: ZTM(KLON,KLEV), ZQVM(KLON,KLEV), ZQIM(KLON,KLEV)
    583 REAL(KIND=JPRB) :: ZQCM(KLON,KLEV),ZQHM(KLON,KLEV), ZQHGM(KLON,KLEV)
    584 REAL(KIND=JPRB) :: ZQRM(KLON,KLEV), ZQSM(KLON,KLEV), ZQGM(KLON,KLEV)
    585 REAL(KIND=JPRB) :: ZCPM(KLON,KLEV), ZRHM(KLON,KLEV)
    586 REAL(KIND=JPRB) :: ZZI_APHIM(KLON,0:KLEV), ZZI_APHIFM(KLON,KLEV)
    587 ! Stochastic physics pattern & dummy tendencies for calling sppten
    588 REAL(KIND=JPRB) :: ZMULNOISE(KLON,KLEV)
    589 REAL(KIND=JPRB) :: ZDUMMY(KLON,KLEV)
    590 ! POUR GROUND
    591 REAL(KIND=JPRB) :: ZZSFSWDIR(KLON,YRERAD%NSW), ZZSFSWDIF(KLON,YRERAD%NSW)
    592 REAL(KIND=JPRB) :: ZTRSODIR (KLON,YRERAD%NSW), ZTRSODIF (KLON,YRERAD%NSW)
    593 REAL(KIND=JPRB) :: ZDEPTH_HEIGHT(KLON,KLEV)
    594 ! Variables concerning updraft rain/snow for EDMF
    595 REAL(KIND=JPRB) :: ZTENDTUP(KLON,KLEV)
    596 REAL(KIND=JPRB) :: ZTENDQVUP(KLON,KLEV)
    597 REAL(KIND=JPRB) :: ZSURFPREP(KLON)
    598 REAL(KIND=JPRB) :: ZSURFSNOW(KLON)
    599 REAL(KIND=JPRB), DIMENSION (KLON,1) :: ZSSO_STDEV, ZTWSNOW
    600 ! AJOUT POUR TURB
    601 !    4D arrays
    602 REAL(KIND=JPRB),  DIMENSION(KLON,1,KLEV,YGFL%NGFL_EXT):: ZZI_SVS, ZZI_SVM,&
    603                                                     & ZTENDSV_TURB 
    604 REAL(KIND=JPRB),  DIMENSION (KLON,KLEV,YGFL%NGFL_EZDIAG):: ZZI_PEZDIAG
    605 
    606 !    3D arrays
    607 REAL(KIND=JPRB), DIMENSION (KLON,1,KLEV) :: ZTHVREFM  ! thetav de l etat
    608 ! de reference dans mesoNH. En 1D, thetavref=thetavM, mais la question
    609 ! concernant la facon d initialiser cette variable dans le 3D reste ouverte.
    610 ! (idem pour RHODREF)
    611 REAL(KIND=JPRB), DIMENSION (KLON,1,KLEV) :: ZZI_RHODREFM, ZZI_RHODJM, ZZI_RHO
    612 REAL(KIND=JPRB), DIMENSION (KLON,1,KLEV) :: ZZI_UM,ZZI_VM,ZZI_WM,&
    613                 & ZZI_US, ZZI_VS, ZZI_WS,&
    614                 & ZZI_THLS, ZZI_RTS, ZZI_MFUS, ZZI_MFVS,&
    615                 & ZTENDU_TURB,ZTENDV_TURB,&
    616                 & ZTENDTHL_TURB,ZTENDRT_TURB
    617 
    618 REAL(KIND=JPRB), DIMENSION (KLON,1,KLEV) :: ZZI_TKEM, ZZI_TKES, ZZI_TKESAVE
    619 !Variables used in case LHARATU=TRUE
    620 REAL(KIND=JPRB), DIMENSION (KLON,1,KLEV) :: ZZI_PTKEEDMF
    621 REAL(KIND=JPRB), DIMENSION (KLON,1,KLEV) :: ZZI_TKEEDMFS
    622 
    623 REAL(KIND=JPRB), DIMENSION (KLON,1,KLEV) :: ZSRCS 
    624 REAL(KIND=JPRB), DIMENSION (KLON,KLEV) :: ZZI_CVTENDT, ZZI_CVTENDRV,&
    625                 & ZZI_CVTENDRC, ZZI_CVTENDRI, ZZI_MFS
    626 
    627 REAL(KIND=JPRB), DIMENSION (KLON) :: ZCVTENDPR, ZCVTENDPRS, ZZTOP

Page 13          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

    628 
    629 REAL(KIND=JPRB) :: ZEPSM(0,0,0) ! Dissipation of TKE (eps) at time t-dt
    630 REAL(KIND=JPRB) :: ZEPSS(0,0,0) ! Dissipation of TKE at time t+dt
    631 !    2D arrays
    632 REAL(KIND=JPRB) :: ZSFU(KLON,1)  ! surface flux of x and
    633 REAL(KIND=JPRB) :: ZSFV(KLON,1)  ! y component of wind
    634 REAL(KIND=JPRB) :: ZSFTH(KLON,1) ! surface flux of theta
    635 REAL(KIND=JPRB) :: ZSFRV(KLON,1) ! surface flux of vapor
    636 REAL(KIND=JPRB) :: ZSFSV(KLON,1,YGFL%NGFL_EXT) ! surf. flux of scalars
    637 REAL(KIND=JPRB) :: ZSFCO2(KLON,1) ! surface flux of CO2
    638 
    639 REAL(KIND=JPRB) :: ZHOOK_HANDLE
    640 LOGICAL :: LLMSE
    641 LOGICAL :: LLMSE_PARAM
    642 LOGICAL :: LLMSE_DIAG
    643 INTEGER(KIND=JPIM), DIMENSION(KLON) :: ICLPH             !PBL top level
    644 REAL(KIND=JPRB),  DIMENSION(KLON,1,KLEV,YGFL%NGFL_EXT):: ZZI_SVSAVE
    645 INTEGER (KIND=JPIM) :: IDAY,IYEAR,IMONTH
    646 REAL(KIND=JPRB), DIMENSION(KLON,KLEV,YRPARAR%NSWB_MNH):: ZPIZA_DST !Single scattering
    647 ! albedo of dust (points,lev,wvl)
    648 REAL(KIND=JPRB), DIMENSION(KLON,KLEV,YRPARAR%NSWB_MNH):: ZCGA_DST  !Assymetry factor
    649 ! for dust (points,lev,wvl)
    650 REAL(KIND=JPRB), DIMENSION(KLON,KLEV,YRPARAR%NSWB_MNH):: ZTAUREL_DST !tau/tau_{550}
    651 !dust (points,lev,wvl)
    652 ! pas de temps pour la surface externalise
    653 REAL(KIND=JPRB) :: ZDTMSE,ZRHGMT,ZSTATI
    654 REAL(KIND=JPRB) :: ZCFAQ(KLON), ZCFBQ(KLON), ZCFATH(KLON)
    655 REAL(KIND=JPRB) :: ZCFBTH(KLON), ZCFAU(KLON)
    656 REAL(KIND=JPRB) :: ZCFBU(KLON), ZCFBV(KLON)
    657 ! Ajout pour MF scheme (Pergaud et al)
    658 REAL(KIND=JPRB), DIMENSION (KLON,1,KLEV) :: ZSIGMF, ZRC_MF, ZRI_MF, ZCF_MF, ZFLXZTHVMF
    659 REAL(KIND=JPRB), DIMENSION (KLON,1,KLEV) :: ZFLXZTHVMF_SUM
    660 ! Ajout pour MF Dual Scheme (KNMI et al)
    661 ! Updraft characteristics in Arpege/IFS world
    662 REAL(KIND=JPRB), DIMENSION(:,:,:), ALLOCATABLE :: ZMF_UP, ZTHETAL_UP, ZQT_UP,&
    663     & ZQC_UP, ZQI_UP, ZU_UP, ZV_UP,ZTHTV_UP
    664 REAL(KIND=JPRB), DIMENSION (KLON) :: ZZSFTH,ZZSFRV,ZZSFU,ZZSFV
    665 INTEGER(KIND=JPIM) :: IDRAFT,JDRAFT,INDRAFT
    666 ! Updraft characteristics for Meso-NH world (input of ARO_SHALLOW_MF)
    667 REAL(KIND=JPRB), DIMENSION (KLON,1,KLEV)::ZZI_MF_UP,ZZI_THETAL_UP,ZZI_RT_UP,&
    668                & ZZI_RC_UP,ZZI_RI_UP,ZZI_ZU_UP,ZZI_ZV_UP,ZZI_THETAV_UP,&
    669                & ZZI_ZW_UP, ZZI_ZFRAC_UP, ZZI_ZRV_UP
    670 ! THE DDH budgets
    671 REAL(KIND=JPRB), DIMENSION (KLON,1,KLEV)::ZDP,ZTP,ZTPMF,ZTDIFF,ZTDISS
    672 
    673 ! specific to new data flow for diagnostics
    674 REAL(KIND=JPRB)   :: ZTENDBKP(KLON,KLEV),ZTMPAF(KLON,KLEV)
    675 REAL(KIND=JPRB)   :: ZBUDTH (KLON),ZBUDSO(KLON),ZFCLL(KLON)
    676 CHARACTER(LEN=11) :: CLNAME
    677 CHARACTER(LEN=2),DIMENSION(7):: CLVARNAME=(/&
    678 & "QV","QL","QR","QI","QS","QG","QH"/)
    679 INTEGER(KIND=JPIM) :: ISURFEX
    680 
    681 REAL(KIND=JPRB) :: ZDUMAER(KLON,KLEV,12)
    682 ! Surface forcing arrays for MUSC
    683 
    684 REAL(KIND=JPRB) :: ZRHODREFM(KLON), ZTHETAS(KLON)

Page 14          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

    685 REAL(KIND=JPRB) :: ZDELTA
    686 LOGICAL         :: LLAROME
    687 
    688 ! ACRANEB2 local variables
    689 REAL(KIND=JPRB) :: ZEPSNEB
    690 REAL(KIND=JPRB) :: ZNEB0    (KLON,KLEV)  ! protected cloud fractions
    691 REAL(KIND=JPRB) :: ZCLCT_RAD(KLON)       ! total cloud cover for radiation
    692 REAL(KIND=JPRB) :: ZDECRD   (KLON)       ! decorrelation depth
    693 
    694 ! daand: radflex
    695 REAL(KIND=JPRB), POINTER :: ZFRSO(:,:), ZFRTH(:,:)
    696 REAL(KIND=JPRB)  :: ZFPR(KLON,0:KLEV,YRPARAR%NRR)
    697 LOGICAL :: LLRAD
    698 TYPE(TYPE_INTPROC), POINTER :: YLRADPROC
    699 
    700 REAL(KIND=JPRB)   :: ZCD(KLON), ZCH(KLON)
    701 
    702 ! orographic shadowing
    703 REAL(KIND=JPRB) :: ZSLOPE(KLON)
    704 
    705 !
    706 ! Phaser team note from CY43T1:
    707 ! there was a USE MODD_CTURB for accessing XTKEMIN here, but that created a forbidden
    708 ! dependence of APL_AROME (in "ifsarp") to the Méso-NH/Arome interfaces (in "mpa").
    709 ! There should be no USE MODD_* in APL_*.
    710 ! We decided to change the variable here to a local one, with the classical initial value for TKE.
    711 !
    712 REAL(KIND=JPRB) :: ZTKEMIN = 1.E-6
    713 
    714 REAL(KIND=JPRB)           :: ZEXNREFM(KLON,KLEV)
    715 REAL(KIND=JPRB), TARGET   :: ZCON1(KLON,KLEV)
    716 REAL(KIND=JPRB), TARGET   :: ZCON2(KLON,KLEV)
    717 REAL(KIND=JPRB), TARGET   :: ZCON3(KLON,KLEV)
    718 
    719 !     --------------------------------------------------------------------------
    720 
    721 # 1 ".D[30]/abor1.intfb.h" 1 
    722 INTERFACE
    723 SUBROUTINE ABOR1(CDTEXT)
    724 CHARACTER(LEN=*) :: CDTEXT
    725 END SUBROUTINE ABOR1
    726 END INTERFACE
    727 # 721 "apl_arome.F90" 2 
    728 # 1 ".D[40]/acradin.intfb.h" 1 
    729 INTERFACE
    730 SUBROUTINE ACRADIN(YDDIMV,KIDIA,KFDIA,KLON,KLEV,&
    731  & KMODE ,&
    732  & PALBD , PALBP , PAPRS , PAPRSF, PCCO2 , PNEB,&
    733  & PQO3 , PAER,&
    734  & PDELP , PEMIS , PMU0 , PQ , PQSAT,&
    735  & PQICE , PQLI , PS , PRR , PLSM , PT , PTS,&
    736  & PEMTD , PEMTU , PTRSO,&
    737  & PFRTHC, PFRTH , PFRSOC, PFRSO,PSFSWDIR,PSFSWDIF,&
    738  & PFSDNN, PFSDNV, PCTRSO, PCEMTR, PTRSOD,&
    739  & PTRSODIR, PTRSODIF,&
    740  & PPIZA_DST,PCGA_DST,PTAUREL_DST,PAERINDS,&
    741  & PGELAM, PGEMU) 

Page 15          Source Listing                  
2024-11-22 11:31                                 .D[40]/acradin.intfb.h

    742 USE YOMDIMV , ONLY : TDIMV
    743 USE PARKIND1 ,ONLY : JPIM ,JPRB
    744 USE YOERAD , ONLY : YRERAD
    745 TYPE(TDIMV), INTENT(INOUT) :: YDDIMV
    746 INTEGER(KIND=JPIM),INTENT(IN) :: KLON
    747 INTEGER(KIND=JPIM),INTENT(IN) :: KLEV
    748 INTEGER(KIND=JPIM),INTENT(IN) :: KIDIA
    749 INTEGER(KIND=JPIM),INTENT(IN) :: KFDIA
    750 INTEGER(KIND=JPIM),INTENT(IN) :: KMODE
    751 REAL(KIND=JPRB) ,INTENT(IN) :: PGELAM(KLON)
    752 REAL(KIND=JPRB) ,INTENT(IN) :: PGEMU(KLON)
    753 REAL(KIND=JPRB) ,INTENT(IN) :: PALBD(KLON,YRERAD%NSW)
    754 REAL(KIND=JPRB) ,INTENT(IN) :: PALBP(KLON,YRERAD%NSW)
    755 REAL(KIND=JPRB) ,INTENT(IN) :: PAPRS(KLON,KLEV+1)
    756 REAL(KIND=JPRB) ,INTENT(IN) :: PAPRSF(KLON,KLEV)
    757 REAL(KIND=JPRB) ,INTENT(IN) :: PCCO2
    758 REAL(KIND=JPRB) ,INTENT(IN) :: PNEB(KLON,KLEV)
    759 REAL(KIND=JPRB) ,INTENT(IN) :: PQO3(KLON,KLEV)
    760 REAL(KIND=JPRB) ,INTENT(IN) :: PAER(KLON,KLEV,6)
    761 REAL(KIND=JPRB) ,INTENT(IN) :: PAERINDS(KLON,KLEV)
    762 REAL(KIND=JPRB) ,INTENT(IN) :: PDELP(KLON,KLEV)
    763 REAL(KIND=JPRB) ,INTENT(IN) :: PEMIS(KLON)
    764 REAL(KIND=JPRB) ,INTENT(IN) :: PMU0(KLON)
    765 REAL(KIND=JPRB) ,INTENT(IN) :: PQ(KLON,KLEV)
    766 REAL(KIND=JPRB) ,INTENT(IN) :: PQSAT(KLON,KLEV)
    767 REAL(KIND=JPRB) ,INTENT(IN) :: PQICE(KLON,KLEV)
    768 REAL(KIND=JPRB) ,INTENT(IN) :: PQLI(KLON,KLEV)
    769 REAL(KIND=JPRB) ,INTENT(IN) :: PLSM(KLON)
    770 REAL(KIND=JPRB) ,INTENT(INOUT) :: PT(KLON,KLEV)
    771 REAL(KIND=JPRB) ,INTENT(IN) :: PTS(KLON)
    772 REAL(KIND=JPRB) ,INTENT(IN) :: PPIZA_DST(KLON,KLEV,YRERAD%NSW)
    773 REAL(KIND=JPRB) ,INTENT(IN) :: PCGA_DST(KLON,KLEV,YRERAD%NSW)
    774 REAL(KIND=JPRB) ,INTENT(IN) :: PTAUREL_DST(KLON,KLEV,YRERAD%NSW)
    775 REAL(KIND=JPRB) ,INTENT(IN) :: PS(KLON,KLEV)
    776 REAL(KIND=JPRB) ,INTENT(IN) :: PRR(KLON,KLEV)
    777 REAL(KIND=JPRB) ,INTENT(OUT) :: PEMTD(KLON,KLEV+1)
    778 REAL(KIND=JPRB) ,INTENT(OUT) :: PEMTU(KLON,KLEV+1)
    779 REAL(KIND=JPRB) ,INTENT(OUT) :: PTRSO(KLON,KLEV+1)
    780 REAL(KIND=JPRB) ,INTENT(OUT) :: PFRTHC(KLON,2)
    781 REAL(KIND=JPRB) ,INTENT(OUT) :: PFRTH(KLON,KLEV+1)
    782 REAL(KIND=JPRB) ,INTENT(OUT) :: PFRSOC(KLON,2)
    783 REAL(KIND=JPRB) ,INTENT(OUT) :: PFRSO(KLON,KLEV+1)
    784 REAL(KIND=JPRB) ,INTENT(OUT) :: PSFSWDIR(KLON,YRERAD%NSW)
    785 REAL(KIND=JPRB) ,INTENT(OUT) :: PSFSWDIF(KLON,YRERAD%NSW)
    786 REAL(KIND=JPRB) ,INTENT(OUT) :: PFSDNN(KLON)
    787 REAL(KIND=JPRB) ,INTENT(OUT) :: PFSDNV(KLON)
    788 REAL(KIND=JPRB) ,INTENT(OUT) :: PCTRSO(KLON,2)
    789 REAL(KIND=JPRB) ,INTENT(OUT) :: PCEMTR(KLON,2)
    790 REAL(KIND=JPRB) ,INTENT(OUT) :: PTRSOD(KLON)
    791 REAL(KIND=JPRB) ,INTENT(OUT) :: PTRSODIR(KLON,YRERAD%NSW)
    792 REAL(KIND=JPRB) ,INTENT(OUT) :: PTRSODIF(KLON,YRERAD%NSW)
    793 END SUBROUTINE ACRADIN
    794 END INTERFACE
    795 # 722 "apl_arome.F90" 2 
    796 # 1 ".D[40]/acraneb2.intfb.h" 1 
    797 INTERFACE
    798 SUBROUTINE ACRANEB2(&

Page 16          Source Listing                  
2024-11-22 11:31                                 .D[40]/acraneb2.intfb.h

    799  & KIDIA,KFDIA,KLON,KTDIA,KLEV,KJN,KSTEP,&
    800  & PAPRS,PAPRSF,PCP,PR,PDELP,PNEB,PQ,PQCO2,PQICE,PQLI,PQO3,PT,&
    801  & PALB,PALBDIR,PEMIS,PGELAM,PGEMU,PMU0,PMU0LU,PTS,PDECRD,PCLCT,&
    802  & PGDEOSI,PGUEOSI,PGMU0,PGMU0_MIN,PGMU0_MAX,&
    803  & PGDEOTI,PGDEOTI2,PGUEOTI,PGUEOTI2,PGEOLT,PGEOXT,&
    804  & PGRPROX,PGMIXP,PGFLUXC,PGRSURF,PSDUR,&
    805  & PFRSO,PFRTH,&
    806  & PFRSODS,PFRSOPS,PFRSOLU,PFRTHDS,&
    807  & PDAER) 
    808 USE PARKIND1 ,ONLY : JPIM ,JPRB
    809 USE YOMPHY ,ONLY : YRPHY
    810 INTEGER(KIND=JPIM),INTENT(IN) :: KIDIA
    811 INTEGER(KIND=JPIM),INTENT(IN) :: KFDIA
    812 INTEGER(KIND=JPIM),INTENT(IN) :: KLON
    813 INTEGER(KIND=JPIM),INTENT(IN) :: KTDIA
    814 INTEGER(KIND=JPIM),INTENT(IN) :: KLEV
    815 INTEGER(KIND=JPIM),INTENT(IN) :: KJN
    816 INTEGER(KIND=JPIM),INTENT(IN) :: KSTEP
    817 REAL(KIND=JPRB),INTENT(IN) :: PAPRS(KLON,0:KLEV)
    818 REAL(KIND=JPRB),INTENT(IN) :: PAPRSF(KLON,KLEV)
    819 REAL(KIND=JPRB),INTENT(IN) :: PCP(KLON,KLEV)
    820 REAL(KIND=JPRB),INTENT(IN) :: PR(KLON,KLEV)
    821 REAL(KIND=JPRB),INTENT(IN) :: PDELP(KLON,KLEV)
    822 REAL(KIND=JPRB),INTENT(IN) :: PNEB(KLON,KLEV)
    823 REAL(KIND=JPRB),INTENT(IN) :: PQ(KLON,KLEV)
    824 REAL(KIND=JPRB),INTENT(IN) :: PQCO2(KLON,KLEV)
    825 REAL(KIND=JPRB),INTENT(IN) :: PQICE(KLON,KLEV)
    826 REAL(KIND=JPRB),INTENT(IN) :: PQLI(KLON,KLEV)
    827 REAL(KIND=JPRB),INTENT(IN) :: PQO3(KLON,0:KLEV)
    828 REAL(KIND=JPRB),INTENT(IN) :: PT(KLON,KLEV)
    829 REAL(KIND=JPRB),INTENT(IN) :: PALB(KLON)
    830 REAL(KIND=JPRB),INTENT(IN) :: PALBDIR(KLON)
    831 REAL(KIND=JPRB),INTENT(IN) :: PEMIS(KLON)
    832 REAL(KIND=JPRB),INTENT(IN) :: PGELAM(KLON)
    833 REAL(KIND=JPRB),INTENT(IN) :: PGEMU(KLON)
    834 REAL(KIND=JPRB),INTENT(IN) :: PMU0(KLON)
    835 REAL(KIND=JPRB),INTENT(IN) :: PMU0LU(KLON)
    836 REAL(KIND=JPRB),INTENT(IN) :: PTS(KLON)
    837 REAL(KIND=JPRB),INTENT(IN) :: PDECRD(KLON)
    838 REAL(KIND=JPRB),INTENT(IN) :: PCLCT(KLON)
    839 REAL(KIND=JPRB),INTENT(INOUT) :: PGDEOSI(KLON,0:KLEV,2)
    840 REAL(KIND=JPRB),INTENT(INOUT) :: PGUEOSI(KLON,0:KLEV,2)
    841 REAL(KIND=JPRB),INTENT(INOUT) :: PGMU0(KLON,0:YRPHY%NSORAYFR-1)
    842 REAL(KIND=JPRB),INTENT(INOUT) :: PGMU0_MIN(KLON)
    843 REAL(KIND=JPRB),INTENT(INOUT) :: PGMU0_MAX(KLON)
    844 REAL(KIND=JPRB),INTENT(INOUT) :: PGDEOTI(KLON,0:KLEV)
    845 REAL(KIND=JPRB),INTENT(INOUT) :: PGDEOTI2(KLON,0:KLEV)
    846 REAL(KIND=JPRB),INTENT(INOUT) :: PGUEOTI(KLON,0:KLEV)
    847 REAL(KIND=JPRB),INTENT(INOUT) :: PGUEOTI2(KLON,0:KLEV)
    848 REAL(KIND=JPRB),INTENT(INOUT) :: PGEOLT(KLON,KLEV)
    849 REAL(KIND=JPRB),INTENT(INOUT) :: PGEOXT(KLON,KLEV)
    850 REAL(KIND=JPRB),INTENT(INOUT) :: PGRPROX(KLON,0:KLEV)
    851 REAL(KIND=JPRB),INTENT(INOUT) :: PGMIXP(KLON,0:KLEV)
    852 REAL(KIND=JPRB),INTENT(INOUT) :: PGFLUXC(KLON,0:KLEV)
    853 REAL(KIND=JPRB),INTENT(INOUT) :: PGRSURF(KLON)
    854 REAL(KIND=JPRB),INTENT(INOUT) :: PSDUR(KLON)
    855 REAL(KIND=JPRB),INTENT(OUT) :: PFRSO(KLON,0:KLEV)

Page 17          Source Listing                  
2024-11-22 11:31                                 .D[40]/acraneb2.intfb.h

    856 REAL(KIND=JPRB),INTENT(OUT) :: PFRTH(KLON,0:KLEV)
    857 REAL(KIND=JPRB),INTENT(OUT) :: PFRSODS(KLON)
    858 REAL(KIND=JPRB),INTENT(OUT) :: PFRSOPS(KLON)
    859 REAL(KIND=JPRB),INTENT(OUT) :: PFRSOLU(KLON)
    860 REAL(KIND=JPRB),INTENT(OUT) :: PFRTHDS(KLON)
    861 REAL(KIND=JPRB),INTENT(IN) :: PDAER(KLON,KLEV,6)
    862 END SUBROUTINE ACRANEB2
    863 END INTERFACE
    864 # 723 "apl_arome.F90" 2 
    865 # 1 ".D[40]/actqsat.intfb.h" 1 
    866 INTERFACE
    867 SUBROUTINE ACTQSAT ( KIDIA,KFDIA,KLON,KTDIA,KLEV,&
    868  & PAPRSF,PCP,PQ,PT,&
    869  & PGEOSLC,PLH,PLSCPE,PQSAT,PQW,PRH,PTW) 
    870 USE PARKIND1 ,ONLY : JPIM ,JPRB
    871 INTEGER(KIND=JPIM),INTENT(IN) :: KLON
    872 INTEGER(KIND=JPIM),INTENT(IN) :: KLEV
    873 INTEGER(KIND=JPIM),INTENT(IN) :: KIDIA
    874 INTEGER(KIND=JPIM),INTENT(IN) :: KFDIA
    875 INTEGER(KIND=JPIM),INTENT(IN) :: KTDIA
    876 REAL(KIND=JPRB) ,INTENT(IN) :: PAPRSF(KLON,KLEV)
    877 REAL(KIND=JPRB) ,INTENT(IN) :: PCP(KLON,KLEV)
    878 REAL(KIND=JPRB) ,INTENT(IN) :: PQ(KLON,KLEV)
    879 REAL(KIND=JPRB) ,INTENT(IN) :: PT(KLON,KLEV)
    880 REAL(KIND=JPRB) ,INTENT(OUT) :: PGEOSLC(KLON,KLEV)
    881 REAL(KIND=JPRB) ,INTENT(OUT) :: PLH(KLON,KLEV)
    882 REAL(KIND=JPRB) ,INTENT(OUT) :: PLSCPE(KLON,KLEV)
    883 REAL(KIND=JPRB) ,INTENT(INOUT) :: PQSAT(KLON,KLEV)
    884 REAL(KIND=JPRB) ,INTENT(OUT) :: PQW(KLON,KLEV)
    885 REAL(KIND=JPRB) ,INTENT(OUT) :: PRH(KLON,KLEV)
    886 REAL(KIND=JPRB) ,INTENT(OUT) :: PTW(KLON,KLEV)
    887 END SUBROUTINE ACTQSAT
    888 END INTERFACE
    889 # 724 "apl_arome.F90" 2 
    890 # 1 ".D[40]/acnpart.intfb.h" 1 
    891 INTERFACE
    892 SUBROUTINE ACNPART(KIDIA,KFDIA,KLON,KTDIA,KLEV,&
    893  & PAPHI,PAPRSF,PDECRD,PNEB,&
    894  & PCLCH,PCLCM,PCLCL,PCLCT,PCLCT_RAD,&
    895  & PCLCC,PNEBC) 
    896 USE PARKIND1 ,ONLY : JPIM ,JPRB
    897 INTEGER(KIND=JPIM),INTENT(IN) :: KIDIA
    898 INTEGER(KIND=JPIM),INTENT(IN) :: KFDIA
    899 INTEGER(KIND=JPIM),INTENT(IN) :: KLON
    900 INTEGER(KIND=JPIM),INTENT(IN) :: KTDIA
    901 INTEGER(KIND=JPIM),INTENT(IN) :: KLEV
    902 REAL(KIND=JPRB) ,INTENT(IN) :: PAPHI(KLON,0:KLEV)
    903 REAL(KIND=JPRB) ,INTENT(IN) :: PAPRSF(KLON,KLEV)
    904 REAL(KIND=JPRB) ,INTENT(IN) :: PDECRD(KLON)
    905 REAL(KIND=JPRB) ,INTENT(IN) :: PNEB(KLON,KLEV)
    906 REAL(KIND=JPRB) ,INTENT(OUT) :: PCLCH(KLON)
    907 REAL(KIND=JPRB) ,INTENT(OUT) :: PCLCM(KLON)
    908 REAL(KIND=JPRB) ,INTENT(OUT) :: PCLCL(KLON)
    909 REAL(KIND=JPRB) ,INTENT(OUT) :: PCLCT(KLON)
    910 REAL(KIND=JPRB) ,INTENT(OUT) :: PCLCT_RAD(KLON)
    911 REAL(KIND=JPRB) ,INTENT(OUT),OPTIONAL :: PCLCC(KLON)
    912 REAL(KIND=JPRB) ,INTENT(IN), OPTIONAL :: PNEBC(KLON,KLEV)

Page 18          Source Listing                  
2024-11-22 11:31                                 .D[40]/acnpart.intfb.h

    913 END SUBROUTINE ACNPART
    914 END INTERFACE
    915 # 725 "apl_arome.F90" 2 
    916 # 1 ".D[40]/bri2acconv.intfb.h" 1 
    917 INTERFACE
    918 SUBROUTINE BRI2ACCONV(YDEGEO,&
    919  & KIDIA,KFDIA,&
    920  & KLON,KLEV,&
    921  & PGM,PAPRSF,PZZF,&
    922  & PT,PRV,PRC,PRI,PRHOREF,&
    923  & PU,PV,PW,&
    924  & PMF,PTTEN,PRVTEN,PRCTEN,PRITEN,&
    925  & PPRTEN,PPRSTEN) 
    926 USE PARKIND1 ,ONLY : JPIM ,JPRB
    927 USE YEMGEO , ONLY : TEGEO
    928 TYPE(TEGEO), INTENT(IN) :: YDEGEO
    929 INTEGER(KIND=JPIM),INTENT(IN) :: KLON
    930 INTEGER(KIND=JPIM),INTENT(IN) :: KLEV
    931 INTEGER(KIND=JPIM),INTENT(IN) :: KIDIA
    932 INTEGER(KIND=JPIM),INTENT(IN) :: KFDIA
    933 REAL(KIND=JPRB) ,INTENT(IN) :: PGM(KLON)
    934 REAL(KIND=JPRB) ,INTENT(IN) :: PAPRSF(KLON,KLEV)
    935 REAL(KIND=JPRB) ,INTENT(IN) :: PZZF(KLON,KLEV)
    936 REAL(KIND=JPRB) ,INTENT(IN) :: PT(KLON,KLEV)
    937 REAL(KIND=JPRB) ,INTENT(IN) :: PRV(KLON,KLEV)
    938 REAL(KIND=JPRB) ,INTENT(IN) :: PRC(KLON,KLEV)
    939 REAL(KIND=JPRB) ,INTENT(IN) :: PRI(KLON,KLEV)
    940 REAL(KIND=JPRB) ,INTENT(IN) :: PRHOREF(KLON,KLEV)
    941 REAL(KIND=JPRB) ,INTENT(IN) :: PU(KLON,KLEV)
    942 REAL(KIND=JPRB) ,INTENT(IN) :: PV(KLON,KLEV)
    943 REAL(KIND=JPRB) ,INTENT(IN) :: PW(KLON,KLEV)
    944 REAL(KIND=JPRB) ,INTENT(OUT) :: PMF(KLON,KLEV)
    945 REAL(KIND=JPRB) ,INTENT(OUT) :: PTTEN(KLON,KLEV)
    946 REAL(KIND=JPRB) ,INTENT(OUT) :: PRVTEN(KLON,KLEV)
    947 REAL(KIND=JPRB) ,INTENT(OUT) :: PRCTEN(KLON,KLEV)
    948 REAL(KIND=JPRB) ,INTENT(OUT) :: PRITEN(KLON,KLEV)
    949 REAL(KIND=JPRB) ,INTENT(OUT) :: PPRTEN(KLON)
    950 REAL(KIND=JPRB) ,INTENT(OUT) :: PPRSTEN(KLON)
    951 END SUBROUTINE BRI2ACCONV
    952 END INTERFACE
    953 # 726 "apl_arome.F90" 2 
    954 # 1 ".D[40]/gpgeo.intfb.h" 1 
    955 INTERFACE
    956 SUBROUTINE GPGEO(KPROMA,KSTART,KPROF,KFLEV,PHI,PHIF,PT,PR,PLNPR,PALPH)
    957 USE PARKIND1 , ONLY : JPIM, JPRB
    958 INTEGER(KIND=JPIM),INTENT(IN) :: KPROMA
    959 INTEGER(KIND=JPIM),INTENT(IN) :: KFLEV
    960 INTEGER(KIND=JPIM),INTENT(IN) :: KSTART
    961 INTEGER(KIND=JPIM),INTENT(IN) :: KPROF
    962 REAL(KIND=JPRB) ,INTENT(INOUT) :: PHI(KPROMA,0:KFLEV)
    963 REAL(KIND=JPRB) ,INTENT(OUT) :: PHIF(KPROMA,KFLEV)
    964 REAL(KIND=JPRB) ,INTENT(IN) :: PT(KPROMA,KFLEV)
    965 REAL(KIND=JPRB) ,INTENT(IN) :: PR(KPROMA,KFLEV)
    966 REAL(KIND=JPRB) ,INTENT(IN) :: PLNPR(KPROMA,KFLEV)
    967 REAL(KIND=JPRB) ,INTENT(IN) :: PALPH(KPROMA,KFLEV)
    968 END SUBROUTINE GPGEO
    969 END INTERFACE

Page 19          Source Listing                  
2024-11-22 11:31                                 .D[40]/gpgeo.intfb.h

    970 # 727 "apl_arome.F90" 2 
    971 # 1 ".D[40]/gprcp.intfb.h" 1 
    972 INTERFACE
    973 SUBROUTINE GPRCP(KPROMA,KSTART,KPROF,KFLEV,PQ,PQI,PQL,PQR,PQS,PQG,&
    974  & PCP,PR,PKAP,PGFL,KGFLTYP,LDTHERMACT) 
    975 USE PARKIND1 , ONLY : JPIM, JPRB
    976 USE YOM_YGFL , ONLY : YGFL
    977 INTEGER(KIND=JPIM),INTENT(IN) :: KPROMA
    978 INTEGER(KIND=JPIM),INTENT(IN) :: KFLEV
    979 INTEGER(KIND=JPIM),INTENT(IN) :: KSTART
    980 INTEGER(KIND=JPIM),INTENT(IN) :: KPROF
    981 REAL(KIND=JPRB),OPTIONAL ,INTENT(IN) :: PQ(KPROMA,KFLEV)
    982 REAL(KIND=JPRB),OPTIONAL ,INTENT(IN) :: PQI(KPROMA,KFLEV)
    983 REAL(KIND=JPRB),OPTIONAL ,INTENT(IN) :: PQL(KPROMA,KFLEV)
    984 REAL(KIND=JPRB),OPTIONAL ,INTENT(IN) :: PQR(KPROMA,KFLEV)
    985 REAL(KIND=JPRB),OPTIONAL ,INTENT(IN) :: PQS(KPROMA,KFLEV)
    986 REAL(KIND=JPRB),OPTIONAL ,INTENT(IN) :: PQG(KPROMA,KFLEV)
    987 REAL(KIND=JPRB),OPTIONAL ,INTENT(IN) :: PGFL(KPROMA,KFLEV,YGFL%NDIM)
    988 REAL(KIND=JPRB),OPTIONAL ,INTENT(OUT) :: PCP(KPROMA,KFLEV)
    989 REAL(KIND=JPRB),OPTIONAL ,INTENT(OUT) :: PR(KPROMA,KFLEV)
    990 REAL(KIND=JPRB),OPTIONAL ,INTENT(OUT) :: PKAP(KPROMA,KFLEV)
    991 INTEGER(KIND=JPIM),OPTIONAL,INTENT(IN) :: KGFLTYP
    992 LOGICAL,OPTIONAL,INTENT(IN) :: LDTHERMACT
    993 END SUBROUTINE GPRCP
    994 END INTERFACE
    995 # 728 "apl_arome.F90" 2 
    996 # 1 ".D[40]/radheat.intfb.h" 1 
    997 INTERFACE
    998 SUBROUTINE RADHEAT&
    999  & ( KIDIA , KFDIA , KLON , KLEV,&
   1000  & PAPHM1 ,&
   1001  & PEMIS , PEMTED , PMU0,&
   1002  & PQM1,&
   1003  & PTE , PTRSOL , PTRSOD , PTSM1M , PTSPHY,&
   1004  & PTRSODIR, PTRSODIF, PALBD , PALBP,&
   1005  & PFRSO , PFRTH , PFRSODS , PFRTHDS,&
   1006  & PCEMTR , PCTRSO , PFRSOC , PFRTHC,&
   1007  & PSUDU , PSDUR , PDSRP,&
   1008  & PSFSWDIR , PSFSWDIF,&
   1009  & PFRSOPS, PFRSOFS, PFRSOPT&
   1010  & ) 
   1011 USE PARKIND1 ,ONLY : JPIM ,JPRB
   1012 USE YOERAD , ONLY : YRERAD
   1013 INTEGER(KIND=JPIM),INTENT(IN) :: KLON
   1014 INTEGER(KIND=JPIM),INTENT(IN) :: KLEV
   1015 INTEGER(KIND=JPIM),INTENT(IN) :: KIDIA
   1016 INTEGER(KIND=JPIM),INTENT(IN) :: KFDIA
   1017 REAL(KIND=JPRB) ,INTENT(IN) :: PAPHM1(KLON,KLEV+1)
   1018 REAL(KIND=JPRB) ,INTENT(IN) :: PEMIS(KLON)
   1019 REAL(KIND=JPRB) ,INTENT(IN) :: PEMTED(KLON,KLEV+1)
   1020 REAL(KIND=JPRB) ,INTENT(IN) :: PMU0(KLON)
   1021 REAL(KIND=JPRB) ,INTENT(IN) :: PQM1(KLON,KLEV)
   1022 REAL(KIND=JPRB) ,INTENT(INOUT) :: PTE(KLON,KLEV)
   1023 REAL(KIND=JPRB) ,INTENT(IN) :: PTRSOL(KLON,KLEV+1)
   1024 REAL(KIND=JPRB) ,INTENT(IN) :: PTRSOD(KLON)
   1025 REAL(KIND=JPRB) ,INTENT(IN) :: PTSM1M(KLON)
   1026 REAL(KIND=JPRB) ,INTENT(IN) :: PTSPHY

Page 20          Source Listing                  
2024-11-22 11:31                                 .D[40]/radheat.intfb.h

   1027 REAL(KIND=JPRB) ,INTENT(IN) :: PTRSODIR(KLON,YRERAD%NSW)
   1028 REAL(KIND=JPRB) ,INTENT(IN) :: PTRSODIF(KLON,YRERAD%NSW)
   1029 REAL(KIND=JPRB) ,INTENT(IN) :: PALBD(KLON,YRERAD%NSW)
   1030 REAL(KIND=JPRB) ,INTENT(IN) :: PALBP(KLON,YRERAD%NSW)
   1031 REAL(KIND=JPRB) ,INTENT(OUT) :: PFRSO(KLON,KLEV+1)
   1032 REAL(KIND=JPRB) ,INTENT(OUT) :: PFRTH(KLON,KLEV+1)
   1033 REAL(KIND=JPRB) ,INTENT(OUT) :: PFRSODS(KLON)
   1034 REAL(KIND=JPRB) ,INTENT(OUT) :: PFRTHDS(KLON)
   1035 REAL(KIND=JPRB) ,INTENT(IN) :: PCEMTR(KLON,2)
   1036 REAL(KIND=JPRB) ,INTENT(IN) :: PCTRSO(KLON,2)
   1037 REAL(KIND=JPRB) ,INTENT(OUT) :: PFRSOC(KLON,2)
   1038 REAL(KIND=JPRB) ,INTENT(OUT) :: PFRTHC(KLON,2)
   1039 REAL(KIND=JPRB) ,INTENT(IN) :: PSUDU(KLON)
   1040 REAL(KIND=JPRB) ,INTENT(OUT) :: PSDUR(KLON)
   1041 REAL(KIND=JPRB) ,INTENT(OUT) :: PDSRP(KLON)
   1042 REAL(KIND=JPRB) ,INTENT(OUT) :: PSFSWDIR(KLON,YRERAD%NSW)
   1043 REAL(KIND=JPRB) ,INTENT(OUT) :: PSFSWDIF(KLON,YRERAD%NSW)
   1044 REAL(KIND=JPRB) ,INTENT(OUT) :: PFRSOPT(KLON)
   1045 REAL(KIND=JPRB) ,INTENT(OUT) :: PFRSOFS(KLON)
   1046 REAL(KIND=JPRB) ,INTENT(OUT) :: PFRSOPS(KLON)
   1047 END SUBROUTINE RADHEAT
   1048 END INTERFACE
   1049 # 729 "apl_arome.F90" 2 
   1050 # 1 ".D[40]/suozon.intfb.h" 1 
   1051 INTERFACE
   1052 SUBROUTINE SUOZON ( KIDIA,KFDIA,KLON,KLEV,PROFO3,LDQINT,PRESI,PRDELP,LD_LO3ABC,PVO3ABC)
   1053 USE PARKIND1 ,ONLY : JPIM ,JPRB
   1054 INTEGER(KIND=JPIM),INTENT(IN) :: KLON
   1055 INTEGER(KIND=JPIM),INTENT(IN) :: KLEV
   1056 INTEGER(KIND=JPIM),INTENT(IN) :: KIDIA
   1057 INTEGER(KIND=JPIM),INTENT(IN) :: KFDIA
   1058 REAL(KIND=JPRB) ,INTENT(INOUT) :: PROFO3(KLON,0:KLEV)
   1059 LOGICAL ,INTENT(IN) :: LDQINT
   1060 REAL(KIND=JPRB) ,INTENT(IN) :: PRESI(KLON,0:KLEV)
   1061 REAL(KIND=JPRB) ,INTENT(IN) :: PRDELP(KLON,KLEV)
   1062 LOGICAL ,INTENT(IN) :: LD_LO3ABC
   1063 REAL(KIND=JPRB) ,INTENT(IN) :: PVO3ABC(KLON,3)
   1064 END SUBROUTINE SUOZON
   1065 END INTERFACE
   1066 # 730 "apl_arome.F90" 2 
   1067 # 1 ".D[40]/radaer.intfb.h" 1 
   1068 INTERFACE
   1069 SUBROUTINE RADAER ( KIDIA , KFDIA , KPROMA , KLEV,&
   1070  & PAPRS , PAPRSF, PT , PTS,&
   1071  & PAESEA, PAELAN, PAESOO, PAEDES, PAESUL, PAEVOL,&
   1072  & PAER, PAERINDS ) 
   1073 USE PARKIND1 ,ONLY : JPIM ,JPRB
   1074 INTEGER(KIND=JPIM),INTENT(IN) :: KPROMA
   1075 INTEGER(KIND=JPIM),INTENT(IN) :: KLEV
   1076 INTEGER(KIND=JPIM),INTENT(IN) :: KIDIA
   1077 INTEGER(KIND=JPIM),INTENT(IN) :: KFDIA
   1078 REAL(KIND=JPRB) ,INTENT(IN) :: PAPRS(KPROMA,KLEV+1)
   1079 REAL(KIND=JPRB) ,INTENT(IN) :: PAPRSF(KPROMA,KLEV)
   1080 REAL(KIND=JPRB) ,INTENT(IN) :: PT(KPROMA,KLEV)
   1081 REAL(KIND=JPRB) ,INTENT(IN) :: PTS(KPROMA)
   1082 REAL(KIND=JPRB) ,INTENT(IN) :: PAESEA(KPROMA)
   1083 REAL(KIND=JPRB) ,INTENT(IN) :: PAELAN(KPROMA)

Page 21          Source Listing                  
2024-11-22 11:31                                 .D[40]/radaer.intfb.h

   1084 REAL(KIND=JPRB) ,INTENT(IN) :: PAESOO(KPROMA)
   1085 REAL(KIND=JPRB) ,INTENT(IN) :: PAEDES(KPROMA)
   1086 REAL(KIND=JPRB) ,INTENT(IN) :: PAESUL(KPROMA)
   1087 REAL(KIND=JPRB) ,INTENT(IN) :: PAEVOL(KPROMA)
   1088 REAL(KIND=JPRB) ,INTENT(OUT) :: PAER(KPROMA,KLEV,6)
   1089 REAL(KIND=JPRB) ,INTENT(OUT) :: PAERINDS(KPROMA,KLEV)
   1090 END SUBROUTINE RADAER
   1091 END INTERFACE
   1092 # 731 "apl_arome.F90" 2 
   1093 # 1 ".D[40]/radact.intfb.h" 1 
   1094 INTERFACE
   1095 SUBROUTINE RADACT&
   1096  & ( KIDIA , KFDIA , KLON , KLEV,&
   1097  & KRINT , KDLON , KDLONP2 , KSHIFT, KCF,&
   1098  & PAPRS , PGELAM, PSIN , PCLON, PSLON , PTH,&
   1099  & PQ , PQS , PECPO3,&
   1100  & PAER , PAERO , POZON&
   1101  & ) 
   1102 USE PARKIND1 , ONLY : JPIM, JPRB
   1103 USE YOERAD , ONLY : YRERAD
   1104 INTEGER(KIND=JPIM),INTENT(IN) :: KLON
   1105 INTEGER(KIND=JPIM),INTENT(IN) :: KLEV
   1106 INTEGER(KIND=JPIM),INTENT(IN) :: KDLON
   1107 INTEGER(KIND=JPIM),INTENT(IN) :: KDLONP2
   1108 INTEGER(KIND=JPIM),INTENT(IN) :: KIDIA
   1109 INTEGER(KIND=JPIM),INTENT(IN) :: KFDIA
   1110 INTEGER(KIND=JPIM),INTENT(IN) :: KRINT
   1111 INTEGER(KIND=JPIM),INTENT(IN) :: KSHIFT
   1112 INTEGER(KIND=JPIM),INTENT(IN) :: KCF
   1113 REAL(KIND=JPRB) ,INTENT(IN) :: PAPRS(KLON,KLEV+1)
   1114 REAL(KIND=JPRB) ,INTENT(IN) :: PGELAM(KLON)
   1115 REAL(KIND=JPRB) ,INTENT(IN) :: PSIN(KLON)
   1116 REAL(KIND=JPRB) ,INTENT(IN) :: PCLON(KLON)
   1117 REAL(KIND=JPRB) ,INTENT(IN) :: PSLON(KLON)
   1118 REAL(KIND=JPRB) ,INTENT(IN) :: PTH(KDLONP2,KLEV+1)
   1119 REAL(KIND=JPRB) ,INTENT(IN) :: PQ(KDLONP2,KLEV), PQS(KDLONP2,KLEV)
   1120 REAL(KIND=JPRB) ,INTENT(IN) :: PECPO3(KDLONP2,KLEV)
   1121 REAL(KIND=JPRB) ,INTENT(OUT) :: PAER(KDLON,6,KLEV)
   1122 REAL(KIND=JPRB) ,INTENT(OUT) :: PAERO(KDLON,KLEV,YRERAD%NMCVAR)
   1123 REAL(KIND=JPRB) ,INTENT(OUT) :: POZON(KDLON,KLEV)
   1124 END SUBROUTINE RADACT
   1125 END INTERFACE
   1126 # 732 "apl_arome.F90" 2 
   1127 # 1 ".D[40]/radozc.intfb.h" 1 
   1128 INTERFACE
   1129 SUBROUTINE RADOZC ( KIDIA , KFDIA , KLON , KLEV,&
   1130  & KRINT , KDLON , KSHIFT,&
   1131  & PAPRS , PGEMU,&
   1132  & POZON ) 
   1133 USE PARKIND1 , ONLY : JPIM, JPRB
   1134 INTEGER(KIND=JPIM),INTENT(IN) :: KLON
   1135 INTEGER(KIND=JPIM),INTENT(IN) :: KLEV
   1136 INTEGER(KIND=JPIM),INTENT(IN) :: KDLON
   1137 INTEGER(KIND=JPIM),INTENT(IN) :: KIDIA
   1138 INTEGER(KIND=JPIM),INTENT(IN) :: KFDIA
   1139 INTEGER(KIND=JPIM),INTENT(IN) :: KRINT
   1140 INTEGER(KIND=JPIM),INTENT(IN) :: KSHIFT

Page 22          Source Listing                  
2024-11-22 11:31                                 .D[40]/radozc.intfb.h

   1141 REAL(KIND=JPRB) ,INTENT(IN) :: PAPRS(KLON,KLEV+1)
   1142 REAL(KIND=JPRB) ,INTENT(IN) :: PGEMU(KLON)
   1143 REAL(KIND=JPRB) ,INTENT(OUT) :: POZON(KDLON,KLEV)
   1144 END SUBROUTINE RADOZC
   1145 END INTERFACE
   1146 # 733 "apl_arome.F90" 2 
   1147 # 1 ".D[40]/arocldia.intfb.h" 1 
   1148 INTERFACE
   1149 SUBROUTINE AROCLDIA(KIDIA,KFDIA, KLON, KLEV,&
   1150  & PUCLS, PVCLS, PTKE, PAPHIFM, POROG,&
   1151  & PUGST, PVGST, PBLH, KCLPH) 
   1152 USE PARKIND1 , ONLY : JPIM, JPRB
   1153 INTEGER(KIND=JPIM),INTENT(IN) :: KIDIA,KFDIA,KLON,KLEV
   1154 REAL(KIND=JPRB), INTENT(IN) :: PUCLS(KLON), PVCLS(KLON), POROG(KLON)
   1155 REAL(KIND=JPRB), INTENT(OUT) :: PUGST(KLON), PVGST(KLON), PBLH(KLON)
   1156 REAL(KIND=JPRB), INTENT(IN) :: PTKE(KLON,KLEV), PAPHIFM(KLON,KLEV)
   1157 INTEGER(KIND=JPIM),INTENT(OUT) :: KCLPH(KLON)
   1158 END SUBROUTINE AROCLDIA
   1159 END INTERFACE
   1160 # 734 "apl_arome.F90" 2 
   1161 # 1 ".D[31]/aro_rain_ice.h" 1 
   1162 INTERFACE
   1163  SUBROUTINE ARO_RAIN_ICE(KKA,KKU,KKL,KLON,KLEV, KRR, KTCOUNT, KSPLITR,&
   1164  & OSUBG_COND, CSUBG_AUCV_RC,OSEDIC,CSEDIM,&
   1165  & PTSTEP, PDZZ, PRHODJ, PRHODREF, PEXNREF,&
   1166  & PPABSM, PTHT, PRT, PSIGS,PCLDFR,&
   1167  & PTHS, PRS, PEVAP,&
   1168  & PCIT, OWARM, PSEA, PTOWN, &
   1169  & OCND2, LGRSN, &
   1170  & PINPRR,PACPRR,PINPRS,PACPRS,&
   1171  & PINPRG,PACPRG,PINPRH,PFPR,&
   1172  & CSUBG_RC_RR_ACCR, CSUBG_RR_EVAP, CSUBG_RPR_PDF,YDDDH)
   1173 USE PARKIND1  ,ONLY : JPIM     ,JPRB
   1174 USE DDH_MIX, ONLY : TYP_DDH
   1175 INTEGER(KIND=JPIM), INTENT(IN) :: KKA
   1176 INTEGER(KIND=JPIM), INTENT(IN) :: KKU
   1177 INTEGER(KIND=JPIM), INTENT(IN) :: KKL
   1178 INTEGER(KIND=JPIM), INTENT(IN) :: KLON
   1179 INTEGER(KIND=JPIM), INTENT(IN) :: KLEV
   1180 INTEGER(KIND=JPIM), INTENT(IN) :: KRR
   1181 INTEGER(KIND=JPIM), INTENT(IN) :: KTCOUNT
   1182 INTEGER(KIND=JPIM), INTENT(IN) :: KSPLITR
   1183 LOGICAL, INTENT(IN) :: OSUBG_COND
   1184 CHARACTER(LEN=4), INTENT(IN) :: CSUBG_AUCV_RC
   1185 LOGICAL, INTENT(IN) :: OSEDIC
   1186 CHARACTER(LEN=4), INTENT(IN) :: CSEDIM
   1187 REAL(KIND=JPRB), INTENT(IN) :: PTSTEP
   1188 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PDZZ
   1189 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PRHODJ
   1190 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PRHODREF
   1191 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PEXNREF
   1192 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PPABSM
   1193 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PTHT
   1194 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV,KRR), INTENT(INOUT):: PRT
   1195 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PSIGS
   1196 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PCLDFR
   1197 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PTHS

Page 23          Source Listing                  
2024-11-22 11:31                                 .D[31]/aro_rain_ice.h

   1198 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV,KRR), INTENT(INOUT) :: PRS
   1199 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PEVAP
   1200 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PCIT
   1201 LOGICAL, INTENT(IN) :: OWARM
   1202 REAL(KIND=JPRB), DIMENSION(KLON,1), INTENT(IN)    :: PSEA
   1203 REAL(KIND=JPRB), DIMENSION(KLON,1), INTENT(IN)    :: PTOWN
   1204 LOGICAL, INTENT(IN) :: OCND2
   1205 LOGICAL, INTENT(IN) :: LGRSN
   1206 REAL(KIND=JPRB), DIMENSION(KLON,1), INTENT(INOUT) :: PINPRR
   1207 REAL(KIND=JPRB), DIMENSION(KLON,1), INTENT(INOUT) :: PACPRR
   1208 REAL(KIND=JPRB), DIMENSION(KLON,1), INTENT(INOUT) :: PINPRS
   1209 REAL(KIND=JPRB), DIMENSION(KLON,1), INTENT(INOUT) :: PACPRS
   1210 REAL(KIND=JPRB), DIMENSION(KLON,1), INTENT(INOUT) :: PINPRG
   1211 REAL(KIND=JPRB), DIMENSION(KLON,1), INTENT(INOUT) :: PACPRG
   1212 REAL(KIND=JPRB), DIMENSION(KLON,1), INTENT(INOUT) :: PINPRH
   1213 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV,KRR), INTENT(INOUT) :: PFPR
   1214 CHARACTER*80, INTENT(IN) :: CSUBG_RC_RR_ACCR
   1215 CHARACTER*80, INTENT(IN) :: CSUBG_RR_EVAP
   1216 CHARACTER*80, INTENT(IN) :: CSUBG_RPR_PDF
   1217 TYPE(TYP_DDH),                       INTENT(INOUT) :: YDDDH
   1218 END SUBROUTINE ARO_RAIN_ICE
   1219 END INTERFACE
   1220 # 735 "apl_arome.F90" 2 
   1221 # 1 ".D[31]/aro_turb_mnh.h" 1 
   1222 INTERFACE
   1223  SUBROUTINE ARO_TURB_MNH( KKA,KKU,KKL,KLON,KLEV, KRR, KRRL, KRRI,KSV,&
   1224  & KTCOUNT, PTSTEP,&
   1225  & PZZ, PZZF, PZZTOP,&
   1226  & PRHODJ, PTHVREF,PRHODREF,HINST_SFU,HMF_UPDRAFT,&
   1227  & PSFTH,PSFRV,PSFSV,PSFU,PSFV,&
   1228  & PPABSM,PUM,PVM,PWM,PTKEM,PEPSM,PSVM,PSRCM,&
   1229  & PUT,PVT,PWT, PTHM,PRM,&
   1230  & PRUS,PRVS,PRWS,PRTHS,PRRS,PRSVS,PRTKES,PREPSS,&
   1231  & PSIGS,OSUBG_COND,&
   1232  & PFLXZTHVMF,PLENGTHM,PLENGTHH,MFMOIST,&
   1233  & PDRUS_TURB,PDRVS_TURB,&
   1234  & PDRTHLS_TURB,PDRRTS_TURB,PDRSVS_TURB,&
   1235  & PDP,PTP,PTPMF,PTDIFF,PTDISS,PEDR,YDDDH)
   1236 
   1237 USE PARKIND1  ,ONLY : JPIM     ,JPRB
   1238 USE DDH_MIX, ONLY : TYP_DDH
   1239 
   1240 INTEGER(KIND=JPIM), INTENT(IN) :: KLON
   1241 INTEGER(KIND=JPIM), INTENT(IN) :: KLEV
   1242 INTEGER(KIND=JPIM), INTENT(IN)   :: KKA   !Index of nearest point to ground
   1243 INTEGER(KIND=JPIM), INTENT(IN)   :: KKU   !Index of nearest point to top
   1244 INTEGER(KIND=JPIM), INTENT(IN)   :: KKL   !vertical levels type
   1245 ! 1=MNH -1=ARO
   1246 
   1247 INTEGER(KIND=JPIM), INTENT(IN) :: KRR
   1248 INTEGER(KIND=JPIM), INTENT(IN) :: KRRL
   1249 INTEGER(KIND=JPIM), INTENT(IN) :: KRRI
   1250 INTEGER(KIND=JPIM), INTENT(IN) :: KSV
   1251 INTEGER(KIND=JPIM), INTENT(IN) :: KTCOUNT
   1252 REAL(KIND=JPRB), INTENT(IN) :: PTSTEP
   1253 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PZZ
   1254 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PZZF

Page 24          Source Listing                  
2024-11-22 11:31                                 .D[31]/aro_turb_mnh.h

   1255 REAL(KIND=JPRB), DIMENSION(KLON),        INTENT(IN) :: PZZTOP
   1256 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PRHODJ
   1257 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT)  :: MFMOIST
   1258 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PTHVREF
   1259 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PRHODREF
   1260 CHARACTER*1 , INTENT(IN) :: HINST_SFU
   1261 REAL(KIND=JPRB), DIMENSION(KLON,1), INTENT(INOUT) :: PSFTH,PSFRV
   1262 REAL(KIND=JPRB), DIMENSION(KLON,1), INTENT(INOUT) :: PSFU,PSFV
   1263 REAL(KIND=JPRB), DIMENSION(KLON,1,KSV), INTENT(INOUT) :: PSFSV
   1264 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PPABSM
   1265 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PUM,PVM,PWM
   1266 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PTKEM
   1267 REAL(KIND=JPRB), DIMENSION(0,0,0), INTENT(INOUT) :: PEPSM
   1268 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV,KSV), INTENT(INOUT) :: PSVM
   1269 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PSRCM
   1270 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PUT,PVT,PWT
   1271 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PTHM
   1272 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV,KRR), INTENT(INOUT) :: PRM
   1273 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PRUS,PRVS,PRWS,PRTHS,PRTKES
   1274 REAL(KIND=JPRB), DIMENSION(0,0,0) , INTENT(INOUT) ::PREPSS
   1275 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV,KRR), INTENT(INOUT) :: PRRS
   1276 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV,KSV), INTENT(INOUT) :: PRSVS
   1277 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(OUT) :: PSIGS
   1278 REAL(KIND=JPRB), DIMENSION(:,:,:), INTENT(OUT) :: PDRUS_TURB
   1279 REAL(KIND=JPRB), DIMENSION(:,:,:), INTENT(OUT) :: PDRVS_TURB
   1280 REAL(KIND=JPRB), DIMENSION(:,:,:), INTENT(OUT) :: PDRTHLS_TURB
   1281 REAL(KIND=JPRB), DIMENSION(:,:,:), INTENT(OUT) :: PDRRTS_TURB
   1282 REAL(KIND=JPRB), DIMENSION(:,:,:,:), INTENT(OUT) :: PDRSVS_TURB
   1283 REAL(KIND=JPRB), DIMENSION(:,:,:), INTENT(INOUT) :: PFLXZTHVMF
   1284 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PLENGTHM
   1285 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PLENGTHH
   1286 CHARACTER (LEN=4), INTENT(IN)   :: HMF_UPDRAFT 
   1287 LOGICAL , INTENT(INOUT) :: OSUBG_COND
   1288 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),  INTENT(OUT)   :: PDP
   1289 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),  INTENT(OUT)   :: PTP
   1290 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),  INTENT(OUT)   :: PTPMF
   1291 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),  INTENT(OUT)   :: PTDIFF
   1292 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),  INTENT(OUT)   :: PTDISS
   1293 !                                                !for TKE DDH budgets
   1294 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),   INTENT(INOUT) ::  PEDR
   1295 TYPE(TYP_DDH),                       INTENT(INOUT) :: YDDDH
   1296 END SUBROUTINE ARO_TURB_MNH
   1297 END INTERFACE
   1298 # 736 "apl_arome.F90" 2 
   1299 # 1 ".D[31]/aro_adjust.h" 1 
   1300 INTERFACE
   1301  SUBROUTINE ARO_ADJUST(KKA,KKU,KKL,KLON,KLEV, KRR, KTCOUNT,&
   1302  & OSUBG_COND, OSIGMAS,OCND2,&
   1303  & PTSTEP, PSIGQSAT, PZZF, PRHODJ, PEXNREF,&
   1304  & PPABSM, PTHT, PRT, PSIGS,&
   1305  & PMFCONV, PRC_MF, PRI_MF, PCF_MF,&
   1306  & PTHS, PRS, PSRCS, PCLDFR, YDDDH)
   1307 USE PARKIND1  ,ONLY : JPIM     ,JPRB
   1308 USE DDH_MIX, ONLY : TYP_DDH
   1309 INTEGER(KIND=JPIM), INTENT(IN) :: KKA
   1310 INTEGER(KIND=JPIM), INTENT(IN) :: KKU
   1311 INTEGER(KIND=JPIM), INTENT(IN) :: KKL

Page 25          Source Listing                  
2024-11-22 11:31                                 .D[31]/aro_adjust.h

   1312 INTEGER(KIND=JPIM), INTENT(IN) :: KLON
   1313 INTEGER(KIND=JPIM), INTENT(IN) :: KLEV
   1314 INTEGER(KIND=JPIM), INTENT(IN) :: KRR
   1315 INTEGER(KIND=JPIM), INTENT(IN) :: KTCOUNT
   1316 LOGICAL, INTENT(IN) :: OSUBG_COND
   1317 LOGICAL, INTENT(IN) :: OSIGMAS
   1318 LOGICAL, INTENT(IN) :: OCND2
   1319 REAL(KIND=JPRB), INTENT(IN) :: PTSTEP
   1320 REAL(KIND=JPRB), INTENT(IN) :: PSIGQSAT
   1321 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PZZF
   1322 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PRHODJ
   1323 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PEXNREF
   1324 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PPABSM
   1325 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PTHT
   1326 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV,KRR), INTENT(INOUT) :: PRT
   1327 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PSIGS
   1328 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PMFCONV
   1329 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(IN) :: PRC_MF,PRI_MF,PCF_MF
   1330 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PTHS
   1331 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV,KRR), INTENT(INOUT) :: PRS
   1332 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(OUT) :: PSRCS
   1333 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV), INTENT(INOUT) :: PCLDFR
   1334 TYPE(TYP_DDH)                          , INTENT(INOUT) :: YDDDH
   1335 END SUBROUTINE ARO_ADJUST
   1336 END INTERFACE
   1337 # 737 "apl_arome.F90" 2 
   1338 # 1 ".D[31]/aro_mnhc.h" 1 
   1339 INTERFACE
   1340       SUBROUTINE ARO_MNHC(PRSVS, PRHODREF, PTSTEP,    &
   1341                           PTHT, PABST,                &
   1342                           PRT, PLAT, PLON,            &
   1343                           PALB_UV, PZS, PZENITH, PZZ, &
   1344                           KYEAR, KMONTH, KDAY, PTIME, &
   1345                           KLON,KLEV,NSV, KRR,         &
   1346                           KTCOUNT, KLUOUT,NDIAG,PPEZDIAG)
   1347 !!
   1348 !!*** *ARO_MNHC*  monitor of the chemical module of MesoNH-C
   1349 !!
   1350 !!    PURPOSE
   1351 !!    -------
   1352 !!       The purpose of this subroutine is to control the chemical module
   1353 !!    i.e. to pass the meteorological parameters from MesoNH to its chemical
   1354 !!    part and to call the different subroutines (calculation of rate constants,
   1355 !!    photolysis rates, stiff solver,..)
   1356 !!
   1357 !!    METHOD
   1358 !!    ------
   1359 !!       The calculation  of the chemical terms is performed using a loop
   1360 !!    over all spatial dimensions.
   1361 !!
   1362 !!       For each single grid point, all necessary meteorological parameters are
   1363 !!    passed into the chemical core system (variable TZM). This variable is
   1364 !!    then passed on to the subroutines that calculate the reaction and
   1365 !!    photolysis rates. Then the chemical solver is called. As the chemistry
   1366 !!    part works with different units than MesoNH (MesoNH uses mixing ratio,
   1367 !!    the chemisty part uses molec/cm3) some unit conversion is also performed.
   1368 !!

Page 26          Source Listing                  
2024-11-22 11:31                                 .D[31]/aro_mnhc.h

   1369 !!       Temporal integration is performed over a double timestep 2*PTSTEP
   1370 !!    (except in the case of a cold start). If the timestep of MesoNH
   1371 !!    is too large for the chemical solver, several smaller steps can
   1372 !!    be taken using the NCH_SUBSTEPS parameter.
   1373 !!    "SPLIT"  : from PRSVS the scalar variable at t+dt is calculated and
   1374 !!               given as input to the solver; the result is rewritten
   1375 !!               into PRSVS; this corresponds to applying first only dynamics
   1376 !!               and then only chemistry; this option assures positivity, but
   1377 !!               degrades the order of the temporal integration.
   1378 !!               In fact, an overhead of a factor two is produced here.
   1379 !!               A future solution will be to calculate the dynamics
   1380 !!               of the scalar variables not using leapfrog, but forward
   1381 !!               temporal integration.
   1382 !!     Vectorization Mask : Need ISVECMASK for photolysis (input(IN))
   1383 !!     ISVECNMASK = Nb of vector
   1384 !!     IDT1       = Nb of points for the first dimension  (for arome = size of vector)
   1385 !!     IDT2       = Nb of points for the second dimension (for arome = 1)
   1386 !!     IDT3       = Nb of points in vertical
   1387 !!
   1388 !!
   1389 !!
   1390 !!    REFERENCE
   1391 !!    ---------
   1392 !!    Book 1, 2, 3 of MesoNH-chemistry
   1393 !!
   1394 !!    AUTHOR
   1395 !!    ------
   1396 !!    P. Tulet  *CNRM / GMEI* and contributors of MesoNH-C (K. Shure, C. Mari, V. Crassier)
   1397 !!
   1398 !!    MODIFICATIONS
   1399 !!    -------------
   1400 !!    Original 10/11/04
   1401 !!
   1402 !!    EXTERNAL
   1403 !!    --------
   1404 USE PARKIND1  ,ONLY : JPIM, JPRB
   1405 !
   1406 !-------------------------------------------------------------------------------
   1407 !
   1408 !*       0.     DECLARATIONS
   1409 !               ------------
   1410 IMPLICIT NONE
   1411 !
   1412 !*      0.1    declarations of arguments
   1413 INTEGER(KIND=JPIM),   INTENT(IN)   :: KLON     !NPROMA under CPG
   1414 INTEGER(KIND=JPIM),   INTENT(IN)   :: KLEV     !Number of vertical levels
   1415 INTEGER(KIND=JPIM),   INTENT(IN)   :: NSV     ! Number of passive scalar
   1416 INTEGER(KIND=JPIM),   INTENT(IN)   :: KRR      ! Number of moist variables
   1417 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV,NSV),  INTENT(INOUT) :: PRSVS       ! source of scalar variable
   1418 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),      INTENT(IN)    :: PRHODREF    ! iteration count
   1419 REAL(KIND=JPRB),    INTENT(IN)    :: PTSTEP      ! time step of MesoNH
   1420 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),      INTENT(IN)    :: PTHT, PABST ! theta and pressure at t
   1421 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV,KRR),  INTENT(IN)    :: PRT         ! moist variables at t
   1422 REAL(KIND=JPRB), DIMENSION(KLON,1),   INTENT(IN)    :: PLAT, PLON  ! lat, lon of each points
   1423 REAL(KIND=JPRB), DIMENSION(KLON,1),   INTENT(IN)    :: PALB_UV, PZS, PZENITH
   1424 REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),   INTENT(IN)    :: PZZ
   1425 INTEGER(KIND=JPIM), INTENT(IN)    :: KYEAR       ! Current Year

Page 27          Source Listing                  
2024-11-22 11:31                                 .D[31]/aro_mnhc.h

   1426 INTEGER(KIND=JPIM), INTENT(IN)    :: KMONTH      ! Current Month
   1427 INTEGER(KIND=JPIM), INTENT(IN)    :: KDAY        ! Current Day
   1428 REAL(KIND=JPRB),    INTENT(IN)    :: PTIME       ! Current time in second
   1429 INTEGER(KIND=JPIM), INTENT(IN)    :: KTCOUNT     ! iteration count
   1430 INTEGER(KIND=JPIM), INTENT(IN)    :: KLUOUT      ! unit for output listing count
   1431 INTEGER(KIND=JPIM),   INTENT(IN)   :: NDIAG   ! nb of diagnostics
   1432 REAL(KIND=JPRB), DIMENSION(KLON,KLEV,NDIAG),INTENT(INOUT)  :: PPEZDIAG
   1433 
   1434 !
   1435 !
   1436 END SUBROUTINE ARO_MNHC
   1437 END INTERFACE
   1438 # 738 "apl_arome.F90" 2 
   1439 # 1 ".D[31]/aro_mnhdust.h" 1 
   1440 INTERFACE
   1441 SUBROUTINE ARO_MNHDUST(KKL,KLON,KLEV,KSV,PTSTEP &
   1442        ,PSVT        & !I [moments/molec_{air}] Transported moments of dust
   1443        ,PZZ         & !I [m] height of layers
   1444        ,PDZZ        & !I [m] layers thikness
   1445        ,PPABST      & !I Pressure
   1446        ,PTHT        & !I Potential temperature
   1447        ,PRHODREF    & !I [kg/m3] density of air
   1448        ,KSWB        & !I [nbr] number of shortwave bands
   1449        ,KTCOUNT     & !I number of time step
   1450        ,PPIZA_WVL   & !O [-] single scattering albedo of dust
   1451        ,PCGA_WVL    & !O [-] assymetry factor for dust layer
   1452        ,PTAUREL_WVL & !O [-] opt.depth/opt.depth(550) for dust
   1453        ,PAER        & !O [-] ext coeff at 550 for dust
   1454        ,NDIAG       & !I [-] nb of diagnostics
   1455        ,PPEZDIAG     & !IO [-] diag Nb/m3,ug/m3,rg(nb;um),rg(m;um),SSA,assym,AOD/550,mode & wvl
   1456         )
   1457 
   1458 !
   1459 !*** *ARO_MNHDUST*
   1460 !
   1461 !    PURPOSE
   1462 !    -------
   1463 
   1464 !     Interface routine for initialisation of dust optical properties
   1465 !     before radiation scheme call
   1466   
   1467 !     AUTHOR.
   1468 !     -------
   1469 !      Y. Seity (CNRM/GMAP)
   1470 !      10-10-05
   1471 
   1472 !    MODIFICATIONS
   1473 !    -------------
   1474 !    Original 10/10/05
   1475 !
   1476 !    EXTERNAL
   1477 !     -------
   1478 
   1479 USE PARKIND1  ,ONLY : JPIM,JPRB
   1480 
   1481 
   1482     IMPLICIT NONE

Page 28          Source Listing                  
2024-11-22 11:31                                 .D[31]/aro_mnhdust.h

   1483     
   1484 !INPUT
   1485     INTEGER(KIND=JPIM),   INTENT(IN)   :: KKL      ! IKL under apl_arome
   1486     INTEGER(KIND=JPIM),   INTENT(IN)   :: KLON     ! NPROMA under CPG
   1487     INTEGER(KIND=JPIM),   INTENT(IN)   :: KLEV     ! Number of vertical levels
   1488     INTEGER(KIND=JPIM),   INTENT(IN)   :: KSV      ! Number of passive scalar
   1489     INTEGER(KIND=JPIM),   INTENT(IN)   :: KSWB     !I  number of shortwave wavelengths
   1490     INTEGER(KIND=JPIM),   INTENT(IN)   :: KTCOUNT  !I  number of time step
   1491     REAL(KIND=JPRB),      INTENT(IN)   :: PTSTEP   ! Time step
   1492     INTEGER(KIND=JPIM),   INTENT(IN)   :: NDIAG   ! nb of diagnostics
   1493     REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),INTENT(IN)    :: PZZ        !I [m] height of layers
   1494     REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),INTENT(IN)    :: PDZZ       !I [m] layers thikness
   1495     REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),INTENT(IN)    :: PRHODREF   !I [kg/m3] density of air
   1496     REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),INTENT(IN)    :: PTHT       !I [K] potentiel temperature
   1497     REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),INTENT(IN)    :: PPABST     !I [Pa] pressure
   1498 
   1499 !OUTPUT
   1500     REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV,KSV),INTENT(INOUT) :: PSVT !I [moments/molec{air}] transported moments of dust
   1501     REAL(KIND=JPRB), DIMENSION(KLON,KLEV,KSWB),INTENT(INOUT)   :: PPIZA_WVL   !O [-] SSA of dust layer for all SW wavelength
   1501 s
   1502     REAL(KIND=JPRB), DIMENSION(KLON,KLEV,KSWB),INTENT(INOUT)   :: PCGA_WVL    !O [-] assymetry for dust layer for all SW wvl
   1503     REAL(KIND=JPRB), DIMENSION(KLON,KLEV,KSWB),INTENT(INOUT)   :: PTAUREL_WVL !O [-] AOD/550 for dust layer for all SW wvl
   1504     REAL(KIND=JPRB), DIMENSION(KLON,KLEV,NDIAG),INTENT(INOUT)  :: PPEZDIAG
   1505     REAL(KIND=JPRB), DIMENSION(KLON,KLEV),      INTENT(INOUT)  :: PAER
   1506 
   1507 END SUBROUTINE ARO_MNHDUST
   1508 END INTERFACE
   1509 # 739 "apl_arome.F90" 2 
   1510 # 1 ".D[31]/aro_startbu.h" 1 
   1511 INTERFACE
   1512   SUBROUTINE ARO_STARTBU(KIDIA, KFDIA, KRR,KSV,PRHODJ,           &
   1513                          & PRUS,PRVS,PRWS,PRTHS,PRRS,PRTKES,PRSVS,YDDDH)
   1514     USE PARKIND1  ,ONLY : JPIM     ,JPRB
   1515     USE DDH_MIX, ONLY : TYP_DDH
   1516     INTEGER(KIND=JPIM),                  INTENT(IN)  :: KIDIA 
   1517     INTEGER(KIND=JPIM),                  INTENT(IN)  :: KFDIA
   1518     INTEGER(KIND=JPIM),                  INTENT(IN)  :: KRR
   1519     INTEGER(KIND=JPIM),                  INTENT(IN)  :: KSV
   1520     REAL(KIND=JPRB), DIMENSION(:,:,:),   INTENT(IN)  :: PRHODJ
   1521     REAL(KIND=JPRB), DIMENSION(:,:,:),   INTENT(IN) :: PRUS, PRVS, PRWS
   1522     REAL(KIND=JPRB), DIMENSION(:,:,:),   INTENT(IN) :: PRTHS, PRTKES
   1523     REAL(KIND=JPRB), DIMENSION(:,:,:,:), INTENT(IN) :: PRRS, PRSVS
   1524     TYPE(TYP_DDH),                       INTENT(INOUT) :: YDDDH
   1525   END SUBROUTINE ARO_STARTBU
   1526 END INTERFACE
   1527 # 740 "apl_arome.F90" 2 
   1528 # 1 ".D[31]/aro_convbu.h" 1 
   1529 INTERFACE
   1530   SUBROUTINE ARO_CONVBU(PRHODJ,PRRS,PTHS,YDDDH)
   1531     USE PARKIND1  ,ONLY : JPRB
   1532     USE DDH_MIX, ONLY : TYP_DDH
   1533     REAL(KIND=JPRB), DIMENSION (:,:,:),  INTENT(IN) :: PRHODJ
   1534     REAL(KIND=JPRB), DIMENSION(:,:,:),   INTENT(IN) :: PTHS
   1535     REAL(KIND=JPRB), DIMENSION(:,:,:,:), INTENT(IN) :: PRRS
   1536     TYPE(TYP_DDH),                       INTENT(INOUT) :: YDDDH
   1537   END SUBROUTINE ARO_CONVBU
   1538 END INTERFACE

Page 29          Source Listing                  
2024-11-22 11:31                                 .D[31]/aro_convbu.h

   1539 # 741 "apl_arome.F90" 2 
   1540 # 1 ".D[2]/aro_ground_param.h" 1 
   1541 INTERFACE
   1542  SUBROUTINE ARO_GROUND_PARAM(KLEV,PTKEM, KBL, KGPCOMP, KLON,&
   1543  & KST, KEND, KSTEP, KRR, KSW, KSV, KDGUNG, KDGUXG, KDLUNG, KDLUXG,&
   1544  & LD_SURFEX_KFROM, LD_MPA, CCOUPLING, LDXFUMSE,&
   1545  & KINDAT, PRHGMT, PTIMEC, PSOVR, PCOSDEL, PSINDEL,&
   1546  & PINDX, PINDY, PUM, PVM, PTM,&
   1547  & PQVM, PSVM, PCCO2, PRHODREF,&
   1548  & PPABSM, PSURF,PTSTEP, PZZ, PZS, PZSEPS, PMU0,PMU0N, PLON, PGEMU, PSW_BANDS,&
   1549  & PINPRR, PINPRS, PINPRG,&
   1550  & PFRTHDS, PFRSOSCDS,PFRSODIDS,&
   1551  & PCFAQ, PCFATH, PCFAU, PCFBQ,PCFBTH, PCFBU, PCFBV,&
   1552  & PSFTH, PSFRV, PSFSV, PSFCO2, PSFU, PSFV,&
   1553  & PDIR_ALB, PSCA_ALB, PEMIS, PTSRAD, LWNETF,DSLOP,& 
   1554  & PRUS,&
   1555  & PRVS,&
   1556  & PRTHS,&
   1557  & PRRS,&
   1558  & PRTKES,&
   1559  & PTOWN) 
   1560  USE PARKIND1, ONLY : JPRB, JPIM
   1561 INTEGER(KIND=JPIM), INTENT(IN):: KBL
   1562 INTEGER(KIND=JPIM), INTENT(IN):: KGPCOMP
   1563 INTEGER(KIND=JPIM), INTENT(IN):: KLON
   1564 INTEGER(KIND=JPIM), INTENT(IN):: KST
   1565 INTEGER(KIND=JPIM), INTENT(IN):: KEND
   1566 INTEGER(KIND=JPIM), INTENT(IN):: KSTEP
   1567 INTEGER(KIND=JPIM), INTENT(IN):: KRR
   1568 INTEGER(KIND=JPIM), INTENT(IN):: KSW
   1569 INTEGER(KIND=JPIM), INTENT(IN):: KSV
   1570 INTEGER(KIND=JPIM), INTENT(IN):: KDGUNG, KDGUXG, KDLUNG, KDLUXG
   1571 LOGICAL, INTENT(IN):: LD_SURFEX_KFROM
   1572 LOGICAL, INTENT(IN):: LD_MPA
   1573 CHARACTER (LEN=1),INTENT(IN):: CCOUPLING
   1574 LOGICAL, INTENT(IN):: LDXFUMSE
   1575 INTEGER(KIND=JPIM), INTENT(IN):: KINDAT
   1576 REAL(KIND=JPRB), INTENT(IN):: PRHGMT
   1577 REAL(KIND=JPRB), INTENT(IN):: PTIMEC
   1578 REAL(KIND=JPRB), INTENT(IN):: PSOVR
   1579 REAL(KIND=JPRB), INTENT(IN):: PCOSDEL
   1580 REAL(KIND=JPRB), INTENT(IN):: PSINDEL
   1581 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PINDX
   1582 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PINDY
   1583 REAL(KIND=JPRB), DIMENSION(KLON,10), INTENT(IN) :: PUM,PVM
   1584 REAL(KIND=JPRB), DIMENSION(KLON,10), INTENT(IN) :: PTM
   1585 REAL(KIND=JPRB), DIMENSION(KLON,10), INTENT(IN) :: PQVM
   1586 REAL(KIND=JPRB), DIMENSION(KLON,KSV),INTENT(IN) :: PSVM
   1587 REAL(KIND=JPRB), INTENT(IN) :: PCCO2
   1588 REAL(KIND=JPRB), DIMENSION(KLON,10), INTENT(IN) :: PRHODREF
   1589 REAL(KIND=JPRB), DIMENSION(KLON,10), INTENT(IN) :: PPABSM
   1590 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PSURF
   1591 REAL(KIND=JPRB), INTENT(IN) :: PTSTEP
   1592 REAL(KIND=JPRB), DIMENSION(KLON,10), INTENT(IN) :: PZZ
   1593 REAL(KIND=JPRB), DIMENSION(KLON,10),   INTENT(IN)    :: PTKEM
   1594 REAL(KIND=JPRB), DIMENSION(KLON,KLEV),   INTENT(INOUT) :: PRUS, PRVS
   1595 REAL(KIND=JPRB), DIMENSION(KLON, KLEV),   INTENT(INOUT) :: PRTKES

Page 30          Source Listing                  
2024-11-22 11:31                                 .D[2]/aro_ground_param.h

   1596 REAL(KIND=JPRB), DIMENSION(KLON,KLEV,KRR), INTENT(INOUT) :: PRRS
   1597 REAL(KIND=JPRB), DIMENSION(KLON,KLEV),   INTENT(INOUT) :: PRTHS
   1598 REAL(KIND=JPRB), DIMENSION(KLON),     INTENT(INOUT)    :: PTOWN
   1599 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PZS
   1600 REAL(KIND=JPRB),                  INTENT(IN) :: PZSEPS
   1601 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PMU0
   1602 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PMU0N
   1603 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PLON
   1604 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PGEMU
   1605 REAL(KIND=JPRB), DIMENSION(KSW), INTENT(IN) :: PSW_BANDS
   1606 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(INOUT):: PINPRR
   1607 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(INOUT):: PINPRS
   1608 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(INOUT):: PINPRG
   1609 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(INOUT) :: PFRTHDS
   1610 REAL(KIND=JPRB), DIMENSION(KLON,KSW),INTENT(INOUT) :: PFRSOSCDS
   1611 REAL(KIND=JPRB), DIMENSION(KLON,KSW),INTENT(INOUT) :: PFRSODIDS
   1612 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PCFAQ
   1613 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PCFATH
   1614 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PCFAU
   1615 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PCFBQ
   1616 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PCFBTH
   1617 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PCFBU
   1618 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PCFBV
   1619 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PSFTH
   1620 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PSFRV
   1621 REAL(KIND=JPRB), DIMENSION(KLON,KSV), INTENT(OUT) :: PSFSV
   1622 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PSFCO2
   1623 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PSFU
   1624 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PSFV
   1625 REAL(KIND=JPRB), DIMENSION(KLON,KSW), INTENT(INOUT) :: PDIR_ALB
   1626 REAL(KIND=JPRB), DIMENSION(KLON,KSW), INTENT(INOUT) :: PSCA_ALB
   1627 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(INOUT) :: PEMIS
   1628 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(INOUT) :: PTSRAD
   1629 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(INOUT) :: LWNETF
   1630 REAL(KIND=JPRB), DIMENSION(KLON),  INTENT(OUT) :: DSLOP
   1631 END SUBROUTINE ARO_GROUND_PARAM
   1632 END INTERFACE
   1633 # 742 "apl_arome.F90" 2 
   1634 # 1 ".D[32]/aro_ground_diag.h" 1 
   1635 INTERFACE
   1636  SUBROUTINE ARO_GROUND_DIAG( KBL, KGPCOMP, KLON, KST, KEND,&
   1637  & KLEV, KORDER, KDGUNG, KDGUXG,KDLUNG, KDLUXG,OSURFEX_KFROM,&
   1638  & PZS, PFEV, PUM, PVM, PHEIGHT, PLWNET, PSWNET,PINDX, PINDY,&
   1639  & PQS, PGZ0, PGZ0H, PT2M, PQ2M, PRH2M, PU10M, PV10M, PU10N, PV10N, &
   1640  & PFCLL, PFCLN,PFEVL, PFEVN, PSSO_STDEV, PTWSNOW , PBUDLW, PBUDSW, &
   1641  & PLE, PTOWN, PCD, PCH) 
   1642  USE PARKIND1, ONLY : JPRB, JPIM
   1643 INTEGER(KIND=JPIM), INTENT(IN) :: KBL
   1644 INTEGER(KIND=JPIM), INTENT(IN) :: KGPCOMP
   1645 INTEGER(KIND=JPIM), INTENT(IN) :: KLON
   1646 INTEGER(KIND=JPIM), INTENT(IN) :: KST
   1647 INTEGER(KIND=JPIM), INTENT(IN) :: KEND
   1648 INTEGER(KIND=JPIM), INTENT(IN) :: KLEV
   1649 INTEGER(KIND=JPIM), INTENT(IN) :: KORDER
   1650 INTEGER(KIND=JPIM), INTENT(IN) :: KDGUNG, KDGUXG,KDLUNG, KDLUXG
   1651 LOGICAL, INTENT(IN) :: OSURFEX_KFROM
   1652 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PZS

Page 31          Source Listing                  
2024-11-22 11:31                                 .D[32]/aro_ground_diag.h

   1653 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PFEV
   1654 REAL(KIND=JPRB), DIMENSION(KLON,KLEV), INTENT(IN) :: PUM
   1655 REAL(KIND=JPRB), DIMENSION(KLON,KLEV), INTENT(IN) :: PVM
   1656 REAL(KIND=JPRB), DIMENSION(KLON,KLEV), INTENT(IN) :: PHEIGHT
   1657 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PLWNET
   1658 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PSWNET
   1659 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PINDX
   1660 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PINDY
   1661 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PQS
   1662 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PGZ0
   1663 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PGZ0H
   1664 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PT2M
   1665 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PQ2M
   1666 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PRH2M
   1667 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PU10M
   1668 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PV10M
   1669 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PU10N
   1670 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PV10N
   1671 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PFCLL
   1672 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PFCLN
   1673 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PFEVL
   1674 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PFEVN
   1675 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PSSO_STDEV
   1676 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PTWSNOW
   1677 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PBUDLW
   1678 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PBUDSW
   1679 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PLE
   1680 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PTOWN
   1681 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PCD
   1682 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(OUT) :: PCH
   1683 END SUBROUTINE ARO_GROUND_DIAG
   1684 END INTERFACE
   1685 # 743 "apl_arome.F90" 2 
   1686 # 1 ".D[31]/aro_shallow_mf.h" 1 
   1687 INTERFACE
   1688  SUBROUTINE ARO_SHALLOW_MF(KKL, KLON,KLEV, KRR, KRRL, KRRI,KSV,&
   1689  & HMF_UPDRAFT, HMF_CLOUD, HFRAC_ICE, OMIXUV,&
   1690  & ONOMIXLG,KSV_LGBEG,KSV_LGEND,&
   1691  & KTCOUNT, PTSTEP,&
   1692  & PZZ, PZZF,PDZZF,&
   1693  & PRHODJ, PRHODREF,&
   1694  & PPABSM, PEXNM,&
   1695  & PSFTH,PSFRV,&
   1696  & PTHM,PRM,&
   1697  & PUM,PVM,PTKEM,PSVM,&
   1698  & PDUDT_MF,PDVDT_MF,&
   1699  & PDTHLDT_MF,PDRTDT_MF,PDSVDT_MF,&
   1700  & PSIGMF,PRC_MF,PRI_MF,PCF_MF,PFLXZTHVMF,&
   1701  & PTHL_UP,PRT_UP,PRV_UP,PRC_UP,PRI_UP,&
   1702  & PU_UP, PV_UP, PTHV_UP, PW_UP, PFRAC_UP, PEMF) 
   1703 USE PARKIND1  ,ONLY : JPIM     ,JPRB
   1704 INTEGER(KIND=JPIM), INTENT(IN) :: KKL
   1705 INTEGER(KIND=JPIM), INTENT(IN) :: KLON
   1706 INTEGER(KIND=JPIM), INTENT(IN) :: KLEV
   1707 INTEGER(KIND=JPIM), INTENT(IN) :: KRR
   1708 INTEGER(KIND=JPIM), INTENT(IN) :: KRRL
   1709 INTEGER(KIND=JPIM), INTENT(IN) :: KRRI

Page 32          Source Listing                  
2024-11-22 11:31                                 .D[31]/aro_shallow_mf.h

   1710 INTEGER(KIND=JPIM), INTENT(IN) :: KSV
   1711 CHARACTER (LEN=4), INTENT(IN) :: HMF_UPDRAFT
   1712 CHARACTER (LEN=4), INTENT(IN) :: HMF_CLOUD
   1713 CHARACTER*1, INTENT(IN) :: HFRAC_ICE
   1714 LOGICAL, INTENT(IN) :: OMIXUV
   1715 LOGICAL, INTENT(IN) :: ONOMIXLG
   1716 INTEGER(KIND=JPIM), INTENT(IN) :: KSV_LGBEG
   1717 INTEGER(KIND=JPIM), INTENT(IN) :: KSV_LGEND
   1718 INTEGER(KIND=JPIM), INTENT(IN) :: KTCOUNT
   1719 REAL(KIND=JPRB), INTENT(IN) :: PTSTEP
   1720 REAL(KIND=JPRB), DIMENSION(KLON,KLEV), INTENT(IN) :: PZZ
   1721 REAL(KIND=JPRB), DIMENSION(KLON,KLEV), INTENT(IN) :: PZZF
   1722 REAL(KIND=JPRB), DIMENSION(KLON,KLEV), INTENT(IN) :: PDZZF
   1723 REAL(KIND=JPRB), DIMENSION(KLON,KLEV), INTENT(IN) :: PRHODJ
   1724 REAL(KIND=JPRB), DIMENSION(KLON,KLEV), INTENT(IN) :: PRHODREF
   1725 REAL(KIND=JPRB), DIMENSION(KLON,KLEV), INTENT(IN) :: PPABSM
   1726 REAL(KIND=JPRB), DIMENSION(KLON,KLEV), INTENT(IN) :: PEXNM
   1727 REAL(KIND=JPRB), DIMENSION(KLON), INTENT(IN) :: PSFTH,PSFRV
   1728 REAL(KIND=JPRB), DIMENSION(KLON,KLEV), INTENT(IN) :: PTHM
   1729 REAL(KIND=JPRB), DIMENSION(KLON,KLEV,KRR), INTENT(IN) :: PRM
   1730 REAL(KIND=JPRB), DIMENSION(KLON,KLEV), INTENT(IN) :: PUM,PVM
   1731 REAL(KIND=JPRB), DIMENSION(KLON,KLEV), INTENT(IN) :: PTKEM
   1732 REAL(KIND=JPRB), DIMENSION(KLON,KLEV,KSV), INTENT(IN) :: PSVM
   1733 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(OUT):: PDUDT_MF
   1734 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(OUT):: PDVDT_MF
   1735 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(OUT):: PDTHLDT_MF
   1736 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(OUT):: PDRTDT_MF
   1737 REAL(KIND=JPRB), DIMENSION(:,:,:), INTENT(OUT):: PDSVDT_MF
   1738 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(OUT) :: PSIGMF,PRC_MF,PRI_MF,PCF_MF
   1739 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(OUT) :: PFLXZTHVMF
   1740 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(INOUT) :: PTHL_UP
   1741 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(INOUT) :: PRT_UP
   1742 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(INOUT) :: PRV_UP
   1743 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(INOUT) :: PU_UP
   1744 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(INOUT) :: PV_UP
   1745 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(INOUT) :: PRC_UP
   1746 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(INOUT) :: PRI_UP
   1747 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(INOUT) :: PTHV_UP
   1748 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(INOUT) :: PW_UP
   1749 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(INOUT) :: PFRAC_UP
   1750 REAL(KIND=JPRB), DIMENSION(:,:), INTENT(INOUT) :: PEMF
   1751 END SUBROUTINE ARO_SHALLOW_MF
   1752 END INTERFACE
   1753 # 744 "apl_arome.F90" 2 
   1754 # 1 ".D[40]/vdfhghthl.intfb.h" 1 
   1755 INTERFACE
   1756 SUBROUTINE VDFHGHTHL (KSTEP, KIDIA , KFDIA , KLON , KLEV , KDRAFT, PTMST,&
   1757  & PUM1, PVM1, PTM1 , PQM1 , PLM1 , PIM1 , PAM1,&
   1758  & PAPHM1 , PAPM1 , PGEOM1 , PGEOH ,&
   1759  & PKHFL , PKQFL , PKUFL , PKVFL,&
   1760  & PMFLX ,&
   1761  & PTHLUH , PQTUH , PTHTVUH,&
   1762  & PQCUH, PQIUH, PUUH, PVUH,&
   1763  & KGFL_EZDIAG, PEZDIAG,&
   1764  & PTENDQVUP, PTENDTUP, PSURFPREP, PSURFSNOW,&
   1765  & ZLENGTH_M,&
   1766  & ZLENGTH_H, PTKE) 

Page 33          Source Listing                  
2024-11-22 11:31                                 .D[40]/vdfhghthl.intfb.h

   1767 USE PARKIND1 ,ONLY : JPIM ,JPRB
   1768 INTEGER(KIND=JPIM),INTENT(IN) :: KSTEP
   1769 INTEGER(KIND=JPIM),INTENT(IN) :: KLON
   1770 INTEGER(KIND=JPIM),INTENT(IN) :: KLEV
   1771 INTEGER(KIND=JPIM),INTENT(IN) :: KIDIA
   1772 INTEGER(KIND=JPIM),INTENT(IN) :: KFDIA
   1773 INTEGER(KIND=JPIM),INTENT(IN) :: KDRAFT
   1774 REAL(KIND=JPRB) ,INTENT(IN) :: PTMST
   1775 REAL(KIND=JPRB) ,INTENT(IN) :: PUM1(KLON,KLEV)
   1776 REAL(KIND=JPRB) ,INTENT(IN) :: PVM1(KLON,KLEV)
   1777 REAL(KIND=JPRB) ,INTENT(IN) :: PTM1(KLON,KLEV)
   1778 REAL(KIND=JPRB) ,INTENT(IN) :: PQM1(KLON,KLEV)
   1779 REAL(KIND=JPRB) ,INTENT(IN) :: PLM1(KLON,KLEV)
   1780 REAL(KIND=JPRB) ,INTENT(IN) :: PIM1(KLON,KLEV)
   1781 REAL(KIND=JPRB) ,INTENT(IN) :: PAM1(KLON,KLEV)
   1782 REAL(KIND=JPRB) ,INTENT(IN) :: PAPHM1(KLON,0:KLEV)
   1783 REAL(KIND=JPRB) ,INTENT(IN) :: PAPM1(KLON,KLEV)
   1784 REAL(KIND=JPRB) ,INTENT(IN) :: PGEOM1(KLON,KLEV)
   1785 REAL(KIND=JPRB) ,INTENT(IN) :: PGEOH(KLON,0:KLEV)
   1786 REAL(KIND=JPRB) ,INTENT(IN) :: PKHFL(KLON)
   1787 REAL(KIND=JPRB) ,INTENT(IN) :: PKQFL(KLON)
   1788 REAL(KIND=JPRB) ,INTENT(IN) :: PKUFL(KLON)
   1789 REAL(KIND=JPRB) ,INTENT(IN) :: PKVFL(KLON)
   1790 REAL(KIND=JPRB) ,INTENT(INOUT) :: PMFLX(KLON,0:KLEV,KDRAFT)
   1791 REAL(KIND=JPRB) ,INTENT(INOUT) :: PTHLUH(KLON,0:KLEV,KDRAFT)
   1792 REAL(KIND=JPRB) ,INTENT(INOUT) :: PQTUH(KLON,0:KLEV,KDRAFT)
   1793 REAL(KIND=JPRB) ,INTENT(INOUT) :: PTHTVUH(KLON,0:KLEV,KDRAFT)
   1794 REAL(KIND=JPRB) ,INTENT(INOUT) :: PQCUH(KLON,0:KLEV,KDRAFT)
   1795 REAL(KIND=JPRB) ,INTENT(INOUT) :: PQIUH(KLON,0:KLEV,KDRAFT)
   1796 REAL(KIND=JPRB) ,INTENT(INOUT) :: PUUH(KLON,0:KLEV,KDRAFT)
   1797 REAL(KIND=JPRB) ,INTENT(INOUT) :: PVUH(KLON,0:KLEV,KDRAFT)
   1798 INTEGER(KIND=JPIM),INTENT(IN) :: KGFL_EZDIAG
   1799 REAL(KIND=JPRB) ,INTENT(INOUT) :: PEZDIAG(KLON,KLEV,KGFL_EZDIAG)
   1800 REAL(KIND=JPRB) ,INTENT(OUT) :: PTENDQVUP(KLON,KLEV)
   1801 REAL(KIND=JPRB) ,INTENT(OUT) :: PSURFPREP(KLON)
   1802 REAL(KIND=JPRB) ,INTENT(OUT) :: PSURFSNOW(KLON)
   1803 REAL(KIND=JPRB) ,INTENT(OUT) :: PTENDTUP(KLON,KLEV)
   1804 REAL(KIND=JPRB) ,INTENT(OUT) :: ZLENGTH_M(KLON,KLEV)
   1805 REAL(KIND=JPRB) ,INTENT(OUT) :: ZLENGTH_H(KLON,KLEV)
   1806 REAL(KIND=JPRB) ,INTENT(INOUT) :: PTKE(KLON,KLEV)
   1807 END SUBROUTINE VDFHGHTHL
   1808 END INTERFACE
   1809 # 745 "apl_arome.F90" 2 
   1810 # 1 ".D[31]/aro_rainaero.h" 1 
   1811 INTERFACE
   1812 SUBROUTINE ARO_RAINAERO(KLON,KLEV,NSV,KRR, PTSTEP &
   1813        ,PSVT       & !I [moments/molec_{air}] Transported moments of dust
   1814        ,PZZ        & !I [m] height of layers
   1815        ,PPABST     & ! Pressure
   1816        ,PTHT       & ! Potential temperature
   1817        ,PRHODREF   & !I [kg/m3] density of air
   1818        ,KTCOUNT    & ! number of time step
   1819        ,PRT        & ! moist field
   1820        ,PEVAP      & ! evaporation profile
   1821        ,KSPLITR    & ! rain sedimentation time splitting
   1822        )
   1823 

Page 34          Source Listing                  
2024-11-22 11:31                                 .D[31]/aro_rainaero.h

   1824 !
   1825 !*** *ARO_RAINAERO*
   1826 !
   1827 !    PURPOSE
   1828 !    -------
   1829 
   1830 !     Interface routine for initialisation of dust optical properties
   1831 !     before radiation scheme call
   1832   
   1833 !     AUTHOR.
   1834 !     -------
   1835 !    P. Tulet
   1836 
   1837 !    MODIFICATIONS
   1838 !    -------------
   1839 !    Original 10/10/05
   1840 !
   1841 !    EXTERNAL
   1842 !     -------
   1843 
   1844 
   1845 
   1846 USE PARKIND1  ,ONLY : JPIM,JPRB
   1847 
   1848 
   1849     IMPLICIT NONE
   1850     
   1851 !INPUT
   1852     INTEGER(KIND=JPIM),   INTENT(IN)   :: KLON     !NPROMA under CPG
   1853     INTEGER(KIND=JPIM),   INTENT(IN)   :: KLEV     !Number of vertical levels
   1854     INTEGER(KIND=JPIM),   INTENT(IN)   :: NSV      ! Number of passive scalar
   1855     INTEGER(KIND=JPIM),   INTENT(IN)   :: KRR      ! Number of moist variables
   1856     REAL(KIND=JPRB),      INTENT(IN)   :: PTSTEP   ! Time step
   1857 
   1858     REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV,NSV),INTENT(INOUT)   :: PSVT       !I [moments/molec_{air}] transported moments o
   1858 f dust
   1859     REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV,KRR),INTENT(IN)      :: PRT   ! Moist variables at time t
   1860    
   1861     REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),INTENT(IN)        :: PZZ        !I [m] height of layers
   1862     REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),INTENT(IN)        :: PRHODREF   !I [kg/m3] density of air
   1863     REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),INTENT(IN)        :: PTHT       !I [K] potentiel temperature
   1864     REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),INTENT(IN)        :: PPABST     !I [Pa] pressure
   1865     REAL(KIND=JPRB), DIMENSION(KLON,1,KLEV),INTENT(IN)        :: PEVAP      !I Evaporation
   1866     INTEGER(KIND=JPIM), INTENT(IN)                      :: KTCOUNT    !I  number of time step
   1867     INTEGER(KIND=JPIM), INTENT(IN)                      :: KSPLITR  ! Number of small time step
   1868 
   1869 END SUBROUTINE ARO_RAINAERO
   1870 END INTERFACE
   1871 # 746 "apl_arome.F90" 2 
   1872 # 1 ".D[40]/sppten.intfb.h" 1 
   1873 INTERFACE
   1874 SUBROUTINE SPPTEN (KIDIA,KFDIA,KLON,KLEV,PTSPHY,&
   1875  & PTSL, PQSL, PA, PAP, PAPH,&
   1876  & PTENUIN,PTENVIN,PTENTIN,PTENQIN,&
   1877  & PMULNOISE,&
   1878  & PTENU ,PTENV ,PTENT ,PTENQ) 
   1879 USE PARKIND1 ,ONLY : JPIM ,JPRB

Page 35          Source Listing                  
2024-11-22 11:31                                 .D[40]/sppten.intfb.h

   1880 INTEGER(KIND=JPIM),INTENT(IN) :: KIDIA
   1881 INTEGER(KIND=JPIM),INTENT(IN) :: KFDIA
   1882 INTEGER(KIND=JPIM),INTENT(IN) :: KLON
   1883 INTEGER(KIND=JPIM),INTENT(IN) :: KLEV
   1884 REAL(KIND=JPRB) ,INTENT(IN) :: PTSPHY
   1885 REAL(KIND=JPRB) ,INTENT(IN),OPTIONAL :: PTSL(KLON,KLEV)
   1886 REAL(KIND=JPRB) ,INTENT(IN),OPTIONAL :: PQSL(KLON,KLEV)
   1887 REAL(KIND=JPRB) ,INTENT(IN),OPTIONAL :: PA(KLON,KLEV)
   1888 REAL(KIND=JPRB) ,INTENT(IN),OPTIONAL :: PAP(KLON,KLEV)
   1889 REAL(KIND=JPRB) ,INTENT(IN),OPTIONAL :: PAPH(KLON,KLEV+1)
   1890 REAL(KIND=JPRB) ,INTENT(IN),OPTIONAL :: PTENUIN(KLON,KLEV)
   1891 REAL(KIND=JPRB) ,INTENT(IN),OPTIONAL :: PTENVIN(KLON,KLEV)
   1892 REAL(KIND=JPRB) ,INTENT(IN),OPTIONAL :: PTENTIN(KLON,KLEV)
   1893 REAL(KIND=JPRB) ,INTENT(IN),OPTIONAL :: PTENQIN(KLON,KLEV)
   1894 REAL(KIND=JPRB) ,INTENT(IN),OPTIONAL :: PMULNOISE(KLON,KLEV)
   1895 REAL(KIND=JPRB) ,INTENT(INOUT),OPTIONAL :: PTENU(KLON,KLEV)
   1896 REAL(KIND=JPRB) ,INTENT(INOUT),OPTIONAL :: PTENV(KLON,KLEV)
   1897 REAL(KIND=JPRB) ,INTENT(INOUT),OPTIONAL :: PTENT(KLON,KLEV)
   1898 REAL(KIND=JPRB) ,INTENT(INOUT),OPTIONAL :: PTENQ(KLON,KLEV)
   1899 END SUBROUTINE SPPTEN
   1900 END INTERFACE
   1901 # 747 "apl_arome.F90" 2 
   1902 
   1903 ! daand: radflex
   1904 # 1 ".D[40]/apl_arome2intflex.intfb.h" 1 
   1905 INTERFACE
   1906 SUBROUTINE APL_AROME2INTFLEX(KPROMA, KST, KEND, KFLEV, PDT,&
   1907  & PRDELP, PU, PV, PT, PTS, PCP,&
   1908  & PFPR,&
   1909  & LDRAD, PFRTH, PFRSO,&
   1910  & PTENDU, PTENDV, PTENDT,&
   1911  & PTENDR, PTENDTKE, PTENDEXT,&
   1912  & YDPROCSET) 
   1913 USE PARKIND1, ONLY : JPRB, JPIM
   1914 USE YOM_YGFL, ONLY : YGFL
   1915 USE YOMPARAR ,ONLY : YRPARAR
   1916 USE INTFLEX_MOD, ONLY : TYPE_INTPROCSET, TYPE_INTPROC, NEWINTFIELD, NEWINTPROC, LENTHPREC
   1917 INTEGER(KIND=JPIM), INTENT(IN) :: KPROMA, KST, KEND, KFLEV
   1918 REAL(KIND=JPRB), INTENT(IN) :: PDT
   1919 REAL(KIND=JPRB), INTENT(IN) :: PRDELP(KPROMA,KFLEV)
   1920 REAL(KIND=JPRB), INTENT(IN) :: PU(KPROMA,KFLEV)
   1921 REAL(KIND=JPRB), INTENT(IN) :: PV(KPROMA,KFLEV)
   1922 REAL(KIND=JPRB), INTENT(IN) :: PT(KPROMA,KFLEV)
   1923 REAL(KIND=JPRB), INTENT(IN) :: PTS(KPROMA)
   1924 REAL(KIND=JPRB), INTENT(IN) :: PCP(KPROMA,KFLEV)
   1925 REAL(KIND=JPRB), INTENT(IN) :: PFPR(KPROMA,0:KFLEV,YRPARAR%NRR)
   1926 LOGICAL, INTENT(IN) :: LDRAD
   1927 REAL(KIND=JPRB), INTENT(IN) :: PFRTH(KPROMA,0:KFLEV)
   1928 REAL(KIND=JPRB), INTENT(IN) :: PFRSO(KPROMA,0:KFLEV)
   1929 REAL(KIND=JPRB), INTENT(IN) :: PTENDU(KPROMA,KFLEV)
   1930 REAL(KIND=JPRB), INTENT(IN) :: PTENDV(KPROMA,KFLEV)
   1931 REAL(KIND=JPRB), INTENT(IN) :: PTENDT(KPROMA,KFLEV)
   1932 REAL(KIND=JPRB), INTENT(IN) :: PTENDR(KPROMA,KFLEV,YRPARAR%NRR)
   1933 REAL(KIND=JPRB), INTENT(IN) :: PTENDTKE(KPROMA,KFLEV)
   1934 REAL(KIND=JPRB), INTENT(IN) :: PTENDEXT(KPROMA,KFLEV,YGFL%NGFL_EXT)
   1935 TYPE(TYPE_INTPROCSET), INTENT(INOUT) :: YDPROCSET
   1936 END SUBROUTINE APL_AROME2INTFLEX

Page 36          Source Listing                  
2024-11-22 11:31                                 .D[40]/apl_arome2intflex.intfb.h

   1937 END INTERFACE
   1938 # 750 "apl_arome.F90" 2 
   1939 
   1940 !     ------------------------------------------------------------------
   1941 # 1 ".D[40]/surf_ideal_flux.intfb.h" 1 
   1942 INTERFACE
   1943 SUBROUTINE SURF_IDEAL_FLUX(LDAROME,KIDIA, KFDIA, KLON, PZ, PRHOA, PSFORC,&
   1944  & PTN,PTS, PLSM, PQS, PU, PV, PTHETAS, PSFTH, PSFTQ, PSFU, PSFV) 
   1945 USE PARKIND1 ,ONLY : JPIM ,JPRB
   1946 USE YOMPHYDS , ONLY : YRPHYDS
   1947 INTEGER(KIND=JPIM),INTENT(IN) :: KLON
   1948 INTEGER(KIND=JPIM),INTENT(IN) :: KIDIA
   1949 INTEGER(KIND=JPIM),INTENT(IN) :: KFDIA
   1950 REAL(KIND=JPRB) ,INTENT(IN) :: PSFORC(KLON,YRPHYDS%NSFORC)
   1951 REAL(KIND=JPRB) ,INTENT(IN) :: PRHOA (KLON)
   1952 REAL(KIND=JPRB) ,INTENT(IN) :: PZ(KLON)
   1953 REAL(KIND=JPRB) ,INTENT(IN) :: PU(KLON)
   1954 REAL(KIND=JPRB) ,INTENT(IN) :: PV(KLON)
   1955 REAL(KIND=JPRB) ,INTENT(IN) :: PQS(KLON)
   1956 REAL(KIND=JPRB) ,INTENT(IN) :: PLSM(KLON)
   1957 REAL(KIND=JPRB) ,INTENT(INOUT) :: PTS(KLON)
   1958 REAL(KIND=JPRB) ,INTENT(IN) :: PTN(KLON)
   1959 REAL(KIND=JPRB) ,INTENT(IN) :: PTHETAS(KLON)
   1960 LOGICAL ,INTENT(IN) :: LDAROME
   1961 REAL(KIND=JPRB) ,INTENT(OUT) :: PSFU(KLON)
   1962 REAL(KIND=JPRB) ,INTENT(OUT) :: PSFV(KLON)
   1963 REAL(KIND=JPRB) ,INTENT(OUT) :: PSFTH(KLON)
   1964 REAL(KIND=JPRB) ,INTENT(OUT) :: PSFTQ(KLON)
   1965 END SUBROUTINE SURF_IDEAL_FLUX
   1966 END INTERFACE
   1967 # 753 "apl_arome.F90" 2 
   1968 # 1 ".D[40]/ecr1d.intfb.h" 1 
   1969 INTERFACE
   1970 SUBROUTINE ECR1D(KUL,CDNOMA,PTAB,KLONLOC,KLON)
   1971 USE PARKIND1 ,ONLY : JPIM ,JPRB
   1972 INTEGER(KIND=JPIM),INTENT(IN) :: KLON
   1973 INTEGER(KIND=JPIM),INTENT(IN) :: KUL
   1974 CHARACTER(LEN=*) ,INTENT(IN) :: CDNOMA
   1975 REAL(KIND=JPRB) ,INTENT(IN) :: PTAB(KLON)
   1976 INTEGER(KIND=JPIM),INTENT(IN) :: KLONLOC
   1977 END SUBROUTINE ECR1D
   1978 END INTERFACE
   1979 # 754 "apl_arome.F90" 2 
   1980 # 1 ".D[24]/fcttrm.func.h" 1 
   1981 !*
   1982 !     ------------------------------------------------------------------
   1983 
   1984 !     CE COMDECK CONTIENT DEUX GROUPES DE FONCTIONS THERMODYNAMIQUES :
   1985 
   1986 !        * LE PREMIER (RLV,RLS,RLF,ESW,ESS,ES) CORRESPOND A DES
   1987 !     FONCTIONS ABSOLUES (OU INTRINSEQUES) QUI DOIVENT ETRE UTILISEES
   1988 !     POUR TOUT CE QUI CONCERNE LE MONDE REEL (DONNEES OBSERVEES ET
   1989 !     SORTIES DESTINEES A ETRE COMPAREES A DE TELLES DONNEES).
   1990 
   1991 !        * LE SECOND (FOEW,FODLEW,FOQS,FODQS,FOLH) CORRESPOND AU MONDE
   1992 !     DE LA PHYSIQUE DU MODELE (ET PAR CONSEQUENT DE TOUTE LES PARTIES
   1993 !     DU CODE QUI DOIVENT ETRE COMPATIBLES AVEC CETTE PHYSIQUE :

Page 37          Source Listing                  
2024-11-22 11:31                                 .D[24]/fcttrm.func.h

   1994 !     ANALYSE/DYNAMIQUE/POST-PROCESSING ... ). LES DIFFERENCES ENTRE LES
   1995 !     DEUX GROUPES VIENNENT, DANS LA CONFIGURATION ACTUELLE DE LA
   1996 !     PHYSIQUE, DES POINTS SUIVANTS :
   1997 !         - CALCULS RELATIFS A LA VARIABLE Q DU MODELE
   1998 !         - CALCULS DE DERIVATION PAR RAPPORT A LA TEMPERATURE
   1999 !         - ABSENCE D'ETATS HORS-EQUILIBRE = UNE SEULE CHALEUR LATENTE
   2000 !           DE FUSION
   2001 !         - POSSIBILITE DE TRAVAILLER SANS LA PHASE GLACE = INDICE DE
   2002 !           TEST BINAIRE.
   2003 
   2004 !     ------------------------------------------------------------------
   2005 !     ABSOLUTE THERMODYNAMICAL FUNCTIONS .
   2006 
   2007 
   2008 !     RLV : LATENT HEAT OF VAPOURISATION
   2009 !     RLS : LATENT HEAT OF SUBLIMATION
   2010 !     RLF : LATENT HEAT OF FUSION
   2011 !     ESW : SATURATION IN PRESENCE OF WATER
   2012 !     ESS : SATURATION IN PRESENCE OF ICE
   2013 !     ES  : SATURATION (IF T>RTT THEN WATER ; IF T<RTT THEN ICE)
   2014 !        INPUT (FOR ALL SIX FUNCTIONS) : PTARG = TEMPERATURE .
   2015 REAL(KIND=JPRB) :: RLV,RLS,RLF,ESW,ESS,ES
	...........................1...2...3...4  
(1) This statement function has not been used.   [RLF]

(2) This statement function has not been used.   [ESW]

(3) This statement function has not been used.   [ESS]

(4) This statement function has not been used.   [ES]

   2016 REAL(KIND=JPRB) :: PTARG
   2017 
   2018 RLV(PTARG)=RLVTT+(RCPV-RCW)*(PTARG-RTT)
   2019 RLS(PTARG)=RLSTT+(RCPV-RCS)*(PTARG-RTT)
   2020 RLF(PTARG)=RLS(PTARG)-RLV(PTARG)
   2021 ESW(PTARG)=EXP(RALPW-RBETW/PTARG-RGAMW*LOG(PTARG))
   2022 ESS(PTARG)=EXP(RALPS-RBETS/PTARG-RGAMS*LOG(PTARG))
   2023 ES (PTARG)=EXP(&
   2024           &(RALPW+RALPD*MAX(0.0_JPRB,SIGN(1.0_JPRB,RTT-PTARG)))&
   2025          &-(RBETW+RBETD*MAX(0.0_JPRB,SIGN(1.0_JPRB,RTT-PTARG)))/PTARG &
   2026          &-(RGAMW+RGAMD*MAX(0.0_JPRB,SIGN(1.0_JPRB,RTT-PTARG)))*LOG(PTARG))
   2027 
   2028 !     ------------------------------------------------------------------
   2029 !     FONCTIONS THERMODYNAMIQUES : FONCTIONS DEFINIES DE LA PHYSIQUE .
   2030 
   2031 
   2032 !     FONCTION DE LA TENSION DE VAPEUR SATURANTE .
   2033 !        INPUT : PTARG = TEMPERATURE
   2034 !                PDELARG = 0 SI EAU (QUELQUE SOIT PTARG)
   2035 !                          1 SI GLACE (QUELQUE SOIT PTARG).
   2036 REAL(KIND=JPRB) :: FOEW
   2037 REAL(KIND=JPRB) :: PDELARG
   2038 FOEW ( PTARG,PDELARG ) = EXP (&
   2039     &( RALPW+PDELARG*RALPD )&
   2040   &- ( RBETW+PDELARG*RBETD ) / PTARG &
   2041   &- ( RGAMW+PDELARG*RGAMD ) * LOG(PTARG) )

Page 38          Source Listing                  
2024-11-22 11:31                                 .D[24]/fcttrm.func.h

   2042 
   2043 !     FONCTION DERIVEE DU LOGARITHME NEPERIEN DE LA PRECEDENTE (FOEW) .
   2044 !        INPUT : PTARG = TEMPERATURE
   2045 !                PDELARG = 0 SI EAU (QUELQUE SOIT PTARG)
   2046 !                          1 SI GLACE (QUELQUE SOIT PTARG).
   2047 REAL(KIND=JPRB) :: FODLEW
	...................1      
(1) This statement function has not been used.   [FODLEW]

   2048 FODLEW ( PTARG,PDELARG ) = (&
   2049       &( RBETW+PDELARG*RBETD )&
   2050     &- ( RGAMW+PDELARG*RGAMD ) * PTARG )&
   2051     &/ ( PTARG*PTARG )
   2052 
   2053 !     FONCTION HUMIDITE SPECIFIQUE SATURANTE .
   2054 !        INPUT : PESPFAR = RAPPORT FOEW SUR PRESSION.
   2055 REAL(KIND=JPRB) :: FOQS
   2056 REAL(KIND=JPRB) :: PESPFAR
   2057 FOQS ( PESPFAR ) = PESPFAR / ( 1.0_JPRB+RETV*MAX(0.0_JPRB,&
   2058     &(1.0_JPRB-PESPFAR)) )
   2059 
   2060 !     FONCTION HUMIDITE SPECIFIQUE SATURANTE, COMME FONCTION DIRECTE DE T ET P.
   2061 !        INPUT : PTARG  = TEMPERATURE.
   2062 !                PPRESS = PRESSION.
   2063 REAL(KIND=JPRB) :: FOQSTP
	...................1      
(1) This statement function has not been used.   [FOQSTP]

   2064 REAL(KIND=JPRB) :: PPRESS
   2065 FOQSTP(PTARG,PPRESS)=FOQS(FOEW(PTARG,MAX(0.0_JPRB,SIGN(1.0_JPRB,RTT-PTARG)))/PPRESS)
   2066 
   2067 !     FONCTION DERIVEE EN TEMPERATURE DE LA PRECEDENTE (FOQS) .
   2068 !        INPUT : PQSFARG = FOQS
   2069 !                PESPFAR = RAPPORT FOEW SUR PRESSION
   2070 !                PDLEFAR = FODLEW.
   2071 REAL(KIND=JPRB) :: FODQS 
	...................1      
(1) This statement function has not been used.   [FODQS]

   2072 REAL(KIND=JPRB) :: PQSFARG,PDLEFAR 
   2073 FODQS ( PQSFARG,PESPFAR,PDLEFAR ) = ( PQSFARG &
   2074    &* (1.0_JPRB-PQSFARG)*PDLEFAR ) / (1.0_JPRB-PESPFAR)
   2075 
   2076 !     FONCTION COMPOSE DE FODQS ET FOQS AVEC SIMPLIFICATION DU TERME (1-PESPFAR) POUR EVITER LES OVERFLOWS
   2077 !     FDQW (PESPFAR, PDLEFAR) = FODQS (FOQS (PESPFAR), PESPFAR, PDLEFAR)
   2078 !        INPUT : PESPFAR = RAPPORT FOEW SUR PRESSION
   2079 !                PDLEFAR = FODLEW
   2080 REAL(KIND=JPRB) :: FDQW
	...................1    
(1) This statement function has not been used.   [FDQW]

   2081 FDQW (PESPFAR, PDLEFAR) = PDLEFAR * PESPFAR * (1.0_JPRB+RETV) / ( 1.0_JPRB+RETV*MAX(0.0_JPRB,(1.0_JPRB-PESPFAR)) ) ** 2._JPR
   2081 B
   2082 !     FONCTION CHALEUR LATENTE .
   2083 !        INPUT : PTARG = TEMPERATURE
   2084 !                PDELARG = 0 SI EAU (QUELQUE SOIT PTARG)
   2085 !                          1 SI GLACE (QUELQUE SOIT PTARG).

Page 39          Source Listing                  
2024-11-22 11:31                                 .D[24]/fcttrm.func.h

   2086 REAL(KIND=JPRB) :: FOLH
   2087 FOLH ( PTARG,PDELARG ) =  RV * (&
   2088     &( RBETW+PDELARG*RBETD )&
   2089   &- ( RGAMW+PDELARG*RGAMD ) * PTARG )
   2090 !     ------------------------------------------------------------------
   2091 
   2092 # 755 "apl_arome.F90" 2 
   2093 !     --------------------------------------------------------------------------
   2094 IF (LHOOK) CALL DR_HOOK('APL_AROME',0,ZHOOK_HANDLE)
   2095 ASSOCIATE(YDDIM=>YDGEOMETRY%YRDIM,YDDIMV=>YDGEOMETRY%YRDIMV,YDGEM=>YDGEOMETRY%YRGEM, YDMP=>YDGEOMETRY%YRMP,  &
   2096  & YDVETA=>YDGEOMETRY%YRVETA, YDVFE=>YDGEOMETRY%YRVFE,  &
   2097  & YDSTA=>YDGEOMETRY%YRSTA, YDLAP=>YDGEOMETRY%YRLAP, YDCSGLEG=>YDGEOMETRY%YRCSGLEG,  &
   2098  & YDVSPLIP=>YDGEOMETRY%YRVSPLIP, YDVSLETA=>YDGEOMETRY%YRVSLETA, YDHSLMER=>YDGEOMETRY%YRHSLMER,  &
   2099  & YDCSGEOM=>YDGEOMETRY%YRCSGEOM, &
   2100   & YDCSGEOM_NB=>YDGEOMETRY%YRCSGEOM_NB, YDGSGEOM=>YDGEOMETRY%YRGSGEOM, YDGSGEOM_NB=>YDGEOMETRY%YRGSGEOM_NB,  &
   2101   & YDSPGEOM=>YDGEOMETRY%YSPGEOM)
   2102 ASSOCIATE(MINPRR=>YRPARAR%MINPRR, MINPRS=>YRPARAR%MINPRS, MVQS=>YRPARAR%MVQS, &
   2103  & MINPRG=>YRPARAR%MINPRG, LOTOWNC=>YRPARAR%LOTOWNC, LFPREC3D=>YRPARAR%LFPREC3D, &
   2104  & NGPAR=>YRPARAR%NGPAR, CSUBG_RPR_PDF=>YRPARAR%CSUBG_RPR_PDF, &
   2105  & NRRI=>YRPARAR%NRRI, NRRL=>YRPARAR%NRRL, CSUBG_AUCV_RC=>YRPARAR%CSUBG_AUCV_RC, &
   2106  & NPRINTFR=>YRPARAR%NPRINTFR, CMF_CLOUD=>YRPARAR%CMF_CLOUD, &
   2107  & MALBDIR=>YRPARAR%MALBDIR, NSWB_MNH=>YRPARAR%NSWB_MNH, &
   2108  & XSW_BANDS=>YRPARAR%XSW_BANDS, MACPRG=>YRPARAR%MACPRG, MSWDIR=>YRPARAR%MSWDIR, &
   2109  & LMIXUV=>YRPARAR%LMIXUV, MSWDIF=>YRPARAR%MSWDIF, LOLSMC=>YRPARAR%LOLSMC, &
   2110  & NDIAGWMAX=>YRPARAR%NDIAGWMAX, MACPRS=>YRPARAR%MACPRS, MACPRR=>YRPARAR%MACPRR, &
   2111  & LSQUALL=>YRPARAR%LSQUALL, VSIGQSAT=>YRPARAR%VSIGQSAT, &
   2112  & MALBSCA=>YRPARAR%MALBSCA, CSUBG_RC_RR_ACCR=>YRPARAR%CSUBG_RC_RR_ACCR, &
   2113  & RADSN=>YRPARAR%RADSN, LOSEDIC=>YRPARAR%LOSEDIC, LDIAGWMAX=>YRPARAR%LDIAGWMAX, &
   2114  & CSUBG_RR_EVAP=>YRPARAR%CSUBG_RR_EVAP, CSEDIM=>YRPARAR%CSEDIM, &
   2115  & NPTP=>YRPARAR%NPTP, NSPLITR=>YRPARAR%NSPLITR, NSV=>YRPARAR%NSV, &
   2116  & MVTS=>YRPARAR%MVTS, NREFROI2=>YRPARAR%NREFROI2, NREFROI1=>YRPARAR%NREFROI1, &
   2117  & MVEMIS=>YRPARAR%MVEMIS, LOWARM=>YRPARAR%LOWARM, LOCND2=>YRPARAR%LOCND2, &
   2118  & LGRSN=>YRPARAR%LGRSN, LOSIGMAS=>YRPARAR%LOSIGMAS, NRR=>YRPARAR%NRR, &
   2119  & LOSUBG_COND=>YRPARAR%LOSUBG_COND, RADGR=>YRPARAR%RADGR, &
   2120  & CMF_UPDRAFT=>YRPARAR%CMF_UPDRAFT, LHARATU=>YRPARAR%LHARATU, &
   2121  & XMINLM=>YRPHY0%XMINLM, XMAXLM=>YRPHY0%XMAXLM, AERCS1=>YRPHY0%AERCS1, &
   2122  & AERCS3=>YRPHY0%AERCS3, AERCS5=>YRPHY0%AERCS5, &
   2123  & RDECRD1=>YRPHY0%RDECRD1, RDECRD2=>YRPHY0%RDECRD2, &
   2124  & RDECRD3=>YRPHY0%RDECRD3, RDECRD4=>YRPHY0%RDECRD4, &
   2125  & LMPA=>YRARPHY%LMPA, LUSECHEM=>YRARPHY%LUSECHEM, LKFBCONV=>YRARPHY%LKFBCONV, &
   2126  & LMFSHAL=>YRARPHY%LMFSHAL, LMICRO=>YRARPHY%LMICRO, &
   2127  & CCOUPLING=>YRARPHY%CCOUPLING, LTURB=>YRARPHY%LTURB, &
   2128  & NSURFEX_ITER=>YRARPHY%NSURFEX_ITER, LRDUST=>YRARPHY%LRDUST, &
   2129  & LRDEPOS=>YRARPHY%LRDEPOS, LSURFEX_CRITICAL=>YRARPHY%LSURFEX_CRITICAL, &
   2130  & LRCO2=>YRARPHY%LRCO2, LMSE=>YRARPHY%LMSE, &
   2131  & LSURFEX_KFROM=>YRARPHY%LSURFEX_KFROM, &
   2132  & NSURFEXCTL=>YRMSE%NSURFEXCTL, XZSEPS=>YRMSE%XZSEPS, &
   2133  & NDLUNG=>YDDIM%NDLUNG, NDGUNG=>YDDIM%NDGUNG, NPROMA=>YDDIM%NPROMA, &
   2134  & NDLUXG=>YDDIM%NDLUXG, NDGUXG=>YDDIM%NDGUXG, &
   2135  & NGPTOT=>YDGEM%NGPTOT, &
   2136  & NSFORC=>YRPHYDS%NSFORC, &
   2137  & NGFL_EXT=>YGFL%NGFL_EXT, YLRAD=>YGFL%YLRAD, YIRAD=>YGFL%YIRAD, &
   2138  & NGFL_EZDIAG=>YGFL%NGFL_EZDIAG, &
   2139  & YSD_VAD=>YDSURF%YSD_VAD, &
   2140  & QCO2=>YRPHY3%QCO2, &
   2141  & NSORAYFR=>YRPHY%NSORAYFR, NRAY=>YRPHY%NRAY, LRAYFM=>YRPHY%LRAYFM, &
   2142  & LAEROSUL=>YRPHY%LAEROSUL, LO3ABC=>YRPHY%LO3ABC, LRAY=>YRPHY%LRAY, &

Page 40          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2143  & LAEROVOL=>YRPHY%LAEROVOL, LRSTAER=>YRPHY%LRSTAER, LRNUEXP=>YRPHY%LRNUEXP, &
   2144  & NTRADI=>YRTOPH%NTRADI, NTQSAT=>YRTOPH%NTQSAT, NTNEBU=>YRTOPH%NTNEBU,&
   2145  & NAER=>YRERAD%NAER, &
   2146  & LHLRADUPD=>YRPHY%LHLRADUPD, &
   2147  & NMODE=>YRERAD%NMODE, &
   2148  & NOZOCL=>YRERAD%NOZOCL, &
   2149  & NRADFR=>YRERAD%NRADFR, &
   2150  & NSW=>YRERAD%NSW, &
   2151  & RCARDI=>YRERDI%RCARDI, &
   2152  & LFLEXDIA=>YRLDDH%LFLEXDIA, LDDH_OMP=>YRLDDH%LDDH_OMP, &
   2153  & RDECLI=>YRRIP%RDECLI, &
   2154  & RCODEC=>YRRIP%RCODEC, &
   2155  & RHGMT=>YRRIP%RHGMT, &
   2156  & RSIDEC=>YRRIP%RSIDEC, &
   2157  & RSOVR=>YRRIP%RSOVR, &
   2158  & RSTATI=>YRRIP%RSTATI, &
   2159  & TSTEP=>YRRIP%TSTEP, &
   2160  & STPREH=>YDSTA%STPREH, &
   2161  & LXXDIAGH=>YRXFU%LXXDIAGH, &
   2162  & RSUNDUR=>YRERDI%RSUNDUR)
   2163 !     --------------------------------------------------------------------------
   2164 open(unit=14,file="test_apl_arome2.txt") !DUCHENEF
   2165 write(14,*) "test 1" !DUCHENEF
   2166 close(14)
   2167 !    ------------------------------------------------------------------
   2168 !     1 - Initialisations
   2169 !    - --------------------------------------------------------------------
   2170 
   2171 !        1.0 numerical safety
   2172 
   2173 IF (JPRD == JPRB) THEN
   2174   ZEPSNEB=1.E-12
   2175 ELSE
   2176   ZEPSNEB=1.E-06
   2177 ENDIF
   2178 
   2179 NSV=0
   2180 
   2181 !        1.1 decorrelation depth for cloud overlaps
   2182 IF ( LRNUEXP ) THEN
   2183   DO JLON=KIDIA,KFDIA
   2184     ZDECRD(JLON)=RDECRD1+RDECRD2* &
   2185      & EXP(-((ASIN(PGEMU(JLON))-RDECRD3*RDECLI)/RDECRD4)**2)
   2186   ENDDO
   2187 ENDIF
   2188 
   2189 !         1.3 time step initialisation
   2190 !             the mesoNH physics (turb and microphysics) is written
   2191 !             for leap frog scheme
   2192 !             !!! be carefull for 2TL or 3TL
   2193 
   2194 IF (LTWOTL) THEN
   2195   ZDT=PDT/2._JPRB
   2196 ELSE
   2197   IF (KSTEP/=0) THEN
   2198     ZDT=PDT/2._JPRB
   2199   ELSE

Page 41          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2200     ZDT=PDT
   2201   ENDIF
   2202 ENDIF
   2203 
   2204 ZINVDT=1/PDT
   2205 
   2206 ! initialisation de ZDTMSE
   2207 IF (LDXFUMSE) THEN
   2208   ZDTMSE=0.01_JPRB
   2209   ZSTATI=REAL(RSTATI,JPRB)-ZDTMSE/2._JPRB
   2210 ELSE
   2211   ZDTMSE=PDT
   2212   ZSTATI=REAL(RSTATI,JPRB)
   2213 ENDIF
   2214 
   2215 IF(LTWOTL) THEN
   2216   ZRHGMT=REAL(RHGMT,JPRB)-ZDTMSE/2._JPRB
   2217 ELSE
   2218   ZRHGMT=REAL(RHGMT,JPRB)
   2219 ENDIF
   2220 
   2221 
   2222 LLMSE=LMSE.AND.(NSURFEXCTL >= 2)
   2223 LLMSE_PARAM=LLMSE
   2224 LLMSE_DIAG=LLMSE.AND.(NSURFEXCTL >= 3)
   2225 
   2226 !  SETUP OF TENDENCIES
   2227 
   2228 PTENDT=0.0_JPRB
   2229 PTENDU=0.0_JPRB
   2230 PTENDV=0.0_JPRB
   2231 PTENDW=0.0_JPRB
   2232 PTENDR=0.0_JPRB
   2233 PTENDTKE=0.0_JPRB
   2234 PTENDEXT=0.0_JPRB
   2235 !  FIELDS TO BE ADJUSTED (local arrays modified by ac_adjust)
   2236 
   2237 ZQVM=PQVM
   2238 ZQIM=PQIM
   2239 ZQCM=PQCM
   2240 ZQRM=PQRM
   2241 ZQSM=PQSM
   2242 ZQGM=PQGM
   2243 IF (NRR==7) THEN
   2244   ZQHM=PQHM
   2245 ELSE
   2246   ZQHM=0._JPRB
   2247 ENDIF 
   2248 ZTM=PTM
   2249 ZZI_APHIM=PAPHIM
   2250 ZZI_APHIFM=PAPHIFM
   2251 
   2252 !  SIZE OF ARRAY FOR TURB AND Microphysics
   2253 ILONMNH=KFDIA-KIDIA+1
   2254 !  Vertical points
   2255 IKA=KLEV
   2256 IKB=KLEV

Page 42          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2257 IKU=1
   2258 IKT=KLEV
   2259 IKTE=KLEV
   2260 IKTB=1
   2261 IKL=-1
   2262 
   2263 !  SETUP
   2264 
   2265 ZQSAT=0.0_JPRB
   2266 ZFRSOFS=0.0_JPRB
   2267 ZFRSDNI=0.0_JPRB
   2268 ZLH=0.0_JPRB
   2269 ZLSCPE=0.0_JPRB
   2270 ZGEOSLC=0.0_JPRB
   2271 ZQW=0.0_JPRB
   2272 PRH=0.0_JPRB
   2273 ZTW=0.0_JPRB
   2274 ZZI_UM=0.0_JPRB
   2275 ZZI_US=0.0_JPRB
   2276 ZZI_VM=0.0_JPRB
   2277 ZZI_VS=0.0_JPRB
   2278 ZZI_WM=0.0_JPRB
   2279 ZZI_THM=293._JPRB
   2280 ZZI_THS=0._JPRB
   2281 ZZI_THLS=0._JPRB
   2282 ZZI_MFUS=0._JPRB
   2283 ZZI_MFVS=0._JPRB
   2284 ZZI_RM=0.0_JPRB
   2285 ZZI_SVM=0.0_JPRB
   2286 ZZI_RHODREFM=1.0_JPRB
   2287 ZZI_RHO=1.0_JPRB
   2288 ZZI_PABSM=101325._JPRB
   2289 ZZZ=0.0_JPRB
   2290 ZSURFPREP=0.0_JPRB
   2291 ZSURFSNOW=0.0_JPRB
   2292 ZINPRR=0.0_JPRB
   2293 ZINPRS=0.0_JPRB
   2294 ZINPRG=0.0_JPRB
   2295 ZINPRH=0.0_JPRB
   2296 ZACPRR=0.0_JPRB
   2297 ZACPRS=0.0_JPRB
   2298 ZACPRG=0.0_JPRB
   2299 ZEVAP=0.0_JPRB
   2300 ZINPRR_NOTINCR=0.0_JPRB
   2301 ZINPRS_NOTINCR=0.0_JPRB
   2302 ZINPRG_NOTINCR=0.0_JPRB
   2303 ZINPRH_NOTINCR=0.0_JPRB
   2304 ZSFTH=0.0_JPRB
   2305 ZSFRV=0.0_JPRB
   2306 ZSFCO2=0.0_JPRB
   2307 ZEMIS=1.0_JPRB
   2308 ZQICE=0.0_JPRB
   2309 ZQLIQ=0.0_JPRB
   2310 ZQO3=0.0_JPRB
   2311 ZAER=0.0_JPRB
   2312 ZAERINDS=0.0_JPRB
   2313 ZAERD=0.0_JPRB

Page 43          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2314 ZPIZA_DST  = 0.0_JPRB
   2315 ZCGA_DST   = 0.0_JPRB
   2316 ZTAUREL_DST = 1E-12_JPRB
   2317 ZCARDI=0.0_JPRB
   2318 ZTENT=0.0_JPRB
   2319 ZTRSOD=0.0_JPRB
   2320 ZCEMTR=0.0_JPRB
   2321 ZCTRSO=0.0_JPRB
   2322 PFRSOC=0.0_JPRB
   2323 PFRTHC=0.0_JPRB
   2324 ZSUDU=0.0_JPRB   
   2325 ZSDUR=0.0_JPRB
   2326 ZDSRP=0.0_JPRB
   2327 ZALBD=0.0_JPRB
   2328 ZALBP=0.0_JPRB
   2329 ZALBD1=0.0_JPRB
   2330 ZALBP1=0.0_JPRB
   2331 ZZSFSWDIR=0.0_JPRB
   2332 ZZSFSWDIF=0.0_JPRB
   2333 ZTRSODIF=0.0_JPRB
   2334 ZTRSODIR=0.0_JPRB      
   2335 ZQV=0.0_JPRB
   2336 ZSFU=0.0_JPRB
   2337 ZSFV=0.0_JPRB
   2338 ZSFSV=0.0_JPRB
   2339 ZNEBMNH=0.0_JPRB
   2340 ZSRCS=0.0_JPRB
   2341 ZZI_MFM=0.0_JPRB
   2342 ZZI_MFS=0.0_JPRB
   2343 ZZI_SIGM=0.0_JPRB
   2344 ZZI_SIGS=0.0_JPRB
   2345 ZSIGMF=0.0_JPRB
   2346 ZRC_MF=0.0_JPRB
   2347 ZRI_MF=0.0_JPRB
   2348 ZCF_MF=0.0_JPRB
   2349 ZFLXZTHVMF=0.0_JPRB
   2350 ZFLXZTHVMF_SUM=0.0_JPRB
   2351 ZZI_SVS=0.0_JPRB
   2352 !
   2353 ! Variables used in case LHARATU=true
   2354 ZZI_LENGTHM=0.01_JPRB
   2355 ZZI_LENGTHH=0.01_JPRB
   2356 ZLENGTH_M=0.01_JPRB
   2357 ZLENGTH_H=0.01_JPRB
   2358 ZZI_PTKEEDMF=0._JPRB
   2359 ZZI_TKEEDMFS=0._JPRB
   2360 PTKEEDMF=0._JPRB
   2361 
   2362 PDIAGH=0._JPRB
   2363 PFRSOPS=0._JPRB
   2364 ZSLOPE=1.0_JPRB
   2365 !  IF LHARATU=TRUE
   2366 !  TKE at t-dt is needed as input for vdfexcuhl so fill PTKEEDMF with t-1 value
   2367 !  from PTKEM
   2368 IF (LHARATU) THEN
   2369  DO JLON = KIDIA, KFDIA
   2370   do jlev=1, klev

Page 44          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2371    PTKEEDMF(JLON,JLEV)=PTKEM(JLON,JLEV)
   2372    if (PTKEM(JLON,JLEV) > 3300._JPRB) then
   2373      WRITE (NULOUT,*) 'TKE > 3300 ! '
   2374    endif
   2375   enddo
   2376  ENDDO
   2377 ENDIF
   2378 
   2379 
   2380 !test TKE > 0.
   2381 IF (MINVAL(PTKEM(KIDIA:KFDIA,:)) <= 0._JPRB) THEN
   2382   CALL ABOR1('TKE < 0 under APL_AROME check YTKE_NL%NREQIN')
   2383 ENDIF
   2384 
   2385 !test invalid combinations
   2386 IF (LHARATU .AND. CMF_UPDRAFT == 'EDKF') THEN
   2387   CALL ABOR1('Combination LHARATU and EDKF not valid!')
   2388 ENDIF
   2389 
   2390 !initialisation of first useful field for EZDIAG use in Chemistry/Dust
   2391 IOFF_MFSHAL=1
   2392 IF(LFPREC3D) IOFF_MFSHAL=2
   2393 
   2394 DO JLEV = KTDIA, KLEV
   2395   DO JLON = KIDIA, KFDIA
   2396     ZCPM(JLON,JLEV)=PCPM(JLON,JLEV)
   2397   ENDDO
   2398 ENDDO
   2399 DO JCHA = 1, 6
   2400   DO JLEV = KTDIA, KLEV
   2401     DO JLON = KIDIA, KFDIA
   2402       ZAER(JLON,JLEV,JCHA)=0.0_JPRB
   2403     ENDDO
   2404   ENDDO
   2405 ENDDO
   2406 
   2407 ZINVG=1._JPRB/RG 
   2408 !    ------------------------------------------------------------------
   2409 !     2 - CHANGEMENTS DE VARIABLES ET INVERSION DES NIVEAUX
   2410 !     --------------------------------------------------------------------
   2411 IF (LMICRO.OR.LTURB.OR.LLMSE.OR.LKFBCONV) THEN
   2412 
   2413 !initialisation de ZZZ
   2414   DO JLEV = 1,KLEV
   2415     DO JLON = KIDIA,KFDIA
   2416       ZZZ(JLON,1,JLEV)=ZZI_APHIM(JLON,JLEV)*ZINVG
   2417       ZZZF(JLON,1,JLEV)=ZZI_APHIFM(JLON,JLEV)*ZINVG
   2418     ENDDO
   2419   ENDDO
   2420    
   2421 !initialisation de qdm (utile localement pour calculer rho
   2422 !et convertir q en r
   2423   DO JLEV=1,KLEV
   2424     DO JLON= KIDIA, KFDIA
   2425       ZQDM(JLON,JLEV)=1._JPRB-ZQVM(JLON,JLEV)-ZQCM(JLON,JLEV)-ZQRM(JLON,JLEV)&
   2426        & -ZQIM(JLON,JLEV)-ZQSM(JLON,JLEV)-ZQGM(JLON,JLEV)-ZQHM(JLON,JLEV)   
   2427     ENDDO

Page 45          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2428   ENDDO
   2429    
   2430 !initialisation de ZZI_RHODREFM (=qd*zrho)
   2431   DO JLEV = 1, KLEV
   2432     DO JLON = KIDIA,KFDIA
   2433       ZZI_RHO(JLON,1,JLEV)=PAPRSFM(JLON,JLEV)/&
   2434        & (PRM(JLON,JLEV)*ZTM(JLON,JLEV))
   2435       ZZI_RHODREFM(JLON,1,JLEV)=ZZI_RHO(JLON,1,JLEV)*ZQDM(JLON,JLEV)
   2436       ZZI_RHODJM(JLON,1,JLEV)=PDELPM(JLON,JLEV)*ZINVG
   2437     ENDDO
   2438   ENDDO
   2439 
   2440 !initialisation de ZZI_EXNREFM
   2441   ZRSCP=RD/RCPD
   2442   ZINVATM=1/RATM
   2443   DO JLEV = 1, KLEV
   2444     DO JLON = KIDIA,KFDIA
   2445       ZZI_EXNREFM(JLON,1,JLEV)=(PAPRSFM(JLON,JLEV)*ZINVATM)**(ZRSCP)
   2446     ENDDO
   2447   ENDDO
   2448    
   2449 !initialisation de ZZI_PABSM
   2450   DO JLON = KIDIA,KFDIA
   2451     DO JLEV = 1, KLEV 
   2452       ZZI_PABSM(JLON,1,JLEV)=PAPRSFM(JLON,JLEV)
   2453     ENDDO
   2454   ENDDO
   2455 
   2456 ! vent horizontal et TKE
   2457   DO JLEV = 1, KLEV 
   2458     DO JLON = KIDIA,KFDIA
   2459       ZZI_UM(JLON,1,JLEV)= PUM(JLON,JLEV)
   2460       ZZI_VM(JLON,1,JLEV)= PVM(JLON,JLEV)
   2461       ZZI_WM(JLON,1,JLEV)= PWM(JLON,JLEV)
   2462       ZZI_TKEM(JLON,1,JLEV)= PTKEM(JLON,JLEV)
   2463     ENDDO
   2464   ENDDO
   2465 !initialise sigma for subgrid condensation comming
   2466 !from previous time step turbulence scheme
   2467   IF (LOSIGMAS) THEN
   2468     DO JLEV = 1, KLEV 
   2469       DO JLON = KIDIA,KFDIA
   2470         ZZI_SIGM(JLON,1,JLEV)= PSIGM(JLON,JLEV)
   2471       ENDDO
   2472     ENDDO
   2473   ENDIF
   2474 !initialise convective mas flux for subgrid condensation comming
   2475 !from previous time step convection scheme
   2476   IF ( LKFBCONV.AND.LOSUBG_COND.AND..NOT.LOSIGMAS) THEN
   2477     DO JLEV = 1, KLEV 
   2478       DO JLON = KIDIA,KFDIA
   2479         ZZI_MFM(JLON,1,JLEV)=PSIGM(JLON,JLEV) 
   2480       ENDDO
   2481     ENDDO
   2482   ENDIF
   2483 !!! initialisation des variables d etat MNH �t
   2484 

Page 46          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2485 !initialisation de ZZI_THM
   2486   DO JLEV = 1, KLEV 
   2487     DO JLON = KIDIA,KFDIA
   2488       ZZI_THM(JLON,1,JLEV)=ZTM(JLON,JLEV)/ZZI_EXNREFM(JLON,1,JLEV)
   2489     ENDDO
   2490   ENDDO
   2491 
   2492 !initialisation de ZZI_RM pour les hydrometeores (ri=qi/qd)
   2493   DO JLEV = 1, KLEV
   2494     DO JLON = KIDIA,KFDIA
   2495       ZZI_RM(JLON,1,JLEV,1)=ZQVM(JLON,JLEV)&
   2496        & /ZQDM(JLON,JLEV)  
   2497     ENDDO
   2498   ENDDO
   2499    
   2500   DO JLEV = 1, KLEV
   2501     DO JLON = KIDIA,KFDIA
   2502       ZZI_RM(JLON,1,JLEV,2)=ZQCM(JLON,JLEV)&
   2503        & /ZQDM(JLON,JLEV)  
   2504     ENDDO
   2505   ENDDO
   2506    
   2507   DO JLEV = 1, KLEV
   2508     DO JLON = KIDIA,KFDIA
   2509       ZZI_RM(JLON,1,JLEV,3)=ZQRM(JLON,JLEV)&
   2510        & /ZQDM(JLON,JLEV)  
   2511     ENDDO
   2512   ENDDO
   2513    
   2514   DO JLEV = 1, KLEV
   2515     DO JLON = KIDIA,KFDIA
   2516       ZZI_RM(JLON,1,JLEV,4)=ZQIM(JLON,JLEV)&
   2517        & /ZQDM(JLON,JLEV)  
   2518     ENDDO
   2519   ENDDO
   2520    
   2521   DO JLEV = 1, KLEV
   2522     DO JLON = KIDIA,KFDIA
   2523       ZZI_RM(JLON,1,JLEV,5)=ZQSM(JLON,JLEV)&
   2524        & /ZQDM(JLON,JLEV)  
   2525     ENDDO
   2526   ENDDO
   2527    
   2528   DO JLEV = 1, KLEV
   2529     DO JLON = KIDIA,KFDIA
   2530       ZZI_RM(JLON,1,JLEV,6)=ZQGM(JLON,JLEV)&
   2531        & /ZQDM(JLON,JLEV)  
   2532     ENDDO
   2533   ENDDO
   2534   
   2535   IF (NRR==7) THEN
   2536     DO JLEV = 1, KLEV
   2537       DO JLON = KIDIA,KFDIA
   2538         ZZI_RM(JLON,1,JLEV,7)=ZQHM(JLON,JLEV)&
   2539          & /ZQDM(JLON,JLEV)  
   2540       ENDDO
   2541     ENDDO

Page 47          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2542   ENDIF
   2543    
   2544   IF (NRR==6) THEN
   2545 !initialisation de ZTHVREFM
   2546     DO JLEV = 1, KLEV 
   2547       DO JLON = KIDIA,KFDIA
   2548         ZTHVREFM(JLON,1,JLEV)=ZZI_THM(JLON,1,JLEV)*&
   2549          & (1._JPRB+ZZI_RM(JLON,1,JLEV,1)*(RV/RD))/&
   2550          & (1._JPRB+ZZI_RM(JLON,1,JLEV,1)+ZZI_RM(JLON,1,JLEV,2) +&
   2551          & ZZI_RM(JLON,1,JLEV,3)+ZZI_RM(JLON,1,JLEV,4)+&
   2552          & ZZI_RM(JLON,1,JLEV,5)+ZZI_RM(JLON,1,JLEV,6))
   2553       ENDDO
   2554     ENDDO
   2555   ELSEIF (NRR==7) THEN
   2556     DO JLEV = 1, KLEV 
   2557       DO JLON = KIDIA,KFDIA
   2558         ZTHVREFM(JLON,1,JLEV)=ZZI_THM(JLON,1,JLEV)*&
   2559          & (1._JPRB+ZZI_RM(JLON,1,JLEV,1)*(RV/RD))/&
   2560          & (1._JPRB+ZZI_RM(JLON,1,JLEV,1)+ZZI_RM(JLON,1,JLEV,2) +&
   2561          & ZZI_RM(JLON,1,JLEV,3)+ZZI_RM(JLON,1,JLEV,4)+&
   2562          & ZZI_RM(JLON,1,JLEV,5)+ZZI_RM(JLON,1,JLEV,6)+&
   2563          &  ZZI_RM(JLON,1,JLEV,7) )
   2564       ENDDO
   2565     ENDDO
   2566   ENDIF
   2567 !initialisation des scalaires passifs
   2568   IF (NGFL_EXT/=0) THEN
   2569     DO JGFL=1,NGFL_EXT
   2570       DO JLEV = 1, KLEV
   2571         DO JLON=KIDIA,KFDIA
   2572           ZZI_SVM(JLON,1,JLEV,JGFL)=PSVM(JLON,JLEV,JGFL)
   2573         ENDDO
   2574       ENDDO
   2575     ENDDO
   2576 
   2577   ENDIF
   2578 
   2579 !!! initialisation des variables d etat MNH a t+dt
   2580 !!! division pas le pas de temps
   2581 !!!(la multiplication par rhodj est faite plus tard, si necessaire,
   2582 !!! suivant les parametrisations)
   2583 
   2584 ! vent horizontal
   2585   DO JLEV = 1, KLEV 
   2586     DO JLON=KIDIA,KFDIA
   2587       ZZI_US(JLON,1,JLEV)= PUM(JLON,JLEV)*ZINVDT
   2588       ZZI_VS(JLON,1,JLEV)= PVM(JLON,JLEV)*ZINVDT
   2589       ZZI_WS(JLON,1,JLEV)= PWM(JLON,JLEV)*ZINVDT
   2590       ZZI_TKES(JLON,1,JLEV)= PTKEM(JLON,JLEV)*ZINVDT
   2591     ENDDO
   2592   ENDDO
   2593 
   2594 !initialisation de ZZI_THS
   2595   DO JLEV = 1, KLEV
   2596     DO JLON = KIDIA,KFDIA
   2597       ZZI_THS(JLON,1,JLEV)=ZZI_THM(JLON,1,JLEV)*ZINVDT
   2598     ENDDO

Page 48          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2599   ENDDO
   2600 
   2601 !initialisation de ZZI_RS pour les hydrometeores
   2602   DO JRR=1,NRR 
   2603     DO JLEV = 1, KLEV
   2604       DO JLON=KIDIA,KFDIA
   2605         ZZI_RS(JLON,1,JLEV,JRR)=ZZI_RM(JLON,1,JLEV,JRR)*ZINVDT
   2606       ENDDO
   2607     ENDDO
   2608   ENDDO
   2609 
   2610 !!! Initialisations temporaires d'arguments non-utilises
   2611 !initialisation de ZCIT
   2612   DO JLEV = 1 , IKT
   2613     DO JLON = KIDIA,KFDIA
   2614       ZCIT(JLON,1,JLEV)=0.0_JPRB
   2615     ENDDO
   2616   ENDDO
   2617   
   2618 !initialisation des tableaux de precipitations inst. and cumulated
   2619 !and surface fluxes for turbulence
   2620   IF(LLMSE.OR.LSFORCS) THEN
   2621     DO JLON = KIDIA,KFDIA
   2622       ZACPRR(JLON,1)=PGPAR(JLON,MACPRR)
   2623       ZACPRS(JLON,1)=PGPAR(JLON,MACPRS)
   2624       ZACPRG(JLON,1)=PGPAR(JLON,MACPRG)
   2625       ZINPRR_NOTINCR(JLON,1)=PGPAR(JLON,MINPRR)
   2626       ZINPRS_NOTINCR(JLON,1)=PGPAR(JLON,MINPRS)
   2627       ZINPRG_NOTINCR(JLON,1)=PGPAR(JLON,MINPRG)
   2628     ENDDO
   2629   ENDIF
   2630 !initialisation des scalaires passifs
   2631   IF (NGFL_EXT/=0) THEN
   2632    DO JGFL=1,NGFL_EXT
   2633     DO JLEV = 1, KLEV
   2634       DO JLON=KIDIA,KFDIA
   2635         ZZI_SVS(JLON,1,JLEV,JGFL)=ZZI_SVM(JLON,1,JLEV,JGFL)*ZINVDT
   2636       ENDDO
   2637     ENDDO
   2638    ENDDO
   2639   ENDIF
   2640 
   2641 ENDIF
   2642 
   2643 ! daand: radflex
   2644 ZFRSO => PFRSO(:,:,1)
   2645 ZFRTH => PFRTH(:,:,1)
   2646 
   2647 !    ------------------------------------------------------------------
   2648 !     3 - PRINTS FOR DIAGNOSTICS IF NEEDED
   2649 !    ------------------------------------------------------------------
   2650 IF (LDIAGWMAX) THEN
   2651   IF (MOD(KSTEP+1,NDIAGWMAX)==0) THEN
   2652 ! calcul de wmax
   2653     DO JLEV = 1 , KLEV
   2654       Z_WMAX=0._JPRB
   2655       Z_WMIN=0._JPRB

Page 49          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2656       DO JLON=KIDIA,KFDIA
   2657         IF (PWM(JLON,JLEV)>Z_WMAX) THEN
   2658           Z_WMAX=PWM(JLON,JLEV)
   2659         ENDIF
   2660         IF (PWM(JLON,JLEV)<Z_WMIN) THEN
   2661           Z_WMIN=PWM(JLON,JLEV)
   2662         ENDIF
   2663       ENDDO
   2664     ENDDO
   2665   ENDIF
   2666 ENDIF
   2667 
   2668   ZZI_THSAVE(:,:,:)=ZZI_THS(:,:,:)
   2669   ZZI_RSAVE=ZZI_RS
   2670 
   2671 !    ------------------------------------------------------------------
   2672 !     4 - ADJUSTMENT (CALLED IF THE MICROPHYSICS IS SWITCH ON)
   2673 !    ------------------------------------------------------------------
   2674 IF (LMICRO) THEN
   2675 
   2676 IF (LMFSHAL .AND. (CMF_CLOUD=='DIRE'.OR.CMF_CLOUD=='BIGA')) THEN
   2677   IOFF_MFSHAL=IOFF_MFSHAL+3
   2678   IF (KSTEP==0) THEN
   2679      ZRC_MF=0.
   2680      ZRI_MF=0.
   2681      ZCF_MF=0.
   2682   ELSE
   2683   DO JLEV = 1, KLEV 
   2684     DO JLON = KIDIA,KFDIA
   2685       ZRC_MF(JLON,1,JLEV)=PEZDIAG(JLON,JLEV,1)
   2686       ZRI_MF(JLON,1,JLEV)=PEZDIAG(JLON,JLEV,3)
   2687       ZCF_MF(JLON,1,JLEV)=PEZDIAG(JLON,JLEV,2)
   2688     ENDDO
   2689   ENDDO
   2690   ENDIF
   2691 PEZDIAG(:,:,1)=0._JPRB
   2692 PEZDIAG(:,:,2)=0._JPRB
   2693 PEZDIAG(:,:,3)=0._JPRB
   2694 ENDIF
   2695 
   2696   IF (MOD(KSTEP+1,NPRINTFR)==0) THEN
   2697     WRITE(NULOUT,*)'avant aro_adjust sous apl_arome'
   2698     WRITE(NULOUT,*)'JLEV   ZZZF   RHODJM   EXNREFM   ',&
   2699      & '    PABSM       THM      SIGM         MFM    '   
   2700     DO JLEV=1,KLEV+1 
   2701       WRITE(NULOUT,'(I2,x,7f10.3)')JLEV,ZZZF(NPTP,1,JLEV),ZZI_RHODJM(NPTP,1,JLEV),&
   2702        & ZZI_EXNREFM(NPTP,1,JLEV),&
   2703        & ZZI_PABSM(NPTP,1,JLEV), ZZI_THM(NPTP,1,JLEV), ZZI_SIGM(NPTP,1,JLEV),&
   2704        & ZZI_MFM(NPTP,1,JLEV)  
   2705     ENDDO 
   2706     WRITE (NULOUT,*)'JLEV  rhoQv  rhoQc   rhoQr   rhoQi   rhoQs   rhoQg'
   2707     DO JLEV=1,KLEV
   2708       WRITE(NULOUT,'(I2,x,6e11.4)')JLEV,ZZI_RM(NPTP,1,JLEV,1),&
   2709        & ZZI_RM(NPTP,1,JLEV,2),&
   2710        & ZZI_RM(NPTP,1,JLEV,3),ZZI_RM(NPTP,1,JLEV,4),ZZI_RM(NPTP,1,JLEV,5),&
   2711        & ZZI_RM(NPTP,1,JLEV,6)  
   2712     ENDDO

Page 50          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2713     WRITE (NULOUT,*)'JLEV  ZRC_MF  ZRI_MF  ZCF_MF ZZI_THS  ZSRCS ZNEBMNH'
   2714    DO JLEV=1,KLEV
   2715       WRITE(NULOUT,'(I2,x,6e11.4)')JLEV,ZRC_MF(NPTP,1,JLEV),&
   2716        & ZRI_MF(NPTP,1,JLEV),ZCF_MF(NPTP,1,JLEV),&
   2717        & ZZI_THS(NPTP,1,JLEV),ZSRCS(NPTP,1,JLEV),&
   2718        & ZNEBMNH(NPTP,1,JLEV)
   2719    ENDDO
   2720   ENDIF
   2721   CALL ARO_ADJUST (KLEV,IKU,IKL,ILONMNH,KLEV,NRR,KSTEP+1,&
   2722    & LOSUBG_COND, LOSIGMAS, LOCND2, &
   2723    & ZDT,VSIGQSAT,ZZZF(KIDIA:KFDIA,:,1:KLEV),&
   2724    & ZZI_RHODJM(KIDIA:KFDIA,:,1:KLEV),&
   2725    & ZZI_EXNREFM(KIDIA:KFDIA,:,1:KLEV),&
   2726    & ZZI_PABSM(KIDIA:KFDIA,:,1:KLEV),&
   2727    & ZZI_THM(KIDIA:KFDIA,:,1:KLEV),&
   2728    & ZZI_RM(KIDIA:KFDIA,:,1:KLEV,:),ZZI_SIGM(KIDIA:KFDIA,:,1:KLEV),&
   2729    & ZZI_MFM(KIDIA:KFDIA,:,1:KLEV),ZRC_MF(KIDIA:KFDIA,:,1:KLEV),&
   2730    & ZRI_MF(KIDIA:KFDIA,:,1:KLEV),ZCF_MF(KIDIA:KFDIA,:,1:KLEV),&
   2731    & ZZI_THS(KIDIA:KFDIA,:,1:KLEV),ZZI_RS(KIDIA:KFDIA,:,1:KLEV,:),&
   2732    & ZSRCS(KIDIA:KFDIA,:,1:KLEV),ZNEBMNH(KIDIA:KFDIA,:,1:KLEV),YDDDH)  
   2733   
   2734   IF (MOD(KSTEP+1,NPRINTFR)==0) THEN
   2735     WRITE(NULOUT,*)'apres aro_adjust sous apl_arome'
   2736     WRITE(NULOUT,*)'JLEV   ZZZF   RHODJM   EXNREFM   ',&
   2737      & '    PABSM       THM      SIGM         MFM    '   
   2738     DO JLEV=1,KLEV+1 
   2739       WRITE(NULOUT,'(I2,x,7f10.3)')JLEV,ZZZF(NPTP,1,JLEV),ZZI_RHODJM(NPTP,1,JLEV),&
   2740        & ZZI_EXNREFM(NPTP,1,JLEV),&
   2741        & ZZI_PABSM(NPTP,1,JLEV), ZZI_THM(NPTP,1,JLEV), ZZI_SIGM(NPTP,1,JLEV),&
   2742        & ZZI_MFM(NPTP,1,JLEV)  
   2743     ENDDO 
   2744     WRITE (NULOUT,*)'JLEV  rhoQv  rhoQc   rhoQr   rhoQi   rhoQs   rhoQg'
   2745     DO JLEV=1,KLEV
   2746       WRITE(NULOUT,'(I2,x,6e11.4)')JLEV,ZZI_RS(NPTP,1,JLEV,1),&
   2747        & ZZI_RS(NPTP,1,JLEV,2),&
   2748        & ZZI_RS(NPTP,1,JLEV,3),ZZI_RS(NPTP,1,JLEV,4),ZZI_RS(NPTP,1,JLEV,5),&
   2749        & ZZI_RS(NPTP,1,JLEV,6)  
   2750     ENDDO
   2751     WRITE (NULOUT,*)'JLEV  ZRC_MF  ZRI_MF  ZCF_MF ZZI_THS ZSRCS ZNEBMNH'
   2752    DO JLEV=1,KLEV
   2753       WRITE(NULOUT,'(I2,x,6e11.4)')JLEV,ZRC_MF(NPTP,1,JLEV),&
   2754        & ZRI_MF(NPTP,1,JLEV),ZCF_MF(NPTP,1,JLEV),&
   2755        & ZZI_THS(NPTP,1,JLEV),ZSRCS(NPTP,1,JLEV),&
   2756        & ZNEBMNH(NPTP,1,JLEV)
   2757    ENDDO
   2758   ENDIF
   2759 !adjusted zthm and zrm
   2760   DO JLEV = 1, KLEV
   2761     DO JLON = KIDIA,KFDIA
   2762       ZZI_THM(JLON,1,JLEV)=ZZI_THS(JLON,1,JLEV)*PDT
   2763     ENDDO
   2764   ENDDO
   2765 
   2766   DO JRR=1,NRR
   2767     DO JLEV = 1, KLEV
   2768       DO JLON = KIDIA,KFDIA
   2769         ZZI_RM(JLON,1,JLEV,JRR)=ZZI_RS(JLON,1,JLEV,JRR)*PDT

Page 51          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2770       ENDDO
   2771     ENDDO
   2772   ENDDO
   2773 
   2774 !initialisation de qdm utile pour
   2775 !convertir tendance de r en tendance de q
   2776   IF (NRR==6) THEN
   2777     DO JLEV=1,KLEV
   2778       DO JLON= KIDIA, KFDIA
   2779         ZQDM(JLON,JLEV)=1._JPRB/(1._JPRB+ZZI_RM(JLON,1,JLEV,1)+&
   2780         &ZZI_RM(JLON,1,JLEV,2)+ZZI_RM(JLON,1,JLEV,3)+&
   2781         &ZZI_RM(JLON,1,JLEV,4)+ZZI_RM(JLON,1,JLEV,5)+&
   2782         &ZZI_RM(JLON,1,JLEV,6) )
   2783       ENDDO
   2784     ENDDO
   2785   ELSEIF (NRR==7) THEN
   2786     DO JLEV=1,KLEV
   2787       DO JLON= KIDIA, KFDIA
   2788         ZQDM(JLON,JLEV)=1._JPRB/(1._JPRB+ZZI_RM(JLON,1,JLEV,1)+&
   2789         &ZZI_RM(JLON,1,JLEV,2)+ZZI_RM(JLON,1,JLEV,3)+&
   2790         &ZZI_RM(JLON,1,JLEV,4)+ZZI_RM(JLON,1,JLEV,5)+&
   2791         &ZZI_RM(JLON,1,JLEV,6)+ZZI_RM(JLON,1,JLEV,7) )
   2792       ENDDO
   2793     ENDDO
   2794   ENDIF 
   2795 !reinitialisation des qi
   2796   DO JLEV = 1, KLEV
   2797     DO JLON = KIDIA,KFDIA
   2798       ZQVM(JLON,JLEV)=ZZI_RM(JLON,1,JLEV,1)*ZQDM(JLON,JLEV)
   2799       ZQCM(JLON,JLEV)=ZZI_RM(JLON,1,JLEV,2)*ZQDM(JLON,JLEV)
   2800       ZQRM(JLON,JLEV)=ZZI_RM(JLON,1,JLEV,3)*ZQDM(JLON,JLEV)
   2801       ZQIM(JLON,JLEV)=ZZI_RM(JLON,1,JLEV,4)*ZQDM(JLON,JLEV)
   2802       ZQSM(JLON,JLEV)=ZZI_RM(JLON,1,JLEV,5)*ZQDM(JLON,JLEV)
   2803       ZQGM(JLON,JLEV)=ZZI_RM(JLON,1,JLEV,6)*ZQDM(JLON,JLEV)
   2804     ENDDO
   2805   ENDDO
   2806 
   2807   IF (NRR==7) THEN
   2808     DO JLEV = 1,KLEV
   2809       DO JLON = KIDIA,KFDIA
   2810         ZQHM(JLON,JLEV)=ZZI_RM(JLON,1,JLEV,7)*ZQDM(JLON,JLEV)
   2811       ENDDO
   2812     ENDDO
   2813   ENDIF
   2814         
   2815 !modif de R et CP
   2816   ZQHGM(KIDIA:KFDIA,:)=ZQHM(KIDIA:KFDIA,:)+ZQGM(KIDIA:KFDIA,:)
   2817   CALL GPRCP(KLON,KIDIA,KFDIA,KLEV,&
   2818    & PQ=ZQVM,PQI=ZQIM,PQL=ZQCM,&
   2819    & PQR=ZQRM,PQS=ZQSM,PQG=ZQHGM,&
   2820    & PCP=ZCPM,PR=ZRHM,PKAP=ZKAPM)  
   2821 
   2822   DO JLEV = 1,KLEV
   2823     DO JLON = KIDIA,KFDIA
   2824       ZTM(JLON,JLEV)=ZZI_THM(JLON,1,JLEV)*ZZI_EXNREFM(JLON,1,JLEV)
   2825     ENDDO
   2826   ENDDO

Page 52          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2827 
   2828 !reinitialisation de ZZI_RHODREFM (=qd*zrho)
   2829   DO JLEV = 1, KLEV 
   2830     DO JLON = KIDIA,KFDIA
   2831       ZZI_RHO(JLON,1,JLEV)=PAPRSFM(JLON,JLEV)/&
   2832        & (ZRHM(JLON,JLEV)*ZTM(JLON,JLEV))
   2833       ZZI_RHODREFM(JLON,1,JLEV)=ZZI_RHO(JLON,1,JLEV)*ZQDM(JLON,JLEV)
   2834     ENDDO
   2835   ENDDO
   2836 
   2837 !geopotentiel calculation
   2838  
   2839   CALL GPGEO(KLON,KIDIA,KFDIA,KLEV,ZZI_APHIM,ZZI_APHIFM,ZTM,ZRHM,PLNPRM,PALPHM)
   2840    
   2841 !calcul de l'altitude
   2842   DO JLEV = 1, KLEV
   2843     DO JLON = KIDIA,KFDIA
   2844       ZZZ(JLON,1,JLEV)=ZZI_APHIM(JLON,JLEV)*ZINVG
   2845     ENDDO
   2846   ENDDO
   2847   
   2848 !initialisation de ZZZF
   2849   DO JLEV = 1, KLEV 
   2850     DO JLON = KIDIA,KFDIA
   2851       ZZZF(JLON,1,JLEV)=ZZI_APHIFM(JLON,JLEV)*ZINVG
   2852     ENDDO
   2853   ENDDO
   2854 
   2855 !initialisation de ZDZZ
   2856   DO JLEV = 2, KLEV
   2857     DO JLON = KIDIA,KFDIA
   2858       ZDZZ(JLON,1,JLEV)=ZZZ(JLON,1,JLEV+IKL)-ZZZ(JLON,1,JLEV)
   2859     ENDDO
   2860   ENDDO
   2861   DO JLEV = 1, KLEV-1
   2862     DO JLON = KIDIA,KFDIA
   2863       ZDZZF(JLON,1,JLEV)=ZZZF(JLON,1,JLEV)-ZZZF(JLON,1,JLEV-IKL)
   2864     ENDDO
   2865   ENDDO
   2866   DO JLON = KIDIA,KFDIA
   2867       ZDZZF(JLON,1,KLEV)=ZZZF(JLON,1,KLEV)-POROG(JLON)*ZINVG
   2868       ZDZZ(JLON,1,1)=ZZI_APHIM(JLON,0)*ZINVG-ZZZ(JLON,1,1)
   2869   ENDDO
   2870 
   2871 ENDIF
   2872 !END ADJUSTMENT LMICRO
   2873 
   2874 !initialisation of PCLFS outside LMICRO to be zero in case LMICRO=F
   2875 DO JLEV=1,KLEV
   2876   DO JLON = KIDIA,KFDIA
   2877     PCLFS(JLON,JLEV)=ZNEBMNH(JLON,1,JLEV) 
   2878   ENDDO
   2879 ENDDO
   2880 
   2881 !compute temperature tendency
   2882   IF (LFLEXDIA) ZTENDBKP(:,:)=PTENDT(:,:)
   2883 

Page 53          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2884   DO JLEV = 1,KLEV
   2885     DO JLON = KIDIA,KFDIA
   2886       PTENDT(JLON,JLEV)=PTENDT(JLON,JLEV)+(ZZI_THS(JLON,1,JLEV)-&
   2887        & ZZI_THSAVE(JLON,1,JLEV))*ZZI_EXNREFM(JLON,1,JLEV)
   2888     ENDDO
   2889   ENDDO
   2890 
   2891   IF (LFLEXDIA) THEN
   2892     ZTMPAF(:,:)=(PTENDT(:,:)-ZTENDBKP(:,:))*PDELPM(:,:)*ZINVG*ZCPM(:,:)
   2893     IF (LDDH_OMP) THEN
   2894       CALL NEW_ADD_FIELD_3D(ZTMPAF,'TCTADJU',YDDDH)
   2895     ELSE
   2896       CALL ADD_FIELD_3D(ZTMPAF(:,:),'TCTADJU','T','ARP',.TRUE.,.TRUE.)
   2897     ENDIF
   2898   ENDIF
   2899 
   2900 !inversion niveaux tendances des ri et conversion en qi en multipliant par qd
   2901   DO JR=1,NRR
   2902     IF (LFLEXDIA) ZTENDBKP(:,:)=PTENDR(:,:,JR)
   2903     DO JLEV=1,KLEV
   2904       DO JLON=KIDIA,KFDIA
   2905         PTENDR(JLON,JLEV,JR)=PTENDR(JLON,JLEV,JR)&
   2906          & +(ZZI_RS(JLON,1,JLEV,JR)&
   2907          & -ZZI_RSAVE(JLON,1,JLEV,JR))*ZQDM(JLON,JLEV)
   2908       ENDDO
   2909     ENDDO
   2910 
   2911     IF (LFLEXDIA) THEN
   2912       CLNAME='T'//CLVARNAME(JR)//'ADJU'
   2913       ZTMPAF(:,:)=(PTENDR(:,:,JR)-ZTENDBKP(:,:))*PDELPM(:,:)*ZINVG
   2914       IF (LDDH_OMP) THEN
   2915         CALL NEW_ADD_FIELD_3D(ZTMPAF,CLNAME,YDDDH)
   2916       ELSE
   2917         CALL ADD_FIELD_3D(ZTMPAF(:,:),CLNAME,'T','ARP',.TRUE.,.TRUE.)
   2918       ENDIF
   2919       ZTMPAF(:,:)=PCLFS(:,:)*PDELPM(:,:)
   2920       IF (LDDH_OMP) THEN
   2921         CALL NEW_ADD_FIELD_3D(ZTMPAF,'VNT',YDDDH)
   2922       ELSE
   2923         CALL ADD_FIELD_3D(ZTMPAF,'VNT','V','ARP',.TRUE.,.TRUE.)
   2924       ENDIF
   2925     ENDIF
   2926   ENDDO
   2927 
   2928 ! specific to new data flow for diagnostics
   2929 
   2930 IF (LFLEXDIA) THEN
   2931   IF (LDDH_OMP) THEN
   2932    ZEXNREFM(:,:)=ZZI_EXNREFM(:,1,:)
   2933    ZCON1(KIDIA:KFDIA,:) = 1.0_JPRB
   2934    ZCON2(KIDIA:KFDIA,:) = ZQDM(KIDIA:KFDIA,:)
   2935    ZCON3(KIDIA:KFDIA,:) = PCPM(KIDIA:KFDIA,:)*ZEXNREFM(KIDIA:KFDIA,:)
   2936    CALL ARO_SUINTBUDGET_OMP(KLON,KLEV,KSTEP,ZCON1,ZCON2,ZCON3,YDDDH)
   2937  ELSE
   2938    CALL ARO_SUINTBUDGET(KLON,KLEV,KSTEP,KFDIA,ZQDM,ZZI_EXNREFM,PCPM)
   2939  ENDIF
   2940 ENDIF

Page 54          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2941 
   2942 !     --------------------------------------------------------------------
   2943 !     5 - COMPUTE DUST PROPERTIES FOR RADIATION IF LRDUST=T
   2944 !     --------------------------------------------------------------------
   2945 IF (LRDUST) THEN
   2946   PEZDIAG(:,:,IOFF_MFSHAL:NGFL_EZDIAG)=0.0_JPRB
   2947 ! input dust scalar concentration in ppp from
   2948  IEZDIAG_CHEM=NGFL_EZDIAG-IOFF_MFSHAL+1
   2949 
   2950   ZZI_SVSAVE=ZZI_SVM
   2951 ! input dust scalar concentration in ppp from
   2952  CALL ARO_MNHDUST (IKL,ILONMNH,KLEV,NGFL_EXT, PDT,&
   2953         &          ZZI_SVM(KIDIA:KFDIA,:,:,1:NGFL_EXT),&
   2954         &          ZZZ(KIDIA:KFDIA,:,:),&
   2955         &          ZDZZ(KIDIA:KFDIA,:,:),&
   2956         &          ZZI_PABSM(KIDIA:KFDIA,:,:),&
   2957         &          ZZI_THM(KIDIA:KFDIA,:,:),&
   2958         &          ZZI_RHODREFM(KIDIA:KFDIA,:,:),&
   2959         &          NSWB_MNH,&
   2960         &          KSTEP+1,&
   2961         &          ZPIZA_DST(KIDIA:KFDIA,:,:),&
   2962         &          ZCGA_DST(KIDIA:KFDIA,:,:),&
   2963         &          ZTAUREL_DST(KIDIA:KFDIA,:,:),&
   2964         &          ZAERD(KIDIA:KFDIA,:),&
   2965         &          IEZDIAG_CHEM,&
   2966         &          ZZI_PEZDIAG(KIDIA:KFDIA,:,IOFF_MFSHAL:NGFL_EZDIAG)           )
   2967 
   2968 PEZDIAG(KIDIA:KFDIA,:,IOFF_MFSHAL:NGFL_EZDIAG)=ZZI_PEZDIAG(KIDIA:KFDIA,:,IOFF_MFSHAL:NGFL_EZDIAG)
   2969 
   2970 ! return to tendency
   2971      DO JGFL=1, NGFL_EXT
   2972        DO JLEV = 1,KLEV
   2973          DO JLON = KIDIA,KFDIA
   2974            PTENDEXT(JLON,JLEV,JGFL)=PTENDEXT(JLON,JLEV,JGFL)+&
   2975          & (ZZI_SVM(JLON,1,JLEV,JGFL)-&
   2976          & ZZI_SVSAVE(JLON,1,JLEV,JGFL))*ZINVDT
   2977          ENDDO
   2978        ENDDO
   2979      ENDDO
   2980 ENDIF
   2981 
   2982 IF (LSFORCS) THEN   ! <== Surface forcing for MUSC
   2983   DO JLON=KIDIA,KFDIA
   2984     ZTSURF(JLON) = PTM(JLON,KLEV)
   2985     ZTN(JLON)    = PTM(JLON,KLEV)
   2986     ZQS(JLON)    = PQVM(JLON,KLEV)
   2987     ZRHODREFM(JLON) = PAPRSFM(JLON,KLEV)/(PTM(JLON,KLEV)*PRM(JLON,KLEV))
   2988     ZTHETAS(JLON)   = ZTSURF(JLON)*(RATM/PAPRSM(JLON,KLEV))**RKAPPA
   2989   ENDDO
   2990 
   2991   LLAROME=.TRUE.
   2992   CALL SURF_IDEAL_FLUX(LLAROME, KIDIA , KFDIA  , KLON, PAPHIFM(:,KLEV), ZRHODREFM, PSFORC,&
   2993   &       ZTN,ZTSURF,PLSM,PQVM(:,KLEV), PUM(:,KLEV), PVM(:,KLEV), ZTHETAS, ZSFTH(KIDIA:KFDIA,1),&
   2994   &       ZSFRV(KIDIA:KFDIA,1), ZSFU(KIDIA:KFDIA,1), ZSFV(KIDIA:KFDIA,1))
   2995 
   2996 !* Compute PBL-diagnostics
   2997    

Page 55          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   2998    CALL AROCLDIA(KIDIA,KFDIA,ILONMNH,KLEV,PUCLS(KIDIA:KFDIA),&
   2999     & PVCLS(KIDIA:KFDIA),PTKEM(KIDIA:KFDIA,1:KLEV),&
   3000     & PAPHIFM(KIDIA:KFDIA,1:KLEV),POROG(KIDIA:KFDIA),&
   3001     & PUGST(KIDIA:KFDIA),PVGST(KIDIA:KFDIA),PPBLH(KIDIA:KFDIA),ICLPH)
   3002    PPBLH(:)=MIN(XMAXLM,MAX(XMINLM,PPBLH(:))) 
   3003 
   3004 ENDIF    ! <== End of surface forcing for MUSC
   3005 
   3006 !     --------------------------------------------------------------------
   3007 !     6 - RADIATION LRAYFM (IFS) or LRAY (ACRANEB2)
   3008 !     --------------------------------------------------------------------
   3009 IF (LRAYFM.OR.LRAY) THEN
   3010 ! prepare some input for both radiation schemes at every time step
   3011 
   3012 ! test de coherence sur le nombre de bandes spectrales entre ce qui sort de
   3013 ! la surface et ce qu'attend le rayonnement
   3014 IF( NSWB_MNH /= NSW) THEN
   3015   CALL ABOR1 (' NSWB_MNH must be equal to NSW !')
   3016 ENDIF
   3017 
   3018 ! compute saturated specific humidity
   3019   CALL ACTQSAT ( KIDIA,KFDIA,KLON,NTQSAT,KLEV,&
   3020    & PAPRSFM, ZCPM, ZQVM, ZTM,&
   3021    & ZGEOSLC, ZLH, ZLSCPE, ZQSAT, ZQW, PRH, ZTW)  
   3022      
   3023 ! initialisation des humidite (dans le rayonnement, l'eau liquide nuageuse
   3024 ! et la glace sont donne par des hu par rapport au gaz.
   3025 ! (qi/qa+qv pour ice par ex. C'est donc different de ri)
   3026   DO JLEV=KTDIA,KLEV
   3027     DO JLON=KIDIA,KFDIA 
   3028        ZQICE(JLON,JLEV)=&
   3029         & MAX(0.0_JPRB,&
   3030         & (ZQIM(JLON,JLEV) + ZQSM(JLON,JLEV)*RADSN + ZQGM(JLON,JLEV)*RADGR)/&
   3031         & (1.0_JPRB-ZQIM(JLON,JLEV)-ZQCM(JLON,JLEV)-ZQRM(JLON,JLEV)&
   3032         & -ZQGM(JLON,JLEV)-ZQSM(JLON,JLEV)-ZQHM(JLON,JLEV)))
   3033        ZQLIQ(JLON,JLEV)=MAX(0.0_JPRB, ZQCM(JLON,JLEV)/&
   3034         & (1.0_JPRB-ZQIM(JLON,JLEV)-ZQCM(JLON,JLEV)-ZQRM(JLON,JLEV)&
   3035         & -ZQGM(JLON,JLEV)-ZQSM(JLON,JLEV)-ZQHM(JLON,JLEV)))
   3036        ZQV(JLON,JLEV)=MAX(0.0_JPRB, ZQVM(JLON,JLEV)/&
   3037         & (1.0_JPRB-ZQIM(JLON,JLEV)-ZQCM(JLON,JLEV)-ZQRM(JLON,JLEV)&
   3038         & -ZQGM(JLON,JLEV)-ZQSM(JLON,JLEV)-ZQHM(JLON,JLEV)))
   3039     ENDDO
   3040   ENDDO
   3041 
   3042 ! store cloud water content for RTTOV
   3043   IF (YIRAD%LGP) PQIRAD(KIDIA:KFDIA,:) = ZQICE(KIDIA:KFDIA,:)
   3044   IF (YLRAD%LGP) PQLRAD(KIDIA:KFDIA,:) = ZQLIQ(KIDIA:KFDIA,:)
   3045 
   3046 ! Hannu Savijarvi diffuse -> direct albedo correction from hlradia,
   3047 ! Assuming that SURFEX does not make difference between
   3048 ! dir/dif albedo as surfex/SURFEX/albedo_from_nir_vis.F90 defines
   3049 ! PSCA_ALB(:,:) = PDIR_ALB(:,:)
   3050   
   3051   IF (LHLRADUPD) THEN
   3052      DO JLON=KIDIA,KFDIA
   3053         ZSALBCOR(JLON)=0.2_JPRB/(1._JPRB+PMU0(JLON))-0.12_JPRB
   3054      ENDDO

Page 56          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3055   ELSE
   3056      ZSALBCOR=0._JPRB
   3057   ENDIF
   3058 
   3059 ! Albedo dans les intervalles, direct (parallel) et diffus (diffuse).
   3060   IF (NSW==6.OR.NSW==1) THEN
   3061      IF (LLMSE) THEN
   3062         DO JSW=1,NSW
   3063            DO JLON=KIDIA,KFDIA
   3064               ZALBP(JLON,JSW)=PGPAR(JLON,MALBDIR-1+JSW)
   3065               ZALBD(JLON,JSW)=PGPAR(JLON,MALBSCA-1+JSW)
   3066               IF (LHLRADUPD) ZALBP(JLON,JSW)=ZALBD(JLON,JSW)+ZSALBCOR(JLON)
   3067            ENDDO
   3068         ENDDO
   3069      ELSEIF (LSFORCS) THEN
   3070         DO JSW=1,NSW
   3071            DO JLON=KIDIA,KFDIA
   3072               ZALBP(JLON,JSW)=RALB_FORC
   3073               ZALBD(JLON,JSW)=RALB_FORC
   3074 !  direct>diffuse correction might be applied to RALB_FORC,too:
   3075 !              ZALBP(JLON,JSW)=RALB_FORC+ZSALBCOR(JLON)
   3076            ENDDO
   3077         ENDDO
   3078      ELSE
   3079 !pour pouvoir tourner sans la surface
   3080         DO JSW=1,NSW
   3081            DO JLON=KIDIA,KFDIA
   3082               ZALBP(JLON,JSW)=PALBIN(JLON)
   3083               ZALBD(JLON,JSW)=PALBIN(JLON)
   3084 !              ZALBP(JLON,JSW)=PALBIN(JLON)+ZSALBCOR(JLON)
   3085            ENDDO
   3086         ENDDO
   3087      ENDIF
   3088 
   3089 ! Spectral average albedo done with RSUN2 weights,
   3090 ! to be applied for HLRADIA, ACRANEB2 which use a single solar spectral band
   3091     IF (LHLRADUPD) THEN
   3092        DO JLON=KIDIA,KFDIA
   3093           ZALBP1(JLON)=0.
   3094           ZALBD1(JLON)=0.
   3095           DO JSW=1,NSW
   3096              ZALBP1(JLON)=ZALBP1(JLON)+RSUN2(JSW)*ZALBP(JLON,JSW)
   3097              ZALBD1(JLON)=ZALBD1(JLON)+RSUN2(JSW)*ZALBD(JLON,JSW)
   3098           ENDDO
   3099        ENDDO
   3100     ELSE
   3101        ZALBP1(KIDIA:KFDIA)=PGPAR(KIDIA:KFDIA,MALBDIR)
   3102        ZALBD1(KIDIA:KFDIA)=PGPAR(KIDIA:KFDIA,MALBSCA)
   3103     ENDIF
   3104   ELSE
   3105     CALL ABOR1 ('ALBEDO FOR NSW/= 1 or 6 not defined in apl_arome')
   3106   ENDIF
   3107 ! all albedo operations
   3108 
   3109   IF (LLMSE) THEN
   3110      DO JLON=KIDIA,KFDIA
   3111         ZEMIS(JLON)=PGPAR(JLON,MVEMIS)

Page 57          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3112         ZTSURF(JLON)=PGPAR(JLON,MVTS)
   3113 ! protection for E Zone, Where surface scheme send back EMIS and T =0
   3114 ! the protection in aro_ground_paramn is not sufficient !!! WHY ??
   3115         IF (ZEMIS(JLON)==0._JPRB) THEN
   3116           ZEMIS(JLON)=1.0_JPRB
   3117           ZTSURF(JLON)=288.0_JPRB
   3118         ENDIF
   3119      ENDDO
   3120   ELSEIF (LSFORCS) THEN
   3121      DO JLON=KIDIA,KFDIA
   3122         ZEMIS(JLON)=REMIS_FORC
   3123      ENDDO
   3124   ELSE
   3125      DO JLON=KIDIA,KFDIA
   3126         ZTSURF(JLON)=ZTM(JLON,KLEV)
   3127         ZEMIS(JLON)=0.5_JPRB ! value 0.5 is suspicious
   3128      ENDDO
   3129   ENDIF !LLMSE EMIS
   3130   
   3131 ! initialization of aerosols
   3132   IF (LRAY.AND.NRAY == 2.AND.LRADFLEX.AND.LRSTAER) THEN
   3133 
   3134 ! old ("standard") aerosols for LRAY only
   3135     DO JLEV=KTDIA-1,KLEV
   3136       ZVETAH(JLEV)=STPREH(JLEV)/VP00
   3137     ENDDO
   3138     ZAEO=AERCS1*ZVETAH(KTDIA-1)+AERCS3*ZVETAH(KTDIA-1)**3+&
   3139      &   AERCS5*ZVETAH(KTDIA-1)**5
   3140     DO JLEV=KTDIA,KLEV
   3141       ZAEN=AERCS1*ZVETAH(JLEV)+AERCS3*ZVETAH(JLEV)**3+&
   3142        &   AERCS5*ZVETAH(JLEV)**5
   3143       DO JLON=KIDIA,KFDIA
   3144         ZAER(JLON,JLEV,1)=ZAEN-ZAEO
   3145         ZAER(JLON,JLEV,2:6)=0._JPRB
   3146       ENDDO
   3147       ZAEO=ZAEN
   3148     ENDDO
   3149   
   3150   ELSE
   3151     
   3152 ! as in Meteo-France (in clim files)
   3153     IF ((NAER /= 0).AND.(YSD_VAD%NUMFLDS < 4)) THEN
   3154         WRITE(NULOUT,*) 'YSD_VAD%NUMFLDS SHOULD BE >= 4, IT IS: '&
   3155        & ,YSD_VAD%NUMFLDS
   3156         CALL ABOR1('APL_AROME: PB AEROSOLS!')
   3157     ENDIF
   3158     DO JLON = KIDIA,KFDIA
   3159       ZAESEA(JLON) = 0.0_JPRB
   3160       ZAELAN(JLON) = 0.0_JPRB
   3161       ZAESOO(JLON) = 0.0_JPRB
   3162       ZAEDES(JLON) = 0.0_JPRB
   3163     ENDDO
   3164 
   3165     IF (NAER >= 1 ) THEN
   3166       IF(YSD_VAD%NUMFLDS >= 4) THEN
   3167         DO JLON = KIDIA,KFDIA
   3168           ZAESEA(JLON) = PAESEA(JLON)

Page 58          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3169           ZAELAN(JLON) = PAELAN(JLON)
   3170           ZAESOO(JLON) = PAESOO(JLON)
   3171           ZAEDES(JLON) = PAEDES(JLON)
   3172         ENDDO
   3173       ELSE
   3174         ZDUM=1._JPRB
   3175         CALL RADACT(KIDIA, KFDIA, KLON, KLEV,&
   3176          & 1 , NGPTOT , NGPTOT+2  ,0 , 1,&
   3177          & PAPRSM , PGELAM, PGEMU , PCLON , PSLON, ZCHTIX,&
   3178          & ZDUM   , ZDUM  , ZDUM  ,&
   3179          & ZRAER  , ZDUMAER,ZROZ  )
   3180         DO JAE=1,6
   3181           DO JK=1,KLEV
   3182             DO JLON=KIDIA,KFDIA
   3183               ZAER(JLON,JK,JAE)=ZRAER(JLON,JAE,JK)
   3184             ENDDO
   3185           ENDDO
   3186         ENDDO
   3187       ENDIF
   3188     ENDIF
   3189 
   3190     IF (LAEROSUL) THEN
   3191       DO JLON = KIDIA,KFDIA
   3192         ZAESUL(JLON) = PAESUL(JLON)
   3193       ENDDO
   3194     ELSE
   3195       DO JLON = KIDIA,KFDIA
   3196         ZAESUL(JLON) = 0.0_JPRB
   3197       ENDDO
   3198     ENDIF
   3199     IF (LAEROVOL) THEN
   3200       DO JLON = KIDIA,KFDIA
   3201         ZAEVOL(JLON) = PAEVOL(JLON)
   3202       ENDDO
   3203     ELSE
   3204       DO JLON = KIDIA,KFDIA
   3205         ZAEVOL(JLON) = 0.0_JPRB
   3206       ENDDO
   3207     ENDIF
   3208     IF (NAER /= 0.AND.((YSD_VAD%NUMFLDS >= 4))) THEN
   3209       CALL RADAER ( KIDIA , KFDIA , KLON  , KLEV,&
   3210        & PAPRSM , PAPRSFM, ZTM    , ZTSURF,&
   3211        & ZAESEA, ZAELAN, ZAESOO, ZAEDES, ZAESUL, ZAEVOL,&
   3212        & ZAER, ZAERINDS                                 )
   3213     ENDIF
   3214 
   3215     IF (LRDUST) THEN
   3216 ! We use the extinction coefficient explicitly solved by ARO_MNHDUST
   3217       ZAER(KIDIA:KFDIA,:,3) = ZAERD(KIDIA:KFDIA,:)
   3218     ENDIF
   3219 
   3220   ENDIF
   3221 ! end of old or new aerosols
   3222 
   3223 ! initialisation de l'Ozone
   3224 ! comme dans arpege a partir de profils clim si nozocl=2
   3225   IF (NOZOCL==2) THEN

Page 59          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3226      CALL SUOZON ( KIDIA,KFDIA,KLON,KLEV,ZQO3,.FALSE.,PAPRSM,PRDELPM,&
   3227     &              LO3ABC,PVO3ABC )  
   3228   ENDIF
   3229 
   3230 ! comme au CEP si nozocl=1
   3231   IF (NOZOCL==1) THEN
   3232     CALL RADOZC ( KIDIA, KFDIA , KLON, KLEV,&
   3233     & 1 , NGPTOT , 0,&
   3234     & PAPRSM , PGEMU,&
   3235     & ZROZ   )
   3236     DO JK=1,KLEV
   3237       DO JLON=KIDIA,KFDIA  
   3238         ZQO3(JLON,JK)=ZROZ(JLON,JK)/PDELPM(JLON,JK)
   3239       ENDDO
   3240     ENDDO
   3241   ENDIF
   3242 
   3243  ENDIF
   3244 !of preparation of input for LRAYFM, LRAY at every time step
   3245  
   3246  IF (LRAYFM) THEN
   3247 ! Appel de l'interface rayonnement
   3248   ZCARDI=RCARDI
   3249   IMODE=NMODE
   3250 
   3251 ! intermittent call to IFS radiation scheme
   3252     IF (MOD(KSTEP,NRADFR) == 0) THEN 
   3253     CALL ACRADIN&
   3254      & (YDGEOMETRY%YRDIMV, KIDIA , KFDIA,&
   3255      & KLON  , KLEV,&
   3256      & IMODE ,&
   3257      & ZALBD , ZALBP, PAPRSM    , PAPRSFM,&
   3258      & ZCARDI, PCLFS, ZQO3(1,1) , ZAER,&
   3259      & PDELPM, ZEMIS, PMU0M, ZQV  , ZQSAT,&
   3260      & ZQICE , ZQLIQ, ZQSM , ZQRM , PLSM , ZTM  , ZTSURF,&
   3261      & PEMTD , PEMTU, PTRSO,&
   3262      & PFRTHC,PFRTH,PFRSOC,PFRSO,&
   3263      & ZZSFSWDIR, ZZSFSWDIF,&
   3264      & ZFSDNN, ZFSDNV,&
   3265      & ZCTRSO, ZCEMTR, ZTRSOD,&
   3266      & ZTRSODIR, ZTRSODIF,&
   3267      & ZPIZA_DST,ZCGA_DST,ZTAUREL_DST,ZAERINDS,&
   3268      & PGELAM, PGEMU)
   3269 
   3270 ! save SW surface fluxes
   3271     IF (LLMSE) THEN
   3272       IF (NSW==6) THEN
   3273         DO JSW=1,NSW
   3274           DO JLON=KIDIA,KFDIA
   3275             PGPAR(JLON,MSWDIR+JSW-1)=ZTRSODIR(JLON,JSW)
   3276             PGPAR(JLON,MSWDIF+JSW-1)=ZTRSODIF(JLON,JSW)
   3277           ENDDO
   3278         ENDDO
   3279       ELSEIF (NSW==1) THEN
   3280         DO JLON=KIDIA,KFDIA
   3281           PGPAR(JLON,MSWDIR)=ZFSDNN(JLON)+ZFSDNV(JLON)
   3282           PGPAR(JLON,MSWDIF)=0.0_JPRB

Page 60          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3283         ENDDO
   3284       ENDIF
   3285     ENDIF
   3286   ENDIF
   3287 ! end of intermittent call of IFS radiation
   3288   
   3289   IF (LLMSE) THEN
   3290     DO JSW=1,NSW
   3291       DO JLON=KIDIA,KFDIA
   3292         ZTRSODIR(JLON,JSW)=PGPAR(JLON,MSWDIR+JSW-1)
   3293         ZTRSODIF(JLON,JSW)=PGPAR(JLON,MSWDIF+JSW-1)
   3294       ENDDO
   3295     ENDDO
   3296   ENDIF
   3297 
   3298 ! daand: radflex
   3299   IF (LRADFLEX) THEN
   3300     YLRADPROC => NEWINTPROC(YDPROCSET,'Radiation')
   3301     ZFRSO => NEWINTFIELD(YLRADPROC,KLON,KLEV,'FRSO','H','F')
   3302     ZFRTH => NEWINTFIELD(YLRADPROC,KLON,KLEV,'FRTH','H','F')
   3303   ENDIF
   3304 
   3305   CALL RADHEAT&
   3306    & (  KIDIA  , KFDIA  , KLON   , KLEV,&
   3307    & PAPRSM  ,&
   3308    & ZEMIS  , PEMTD  , PMU0,&
   3309    & ZQVM,&
   3310    & ZTENT  , PTRSO  , ZTRSOD , ZTSURF   , PDT,&
   3311    & ZTRSODIR,ZTRSODIF, ZALBD , ZALBP,&
   3312 ! daand: radflex; replaced PFRSO and PRFTH by pointers
   3313    & ZFRSO  , ZFRTH  , PFRSODS, PFRTHDS,&
   3314    & ZCEMTR , ZCTRSO , PFRSOC , PFRTHC,&
   3315    & ZSUDU  , ZSDUR  , ZDSRP  ,&
   3316    & ZZSFSWDIR , ZZSFSWDIF    ,&
   3317    & PFRSOPS, ZFRSOFS, PFRSOPT )  
   3318 
   3319 !  ! update sunshine duration [s]
   3320 !  DO JLON=KIDIA,KFDIA
   3321 !    PSDUR(JLON)=PSDUR(JLON)+ZSDUR(JLON)*TSTEP
   3322 !  ENDDO
   3323 
   3324 ! daand: radflex
   3325   IF (LRADFLEX) THEN
   3326 ! store for further calculations and diagnostics
   3327     PFRSO(:,:,1)=ZFRSO
   3328     PFRTH(:,:,1)=ZFRTH
   3329   ENDIF
   3330 
   3331 ! daand: if LRADFLEX, the contribution to temperature is done by
   3332 ! cptend_flex/cputqy
   3333   IF (.NOT.LRADFLEX) THEN
   3334 ! update temperature tendency by radiative contribution
   3335     PTENDT(:,:)=PTENDT(:,:)+ZTENT(:,:)
   3336   ENDIF
   3337 
   3338 ! Estimate of the direct normal irradiance, with securities
   3339   DO JLON = KIDIA, KFDIA

Page 61          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3340      PFRSDNI(JLON)=PFRSOPS(JLON)
   3341      IF (PMU0(JLON) > 3.0E-02_JPRB) THEN
   3342         PFRSDNI(JLON)=PFRSOPS(JLON)/PMU0(JLON)
   3343      ENDIF
   3344      PFRSDNI(JLON)=MAX(0.0_JPRB,PFRSDNI(JLON)) 
   3345   ENDDO 
   3346 
   3347   IF( MOD(KSTEP+1,NPRINTFR)==0) THEN
   3348     WRITE(NULOUT,*)'sous apl_arome apres rayonnement ZTENT=',ZTENT(NPTP,30:41)
   3349     IF (LLMSE) THEN
   3350        DO JSW=1, NSW
   3351           WRITE(NULOUT,*)'ZSFSWDIR ZSFSWDIF ZFSDNN ZFSDNV PFRSO',&
   3352         & ZZSFSWDIR(NPTP,JSW),ZZSFSWDIF(NPTP,JSW),ZFSDNN(NPTP),&
   3353         & ZFSDNV(NPTP),PFRSO(NPTP,KLEV,1)
   3354           WRITE(NULOUT,*)'ZALBD ZALBP',ZALBD(NPTP,JSW),ZALBP(NPTP,JSW)
   3355        ENDDO
   3356     ENDIF
   3357     WRITE(NULOUT,*)ZFSDNN(NPTP),ZFSDNV(NPTP)
   3358     WRITE (NULOUT,*)'TSURF EMIS ZFRTH',ZTSURF(NPTP),ZEMIS(NPTP),PFRTHDS(NPTP)
   3359   ENDIF
   3360 
   3361   IF (LFLEXDIA) THEN
   3362     IF (LDDH_OMP) THEN
   3363       CALL NEW_ADD_FIELD_3D(PFRSO(:,:,1),'FCTRAYSO',YDDDH)
   3364       CALL NEW_ADD_FIELD_3D(PFRTH(:,:,1),'FCTRAYTH',YDDDH)
   3365     ELSE
   3366       CALL ADD_FIELD_3D(PFRSO(:,:,1),'FCTRAYSO','F','ARP',.TRUE.,.TRUE.)
   3367       CALL ADD_FIELD_3D(PFRTH(:,:,1),'FCTRAYTH','F','ARP',.TRUE.,.TRUE.)
   3368     ENDIF
   3369   ENDIF
   3370 
   3371 ENDIF  ! LRAYFM
   3372 
   3373 !     ------------------------------------------------------------------
   3374 !     NEBULOSITE (CONVECTIVE+STRATIFORME) A TROIS NIVEAUX.
   3375 !     DIAGNOSTIC OF THREE LEVELS (CONVECTIVE+STRATIFORM) CLOUDINESS.
   3376 
   3377 ! protect cloudiness from being 0 or 1 (needed for ACRANEB2 and ACNPART)
   3378 DO JLEV=KTDIA,KLEV
   3379   DO JLON=KIDIA,KFDIA
   3380     ZNEB0(JLON,JLEV)=MAX(ZEPSNEB,MIN(1._JPRB-ZEPSNEB,PCLFS(JLON,JLEV)))
   3381   ENDDO
   3382 ENDDO
   3383 
   3384 ! calculate high, medium, low and total cloud cover
   3385 CALL ACNPART(KIDIA,KFDIA,KLON,NTNEBU,KLEV,&
   3386  & PAPHIM,PAPRSFM,ZDECRD,ZNEB0,&
   3387  & PCLCH,PCLCM,PCLCL,PCLCT,ZCLCT_RAD)
   3388 
   3389 IF (LRAY.AND.NRAY == 2.AND.LRADFLEX) THEN
   3390 
   3391 ! -------------------------
   3392 ! ACRANEB2 radiation scheme
   3393 ! -------------------------
   3394 
   3395 !+++ The next input preparations are redundant:
   3396 

Page 62          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3397 ! initialization of cloud ice, cloud liquid and specific humidity
   3398 ! (with respect to moist air, i.e. excluding hydrometeors)
   3399   DO JLEV=KTDIA,KLEV
   3400     DO JLON=KIDIA,KFDIA
   3401       ZQICE(JLON,JLEV)=MAX(0.0_JPRB, ZQIM(JLON,JLEV)/&
   3402        & (1.0_JPRB-ZQIM(JLON,JLEV)-ZQCM(JLON,JLEV)-ZQRM(JLON,JLEV)&
   3403        & -ZQGM(JLON,JLEV)-ZQSM(JLON,JLEV)-ZQHM(JLON,JLEV)))
   3404       ZQLIQ(JLON,JLEV)=MAX(0.0_JPRB, ZQCM(JLON,JLEV)/&
   3405        & (1.0_JPRB-ZQIM(JLON,JLEV)-ZQCM(JLON,JLEV)-ZQRM(JLON,JLEV)&
   3406        & -ZQGM(JLON,JLEV)-ZQSM(JLON,JLEV)-ZQHM(JLON,JLEV)))
   3407       ZQV(JLON,JLEV)=MAX(0.0_JPRB, ZQVM(JLON,JLEV)/&
   3408        & (1.0_JPRB-ZQIM(JLON,JLEV)-ZQCM(JLON,JLEV)-ZQRM(JLON,JLEV)&
   3409        & -ZQGM(JLON,JLEV)-ZQSM(JLON,JLEV)-ZQHM(JLON,JLEV)))
   3410     ENDDO
   3411   ENDDO
   3412 
   3413 ! store cloud water content for RTTOV
   3414   IF (YIRAD%LGP) PQIRAD(KIDIA:KFDIA,:) = ZQICE(KIDIA:KFDIA,:)
   3415   IF (YLRAD%LGP) PQLRAD(KIDIA:KFDIA,:) = ZQLIQ(KIDIA:KFDIA,:)
   3416 
   3417 ! initialization of ozone
   3418   IF (NOZOCL == 1) THEN
   3419 
   3420 ! as in IFS
   3421     CALL RADOZC(KIDIA,KFDIA,KLON,KLEV,&
   3422      & 1,NGPTOT,0,&
   3423      & PAPRSM,PGEMU,&
   3424      & ZROZ)
   3425     DO JK=1,KLEV
   3426       DO JLON=KIDIA,KFDIA
   3427         ZQO3(JLON,JK)=ZROZ(JLON,JK)/PDELPM(JLON,JK)
   3428       ENDDO
   3429     ENDDO
   3430 
   3431   ELSEIF (NOZOCL == 2) THEN
   3432 
   3433 ! as in ARPEGE (from clim profiles)
   3434     CALL SUOZON(KIDIA,KFDIA,KLON,KLEV,ZQO3,.FALSE.,PAPRSM,PRDELPM,&
   3435      & LO3ABC,PVO3ABC)
   3436 
   3437   ENDIF
   3438 
   3439 ! initialization of aerosols
   3440   IF (LRAY.AND.NRAY == 2.AND.LRADFLEX.AND.LRSTAER) THEN
   3441 
   3442 ! old ("standard") aerosols
   3443     DO JLEV=KTDIA-1,KLEV
   3444       ZVETAH(JLEV)=STPREH(JLEV)/VP00
   3445     ENDDO
   3446     ZAEO=AERCS1*ZVETAH(KTDIA-1)+AERCS3*ZVETAH(KTDIA-1)**3+&
   3447      &   AERCS5*ZVETAH(KTDIA-1)**5
   3448     DO JLEV=KTDIA,KLEV
   3449       ZAEN=AERCS1*ZVETAH(JLEV)+AERCS3*ZVETAH(JLEV)**3+&
   3450        &   AERCS5*ZVETAH(JLEV)**5
   3451       DO JLON=KIDIA,KFDIA
   3452         ZAER(JLON,JLEV,1)=ZAEN-ZAEO
   3453         ZAER(JLON,JLEV,2:6)=0._JPRB

Page 63          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3454       ENDDO
   3455       ZAEO=ZAEN
   3456     ENDDO
   3457   
   3458   ELSE
   3459 
   3460 ! initialisation of aerosols as in ARPEGE (from clim files)
   3461     IF ((NAER /= 0).AND.(YSD_VAD%NUMFLDS < 4)) THEN
   3462       CALL ABOR1('APL_AROME: PB AEROSOLS!')
   3463     ENDIF
   3464     DO JLON = KIDIA,KFDIA
   3465       ZAESEA(JLON) = 0.0_JPRB
   3466       ZAELAN(JLON) = 0.0_JPRB
   3467       ZAESOO(JLON) = 0.0_JPRB
   3468       ZAEDES(JLON) = 0.0_JPRB
   3469     ENDDO
   3470 
   3471     IF (NAER >= 1 ) THEN
   3472       IF(YSD_VAD%NUMFLDS >= 4) THEN
   3473         DO JLON = KIDIA,KFDIA
   3474           ZAESEA(JLON) = PAESEA(JLON)
   3475           ZAELAN(JLON) = PAELAN(JLON)
   3476           ZAESOO(JLON) = PAESOO(JLON)
   3477           ZAEDES(JLON) = PAEDES(JLON)
   3478         ENDDO
   3479       ELSE
   3480         ZDUM=1._JPRB
   3481         CALL RADACT(KIDIA, KFDIA, KLON, KLEV,&
   3482          & 1 , NGPTOT , NGPTOT+2  ,0 , 1,&
   3483          & PAPRSM , PGELAM, PGEMU , PCLON , PSLON, ZCHTIX,&
   3484          & ZDUM   , ZDUM  , ZDUM  ,&
   3485          & ZRAER  , ZDUMAER, ZROZ  )
   3486         DO JAE=1,6
   3487           DO JK=1,KLEV
   3488             DO JLON=KIDIA,KFDIA
   3489               ZAER(JLON,JK,JAE)=ZRAER(JLON,JAE,JK)
   3490             ENDDO
   3491           ENDDO
   3492         ENDDO
   3493       ENDIF
   3494     ENDIF
   3495 
   3496     IF (LAEROSUL) THEN
   3497       DO JLON = KIDIA,KFDIA
   3498         ZAESUL(JLON) = PAESUL(JLON)
   3499       ENDDO
   3500     ELSE
   3501       DO JLON = KIDIA,KFDIA
   3502         ZAESUL(JLON) = 0.0_JPRB
   3503       ENDDO
   3504     ENDIF
   3505     IF (LAEROVOL) THEN
   3506       DO JLON = KIDIA,KFDIA
   3507         ZAEVOL(JLON) = PAEVOL(JLON)
   3508       ENDDO
   3509     ELSE
   3510       DO JLON = KIDIA,KFDIA

Page 64          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3511         ZAEVOL(JLON) = 0.0_JPRB
   3512       ENDDO
   3513     ENDIF
   3514     IF (NAER /= 0.AND.((YSD_VAD%NUMFLDS >= 4))) THEN
   3515       CALL RADAER ( KIDIA , KFDIA , KLON  , KLEV,&
   3516        & PAPRSM , PAPRSFM, ZTM    , ZTSURF,&
   3517        & ZAESEA, ZAELAN, ZAESOO, ZAEDES, ZAESUL, ZAEVOL,&
   3518        & ZAER, ZAERINDS                                 )
   3519     ENDIF
   3520 
   3521     IF (LRDUST) THEN
   3522 ! We uses the extinction coefficient explicitely solved by ARO_MNHDUST
   3523       ZAER(KIDIA:KFDIA,:,3) = ZAERD(KIDIA:KFDIA,:)
   3524     ENDIF
   3525 
   3526   ENDIF
   3527 
   3528 ! get diffuse and direct surface albedo, emissivity and temperature
   3529   DO JLON=KIDIA,KFDIA
   3530     IF (.NOT.LHLRADUPD) THEN
   3531        ZALBD1(JLON)=PGPAR(JLON,MALBSCA)
   3532        ZALBP1(JLON)=PGPAR(JLON,MALBDIR)
   3533     ENDIF
   3534     ZEMIS  (JLON)=PGPAR(JLON,MVEMIS)
   3535     ZTSURF (JLON)=PGPAR(JLON,MVTS)
   3536 ! protection of E-zone (not to have zero emissivity and T_surf there)
   3537     IF (ZEMIS(JLON) == 0._JPRB) THEN
   3538       ZEMIS (JLON)=  1._JPRB
   3539       ZTSURF(JLON)=288._JPRB
   3540     ENDIF
   3541   ENDDO
   3542 
   3543 !+++ End of redundant input preparations for ACRANEB
   3544 
   3545 ! initialization of CO2(+), differs from IFS radiation scheme!
   3546   ZQCO2(:,:)=QCO2
   3547 
   3548 ! daand: radflex
   3549   YLRADPROC => NEWINTPROC(YDPROCSET,'Radiation')
   3550   ZFRSO => NEWINTFIELD(YLRADPROC,KLON,KLEV, 'FRSO','H','F')
   3551   ZFRTH => NEWINTFIELD(YLRADPROC,KLON,KLEV, 'FRTH','H','F')
   3552 
   3553 ! call radiation scheme
   3554   IJN=KLON
   3555   CALL ACRANEB2(KIDIA,KFDIA,KLON,NTRADI,KLEV,IJN,KSTEP,&
   3556    & PAPRSM,PAPRSFM,PCPM,PRM,PDELPM,ZNEB0,&
   3557    & ZQV,ZQCO2,ZQICE,ZQLIQ,ZQO3,PTM,&
   3558    & ZALBD1,ZALBP1,ZEMIS,PGELAM,PGEMU,PMU0,PMU0LU,ZTSURF,ZDECRD,ZCLCT_RAD,&
   3559    & PGDEOSI,PGUEOSI,PGMU0,PGMU0_MIN,PGMU0_MAX,&
   3560    & PGDEOTI,PGDEOTI2,PGUEOTI,PGUEOTI2,PGEOLT,PGEOXT,&
   3561    & PGRPROX,PGMIXP,PGFLUXC,PGRSURF,PSDUR,&
   3562    & ZFRSO,ZFRTH,&
   3563    & ZFRSODS,ZFRSOPS,ZFRSOLU,PFRTHDS,ZAER)
   3564 
   3565 ! daand: radflex
   3566 ! store for further calculations and diagnostics
   3567   PFRSO(:,:,1)=ZFRSO

Page 65          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3568   PFRTH(:,:,1)=ZFRTH
   3569 
   3570 ! extract surface fluxes
   3571   DO JLON=KIDIA,KFDIA
   3572      ZFRSOFS(JLON)=ZFRSODS(JLON)
   3573      PFRSOPS(JLON)=ZFRSOPS(JLON)
   3574      PFRSODS(JLON)=ZFRSOFS(JLON)+PFRSOPS(JLON)  ! downward surface sw flux
   3575   ENDDO
   3576 
   3577   IF (LLMSE) THEN
   3578      IF (LHLRADUPD) THEN
   3579         DO JLON=KIDIA,KFDIA
   3580            DO JSW = 1,NSW
   3581               ZZSFSWDIR(JLON,JSW) = PFRSOPS(JLON)*RSUN2(JSW)
   3582               ZZSFSWDIF(JLON,JSW) = ZFRSOFS(JLON)*RSUN2(JSW)
   3583            ENDDO
   3584         ENDDO
   3585      ELSE
   3586         DO JLON=KIDIA,KFDIA
   3587            ZZSFSWDIR(JLON,1)=PFRSOPS(JLON) ! direct surface swdn flux
   3588            ZZSFSWDIF(JLON,1)=ZFRSOFS(JLON) ! diffuse surface swdn flux
   3589         ENDDO
   3590      ENDIF
   3591   ENDIF
   3592 
   3593 ! Estimate of the direct normal irradiance, with securities
   3594   DO JLON = KIDIA, KFDIA
   3595      PFRSDNI(JLON)=PFRSOPS(JLON)
   3596      IF (PMU0(JLON) > 3.0E-02_JPRB) THEN
   3597         PFRSDNI(JLON)=PFRSOPS(JLON)/PMU0(JLON)
   3598      ENDIF
   3599      PFRSDNI(JLON)=MAX(0.0_JPRB,PFRSDNI(JLON))
   3600   ENDDO
   3601 
   3602   IF (LFLEXDIA) THEN
   3603     IF (LDDH_OMP) THEN
   3604       CALL NEW_ADD_FIELD_3D(PFRSO(:,:,1),'FCTRAYSO',YDDDH)
   3605       CALL NEW_ADD_FIELD_3D(PFRTH(:,:,1),'FCTRAYSO',YDDDH)
   3606     ELSE
   3607       CALL ADD_FIELD_3D(PFRSO(:,:,1),'FCTRAYSO','F','ARP',.TRUE.,.TRUE.)
   3608       CALL ADD_FIELD_3D(PFRTH(:,:,1),'FCTRAYTH','F','ARP',.TRUE.,.TRUE.)
   3609     ENDIF
   3610   ENDIF
   3611 
   3612 ENDIF
   3613 
   3614 IF (LFLEXDIA) THEN
   3615   CALL ARO_STARTBU( KIDIA, KFDIA, NRR,NGFL_EXT,ZZI_RHODJM,&
   3616                   & ZZI_US, ZZI_VS, ZZI_WS, ZZI_THS, ZZI_RS, ZZI_TKES, ZZI_SVS,&
   3617                   & YDDDH)
   3618 ENDIF
   3619 
   3620 
   3621 !    ------------------------------------------------------------------
   3622 !     7 - CONVECTION.
   3623 !     --------------------------------------------------------------------
   3624 

Page 66          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3625 IF(LKFBCONV) THEN
   3626 
   3627   ZZI_CVTENDRV(:,:)=0.0_JPRB
   3628   ZZI_CVTENDRC(:,:)=0.0_JPRB
   3629   ZZI_CVTENDRI(:,:)=0.0_JPRB
   3630   ZZI_CVTENDT(:,:)=0.0_JPRB
   3631   ZZI_RSAVE=ZZI_RS
   3632   ZZI_THSAVE=ZZI_THS
   3633   CALL BRI2ACCONV(YDGEOMETRY%YREGEO,KIDIA,KFDIA,ILONMNH,KLEV,PGM(KIDIA:KFDIA),&
   3634    & ZZI_PABSM(KIDIA:KFDIA,:,:),ZZZF(KIDIA:KFDIA,:,:),&
   3635    & ZTM(KIDIA:KFDIA,:),&
   3636    & ZZI_RM(KIDIA:KFDIA,:,:,1),ZZI_RM(KIDIA:KFDIA,:,:,2),&
   3637    & ZZI_RM(KIDIA:KFDIA,:,:,4),ZZI_RHODREFM(KIDIA:KFDIA,:,:),&
   3638    & ZZI_UM(KIDIA:KFDIA,:,:),ZZI_VM(KIDIA:KFDIA,:,:),&
   3639    & ZZI_WM(KIDIA:KFDIA,:,:),ZZI_MFS(KIDIA:KFDIA,:),&
   3640    & ZZI_CVTENDT(KIDIA:KFDIA,:),&
   3641    & ZZI_CVTENDRV(KIDIA:KFDIA,:),ZZI_CVTENDRC(KIDIA:KFDIA,:),&
   3642    & ZZI_CVTENDRI(KIDIA:KFDIA,:),ZCVTENDPR(KIDIA:KFDIA),&
   3643    & ZCVTENDPRS(KIDIA:KFDIA)&
   3644    & )  
   3645 
   3646   IF(MOD(KSTEP+1,NPRINTFR)==0) THEN
   3647     WRITE(NULOUT,*)"Pluie conv au sol", ZCVTENDPR(NPTP),MAXVAL(ZCVTENDPR(:))&
   3648      & ,MINVAL(ZCVTENDPR(:))  
   3649   ENDIF
   3650 
   3651   DO JLON = KIDIA, KFDIA
   3652     DO JLEV = 1,KLEV
   3653       PTENDT(JLON,JLEV)=PTENDT(JLON,JLEV) + ZZI_CVTENDT(JLON,JLEV)
   3654       PTENDR(JLON,JLEV,1) = PTENDR(JLON,JLEV,1) + ZZI_CVTENDRV(JLON,JLEV)&
   3655        & *ZQDM(JLON,JLEV)  
   3656       PTENDR(JLON,JLEV,2) = PTENDR(JLON,JLEV,2) + ZZI_CVTENDRC(JLON,JLEV)&
   3657        & *ZQDM(JLON,JLEV)  
   3658       PTENDR(JLON,JLEV,4) = PTENDR(JLON,JLEV,4) + ZZI_CVTENDRI(JLON,JLEV)&
   3659        & *ZQDM(JLON,JLEV)  
   3660     ENDDO
   3661   ENDDO
   3662   DO JLON = KIDIA, KFDIA
   3663     DO JLEV= 1, KLEV
   3664       ZZI_RS(JLON,1,JLEV,1)=ZZI_RSAVE(JLON,1,JLEV,1)+ZZI_CVTENDRV(JLON,JLEV)
   3665       ZZI_RS(JLON,1,JLEV,2)=ZZI_RSAVE(JLON,1,JLEV,2)+ZZI_CVTENDRC(JLON,JLEV)
   3666       ZZI_RS(JLON,1,JLEV,4)=ZZI_RSAVE(JLON,1,JLEV,4)+ZZI_CVTENDRI(JLON,JLEV)
   3667     ENDDO
   3668     DO JLEV=1,KLEV
   3669       ZZI_THS(JLON,1,JLEV)=ZZI_THSAVE(JLON,1,JLEV)+ZZI_CVTENDT(JLON,JLEV)*(RATM/&
   3670        & PAPRSFM(JLON,JLEV))**(RD/RCPD)  
   3671     ENDDO
   3672   ENDDO
   3673   DO JLON =KIDIA, KFDIA
   3674     ZINPRR(JLON,1)=ZINPRR(JLON,1)+ZCVTENDPR(JLON)-ZCVTENDPRS(JLON)
   3675     ZACPRR(JLON,1)=ZACPRR(JLON,1)+(ZCVTENDPR(JLON)-ZCVTENDPRS(JLON))*PDT
   3676     ZINPRS(JLON,1)=ZINPRS(JLON,1)+ZCVTENDPRS(JLON)
   3677     ZACPRS(JLON,1)=ZACPRS(JLON,1)+ZCVTENDPRS(JLON)*PDT
   3678   ENDDO
   3679 ! avance temporelle et inversion niveau pour ZZI_MFS
   3680 ! on utilise PSIGS pour le flux de masse pour la condensation sous maille
   3681 ! car PSIGS n est utilise que si LOSIGMAS=T

Page 67          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3682   IF (LOSUBG_COND.AND..NOT.LOSIGMAS) THEN
   3683     DO JLEV = 1,KLEV
   3684       DO JLON = KIDIA,KFDIA
   3685         PSIGS(JLON,JLEV)=ZZI_MFS(JLON,JLEV)
   3686       ENDDO
   3687     ENDDO
   3688   ENDIF
   3689   IF(MOD(KSTEP+1,NPRINTFR)==0) THEN
   3690     WRITE(NULOUT,*)"aps CONV, TENRV, TENRC, TENRI"
   3691     DO JLEV=1,KLEV
   3692       WRITE(NULOUT,*)PTENDR(NPTP,JLEV,1),PTENDR(NPTP,JLEV,2),PTENDR(NPTP,JLEV,4)
   3693     ENDDO
   3694   ENDIF
   3695   CALL ARO_CONVBU(ZZI_RHODJM,ZZI_RS,ZZI_THS,YDDDH)
   3696 ENDIF
   3697 
   3698 !    ------------------------------------------------------------------
   3699 !     8 - SURFACE.
   3700 !     --------------------------------------------------------------------
   3701 open(unit=13,file="test_apl_arome.txt") !DUCHENEF
   3702 write(13,*) "test 1" !DUCHENEF
   3703 IF (LLMSE) THEN
   3704 ! A loop around SURFEX in order to test OpenMP
   3705 
   3706   SURFEX_LOOP : DO ISURFEX = 1, NSURFEX_ITER
   3707 
   3708 ! Initialisations
   3709 
   3710   DO JLON=KIDIA,KFDIA
   3711     ZZS(JLON,1)=POROG(JLON)*ZINVG 
   3712     ZDEPTH_HEIGHT(JLON,:)=ZZZF(JLON,1,:)-ZZS(JLON,1)  
   3713     IF (ZDEPTH_HEIGHT(JLON,IKB) <= 0._JPRB) THEN
   3714       WRITE (20,*)'sous apl_arome pb height en', JLON,ZZI_APHIFM(JLON,KLEV),&
   3715       & POROG(JLON)
   3716     ENDIF
   3717 
   3718   ENDDO
   3719 
   3720   IF (LSURFEX_CRITICAL) THEN
   3721 !$OMP CRITICAL (ARO_GROUND_PARAM_LOCK)
   3722     IF (LLMSE_PARAM)&
   3723      & CALL ARO_GROUND_PARAM(KLEV,PTKEM(KIDIA:KFDIA,(KLEV-5):KLEV), KBL,KGPCOMP,&
   3724      & ILONMNH,KIDIA,KFDIA,KSTEP,&
   3725      & NRR,NSW,NGFL_EXT,NDGUNG, NDGUXG, NDLUNG, NDLUXG,LSURFEX_KFROM,&
   3726      & LMPA,CCOUPLING,LDXFUMSE,&
   3727      & NINDAT,ZRHGMT,ZSTATI,RSOVR,RCODEC,RSIDEC,&
   3728      & PINDX(KIDIA:KFDIA),PINDY(KIDIA:KFDIA),&
   3729      & ZZI_UM(KIDIA:KFDIA,1,(IKB-5):IKB),&
   3730      & ZZI_VM(KIDIA:KFDIA,1,(IKB-5):IKB),&
   3731      & ZTM(KIDIA:KFDIA,(KLEV-5):KLEV),ZZI_RM(KIDIA:KFDIA,1,(IKB-5):IKB,1),&
   3732      & ZZI_SVM(KIDIA:KFDIA,1,IKB,1:NGFL_EXT),&
   3733      & ZCARDI,ZZI_RHODREFM(KIDIA:KFDIA,1,(IKB-5):IKB),&
   3734      & ZZI_PABSM(KIDIA:KFDIA,1,(IKB-5):IKB),PAPRSM(KIDIA:KFDIA,KLEV),&
   3735      & ZDTMSE,ZDEPTH_HEIGHT(KIDIA:KFDIA,(IKB-5):IKB),ZZS(KIDIA:KFDIA,1), XZSEPS,&
   3736      & PMU0(KIDIA:KFDIA),PMU0N(KIDIA:KFDIA),PGELAM(KIDIA:KFDIA),&
   3737      & PGEMU(KIDIA:KFDIA),XSW_BANDS,&
   3738      & ZINPRR_NOTINCR(KIDIA:KFDIA,1),ZINPRS_NOTINCR(KIDIA:KFDIA,1),&

Page 68          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3739      & ZINPRG_NOTINCR(KIDIA:KFDIA,1),&
   3740      & PFRTHDS(KIDIA:KFDIA),ZZSFSWDIF(KIDIA:KFDIA,1:NSW),&
   3741      & ZZSFSWDIR(KIDIA:KFDIA,1:NSW),&
   3742      & ZCFAQ(KIDIA:KFDIA), ZCFATH(KIDIA:KFDIA), ZCFAU(KIDIA:KFDIA),&
   3743      & ZCFBQ(KIDIA:KFDIA), ZCFBTH(KIDIA:KFDIA), ZCFBU(KIDIA:KFDIA),&
   3744      & ZCFBV(KIDIA:KFDIA),&
   3745      & ZSFTH(KIDIA:KFDIA,1),ZSFRV(KIDIA:KFDIA,1),&
   3746      & ZSFSV(KIDIA:KFDIA,1,1:NGFL_EXT),ZSFCO2(KIDIA:KFDIA,1),&
   3747      & ZSFU(KIDIA:KFDIA,1),ZSFV(KIDIA:KFDIA,1),&
   3748      & ZALBP(KIDIA:KFDIA,1:NSW),ZALBD(KIDIA:KFDIA,1:NSW),&
   3749      & ZEMIS(KIDIA:KFDIA),ZTSURF(KIDIA:KFDIA),PFRTH(KIDIA:KFDIA,KLEV,1),ZSLOPE(KIDIA:KFDIA),&
   3750      & PRUS=ZZI_US(KIDIA:KFDIA,:,1:KLEV),&
   3751      & PRVS=ZZI_VS(KIDIA:KFDIA,:,1:KLEV),&
   3752      & PRTHS=ZZI_THS(KIDIA:KFDIA,:,1:KLEV),&
   3753      & PRRS=ZZI_RS(KIDIA:KFDIA,:,1:KLEV,:),&
   3754      & PRTKES=ZZI_TKES(KIDIA:KFDIA,:,1:KLEV),&
   3755      & ZTOWNS(KIDIA:KFDIA))
	.......1                    
(1) Non-keyword arguments are invalid after keyword arguments have been encountered.   [ZTOWNS]

   3756 
   3757 	write(13,*) "test 2" !DUCHENEF
   3758 
   3759 
   3760      IF (LRCO2) THEN
   3761        ZSFSV(KIDIA:KFDIA,1,NSV_CO2)= ZSFCO2(KIDIA:KFDIA,1)
   3762 !print*,' FLUX CO2 =', MINVAL(ZSFSV(KIDIA:KFDIA,1,NSV_CO2)),&
   3763 !                    & MAXVAL(ZSFSV(KIDIA:KFDIA,1,NSV_CO2))
   3764      ENDIF
   3765 
   3766 !!!!! TEST DDH ATTENTION
   3767 !ZSFRV = 0._JPRB
   3768 
   3769     IF (LLMSE_DIAG)&
   3770      & CALL ARO_GROUND_DIAG( KBL, KGPCOMP,&
   3771      & ILONMNH,KIDIA,KFDIA,KLEV, IKL,&
   3772      & NDGUNG, NDGUXG, NDLUNG, NDLUXG, LSURFEX_KFROM,&
   3773      & ZZS(KIDIA:KFDIA,1),ZSFRV(KIDIA:KFDIA,1),&
   3774      & ZZI_UM(KIDIA:KFDIA,1,IKTB:IKTE),&
   3775      & ZZI_VM(KIDIA:KFDIA,1,IKTB:IKTE),&
   3776      & ZDEPTH_HEIGHT(KIDIA:KFDIA,IKTB:IKTE),&
   3777      & PFRTH(KIDIA:KFDIA,KLEV,1),PFRSO(KIDIA:KFDIA,KLEV,1),&
   3778      & PINDX(KIDIA:KFDIA),PINDY(KIDIA:KFDIA),&
   3779      & ZQS(KIDIA:KFDIA),ZGZ0(KIDIA:KFDIA),ZGZ0H(KIDIA:KFDIA),&
   3780      & PTCLS(KIDIA:KFDIA),PQCLS(KIDIA:KFDIA),PHUCLS(KIDIA:KFDIA),&
   3781      & PUCLS(KIDIA:KFDIA),PVCLS(KIDIA:KFDIA),&
   3782      & PNUCLS(KIDIA:KFDIA),PNVCLS(KIDIA:KFDIA),&
   3783      & PFCLL(KIDIA:KFDIA,1),PFCLN(KIDIA:KFDIA,1),&
   3784      & PFEVL(KIDIA:KFDIA,1),PFEVN(KIDIA:KFDIA,1),&
   3785      & ZSSO_STDEV(KIDIA:KFDIA,1), ZTWSNOW(KIDIA:KFDIA,1),&
   3786      & ZBUDTH(KIDIA:KFDIA), ZBUDSO(KIDIA:KFDIA),&
   3787      & ZFCLL(KIDIA:KFDIA), ZTOWNS(KIDIA:KFDIA),&
   3788      & ZCD(KIDIA:KFDIA), ZCH(KIDIA:KFDIA) )
   3789  
   3790 !* get snow cover :
   3791      PSPSG(KIDIA:KFDIA)=ZTWSNOW(KIDIA:KFDIA,1)
   3792 !$OMP END CRITICAL (ARO_GROUND_PARAM_LOCK)

Page 69          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3793   ELSE
   3794 
   3795     IF (LLMSE_PARAM)&
   3796      & CALL ARO_GROUND_PARAM(KLEV,PTKEM(KIDIA:KFDIA,(KLEV-5):KLEV), KBL,KGPCOMP,&
   3797      & ILONMNH,KIDIA,KFDIA,KSTEP,&
   3798      & NRR,NSW,NGFL_EXT,NDGUNG, NDGUXG, NDLUNG, NDLUXG,LSURFEX_KFROM,&
   3799      & LMPA,CCOUPLING,LDXFUMSE,&
   3800      & NINDAT,ZRHGMT,ZSTATI,RSOVR,RCODEC,RSIDEC,&
   3801      & PINDX(KIDIA:KFDIA),PINDY(KIDIA:KFDIA),&
   3802      & ZZI_UM(KIDIA:KFDIA,1,(IKB-5):IKB),&
   3803      & ZZI_VM(KIDIA:KFDIA,1,(IKB-5):IKB),&
   3804      & ZTM(KIDIA:KFDIA,(KLEV-5):KLEV),ZZI_RM(KIDIA:KFDIA,1,(IKB-5):IKB,1),&
   3805      & ZZI_SVM(KIDIA:KFDIA,1,IKB,1:NGFL_EXT),&
   3806      & ZCARDI,ZZI_RHODREFM(KIDIA:KFDIA,1,(IKB-5):IKB),&
   3807      & ZZI_PABSM(KIDIA:KFDIA,1,(IKB-5):IKB),PAPRSM(KIDIA:KFDIA,KLEV),&
   3808      & ZDTMSE,ZDEPTH_HEIGHT(KIDIA:KFDIA,(IKB-5):IKB),ZZS(KIDIA:KFDIA,1), XZSEPS,&
   3809      & PMU0(KIDIA:KFDIA),PMU0N(KIDIA:KFDIA),PGELAM(KIDIA:KFDIA),&
   3810      & PGEMU(KIDIA:KFDIA),XSW_BANDS,&
   3811      & ZINPRR_NOTINCR(KIDIA:KFDIA,1),ZINPRS_NOTINCR(KIDIA:KFDIA,1),&
   3812      & ZINPRG_NOTINCR(KIDIA:KFDIA,1),&
   3813      & PFRTHDS(KIDIA:KFDIA),ZZSFSWDIF(KIDIA:KFDIA,1:NSW),&
   3814      & ZZSFSWDIR(KIDIA:KFDIA,1:NSW),&
   3815      & ZCFAQ(KIDIA:KFDIA), ZCFATH(KIDIA:KFDIA), ZCFAU(KIDIA:KFDIA),&
   3816      & ZCFBQ(KIDIA:KFDIA), ZCFBTH(KIDIA:KFDIA), ZCFBU(KIDIA:KFDIA),&
   3817      & ZCFBV(KIDIA:KFDIA),&
   3818      & ZSFTH(KIDIA:KFDIA,1),ZSFRV(KIDIA:KFDIA,1),&
   3819      & ZSFSV(KIDIA:KFDIA,1,1:NGFL_EXT),ZSFCO2(KIDIA:KFDIA,1),&
   3820      & ZSFU(KIDIA:KFDIA,1),ZSFV(KIDIA:KFDIA,1),&
   3821      & ZALBP(KIDIA:KFDIA,1:NSW),ZALBD(KIDIA:KFDIA,1:NSW),&
   3822      & ZEMIS(KIDIA:KFDIA),ZTSURF(KIDIA:KFDIA),PFRTH(KIDIA:KFDIA,KLEV,1),ZSLOPE(KIDIA:KFDIA),&
   3823      & PRUS=ZZI_US(KIDIA:KFDIA,:,1:KLEV),&
   3824      & PRVS=ZZI_VS(KIDIA:KFDIA,:,1:KLEV),&
   3825      & PRTHS=ZZI_THS(KIDIA:KFDIA,:,1:KLEV),&
   3826      & PRRS=ZZI_RS(KIDIA:KFDIA,:,1:KLEV,:),&
   3827      & PRTKES=ZZI_TKES(KIDIA:KFDIA,:,1:KLEV),&
   3828      & ZTOWNS(KIDIA:KFDIA))
	.......1                    
(1) Non-keyword arguments are invalid after keyword arguments have been encountered.   [ZTOWNS]

   3829 	write(13,*) "test 3" !DUCHENEF
   3830 
   3831      IF (LRCO2) THEN
   3832        ZSFSV(KIDIA:KFDIA,1,NSV_CO2)= ZSFCO2(KIDIA:KFDIA,1)
   3833 !print*,' FLUX CO2 =', MINVAL(ZSFSV(KIDIA:KFDIA,1,NSV_CO2)),&
   3834 !                    & MAXVAL(ZSFSV(KIDIA:KFDIA,1,NSV_CO2))
   3835      ENDIF
   3836 
   3837 !!!!! TEST DDH ATTENTION
   3838 !ZSFRV = 0._JPRB
   3839 
   3840     IF (LLMSE_DIAG)&
   3841      & CALL ARO_GROUND_DIAG( KBL, KGPCOMP,&
   3842      & ILONMNH,KIDIA,KFDIA,KLEV, IKL,&
   3843      & NDGUNG, NDGUXG, NDLUNG, NDLUXG, LSURFEX_KFROM,&
   3844      & ZZS(KIDIA:KFDIA,1),ZSFRV(KIDIA:KFDIA,1),&
   3845      & ZZI_UM(KIDIA:KFDIA,1,IKTB:IKTE),&
   3846      & ZZI_VM(KIDIA:KFDIA,1,IKTB:IKTE),&

Page 70          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3847      & ZDEPTH_HEIGHT(KIDIA:KFDIA,IKTB:IKTE),&
   3848      & PFRTH(KIDIA:KFDIA,KLEV,1),PFRSO(KIDIA:KFDIA,KLEV,1),&
   3849      & PINDX(KIDIA:KFDIA),PINDY(KIDIA:KFDIA),&
   3850      & ZQS(KIDIA:KFDIA),ZGZ0(KIDIA:KFDIA),ZGZ0H(KIDIA:KFDIA),&
   3851      & PTCLS(KIDIA:KFDIA),PQCLS(KIDIA:KFDIA),PHUCLS(KIDIA:KFDIA),&
   3852      & PUCLS(KIDIA:KFDIA),PVCLS(KIDIA:KFDIA),&
   3853      & PNUCLS(KIDIA:KFDIA),PNVCLS(KIDIA:KFDIA),&
   3854      & PFCLL(KIDIA:KFDIA,1),PFCLN(KIDIA:KFDIA,1),&
   3855      & PFEVL(KIDIA:KFDIA,1),PFEVN(KIDIA:KFDIA,1),&
   3856      & ZSSO_STDEV(KIDIA:KFDIA,1), ZTWSNOW(KIDIA:KFDIA,1),&
   3857      & ZBUDTH(KIDIA:KFDIA), ZBUDSO(KIDIA:KFDIA),&
   3858      & ZFCLL(KIDIA:KFDIA), ZTOWNS(KIDIA:KFDIA),&
   3859      & ZCD(KIDIA:KFDIA), ZCH(KIDIA:KFDIA)         )
   3860  
   3861 !* get snow cover :
   3862      PSPSG(KIDIA:KFDIA)=ZTWSNOW(KIDIA:KFDIA,1)
   3863 
   3864 
   3865     ENDIF
   3866 
   3867   ENDDO SURFEX_LOOP
   3868 
   3869 !* Compute PBL-diagnostics
   3870    
   3871    CALL AROCLDIA(KIDIA,KFDIA,ILONMNH,KLEV,PUCLS(KIDIA:KFDIA),&
   3872     & PVCLS(KIDIA:KFDIA),PTKEM(KIDIA:KFDIA,1:KLEV),&
   3873     & PAPHIFM(KIDIA:KFDIA,1:KLEV),POROG(KIDIA:KFDIA),&
   3874     & PUGST(KIDIA:KFDIA),PVGST(KIDIA:KFDIA),PPBLH(KIDIA:KFDIA),ICLPH)
   3875    PPBLH(KIDIA:KFDIA)=MIN(XMAXLM,MAX(XMINLM,PPBLH(KIDIA:KFDIA))) 
   3876 
   3877 ENDIF    !  <== End block "IF (LMSE)"
   3878 write(13,*) "test 4" !DUCHENEF
   3879 close(13)
   3880 
   3881 !*            IDEALIZED TURBULENT SURFACE FLUXES FOR SQUALL LINE CASE
   3882 !                --------------------------------------------------------
   3883 
   3884 IF (LSQUALL.AND.LTURB) THEN
   3885 ! on n'a besoin que d'un flux sur V (U est nul).
   3886   DO JLON=KIDIA,KFDIA
   3887     IF (ABS(ZZI_VM(JLON,1,IKB)) <= 1.E-12) THEN
   3888       ZSFV(JLON,1)=0.
   3889     ELSE
   3890       ZSFV(JLON,1)=-(ZZI_VM(JLON,1,IKB))**2 *&
   3891        & (0.4_JPRB  /(LOG(ZZZF(JLON,1,IKB)/0.2_JPRB) ) )**2&
   3892        & *ZZI_VM(JLON,1,IKB)/ABS(ZZI_VM(JLON,1,IKB))  
   3893     ENDIF
   3894   ENDDO
   3895 ENDIF
   3896 
   3897 !    ------------------------------------------------------------------
   3898 !    9.  Shallow Mass Flux Mixing
   3899 !    ------------------------------------------------------------------
   3900 IF (LMFSHAL) THEN
   3901     IF (CMF_UPDRAFT=='DUAL') THEN
   3902 ! Updraft computation from EDMF/ECMWF dual proposal
   3903 ! Version May 2007

Page 71          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3904 !
   3905 ! The following routine  are using arrays with the vertical Arpege/IFS fashion (as in the radiation scheme)
   3906 
   3907     IDRAFT = 2 ! beginning of the loop for MF tendency equation
   3908 ! only 2 and 3 are used for tendency computation in ARO_SHALLOW_MF
   3909     INDRAFT=3   ! 1 for test, 2 for dry, 3 for wet
   3910     ALLOCATE(ZMF_UP(KLON,0:KLEV,INDRAFT))
   3911     ALLOCATE(ZTHETAL_UP(KLON,0:KLEV,INDRAFT))
   3912     ALLOCATE(ZQT_UP(KLON,0:KLEV,INDRAFT))
   3913     ALLOCATE(ZTHTV_UP(KLON,0:KLEV,INDRAFT))
   3914     ALLOCATE(ZQC_UP(KLON,0:KLEV,INDRAFT))
   3915     ALLOCATE(ZQI_UP(KLON,0:KLEV,INDRAFT))
   3916     ALLOCATE(ZU_UP(KLON,0:KLEV,INDRAFT))
   3917     ALLOCATE(ZV_UP(KLON,0:KLEV,INDRAFT))
   3918 
   3919     ZZSFTH(:)=-1._JPRB*ZSFTH(:,1)*(PAPRSM(:,KLEV)*ZINVATM)**(ZRSCP)
   3920     ZZSFRV(:)=-1._JPRB*ZSFRV(:,1)
   3921     ZZSFU(:)=ZSFU(:,1)
   3922     ZZSFV(:)=ZSFV(:,1)
   3923 
   3924     CALL VDFHGHTHL(KSTEP,KIDIA,KFDIA,KLON,KLEV,INDRAFT,&
   3925      & PDT, PUM, PVM,&
   3926      & ZTM,ZQVM,ZQCM,ZQIM,PCLFS,&
   3927      & PAPRSM, PAPRSFM, ZZI_APHIFM,ZZI_APHIM,&
   3928      & ZZSFTH(KIDIA:KFDIA),ZZSFRV(KIDIA:KFDIA),&
   3929      & ZZSFU(KIDIA:KFDIA),ZZSFV(KIDIA:KFDIA),&
   3930      & ZMF_UP,ZTHETAL_UP,ZQT_UP,ZTHTV_UP,ZQC_UP,ZQI_UP,&
   3931      & ZU_UP, ZV_UP,&
   3932      & NGFL_EZDIAG, PEZDIAG, &
   3933      & ZTENDQVUP,ZTENDTUP,ZSURFPREP,ZSURFSNOW, &
   3934      & ZLENGTH_M, ZLENGTH_H, PTKEEDMF)
   3935 
   3936 ! TKE must be greater than its minimum value
   3937 !
   3938 LLTKENEG =  PTKEEDMF <= ZTKEMIN 
   3939 WHERE ( LLTKENEG ) 
   3940   PTKEEDMF = ZTKEMIN
   3941 ENDWHERE
   3942 
   3943 !  tendtup, tendqvup  tendencies for non-conserved AROME
   3944 !  variables due to updraft precipitation/snow (and its evaporation)
   3945     DO JLEV = 2 ,KLEV
   3946       DO JLON = KIDIA,KFDIA
   3947         PTENDT(JLON,JLEV)=PTENDT(JLON,JLEV) + ZTENDTUP(JLON,JLEV)
   3948         PTENDR(JLON,JLEV,1)=PTENDR(JLON,JLEV,1) + ZTENDQVUP(JLON,JLEV)
   3949       ENDDO
   3950     ENDDO
   3951   ELSE
   3952     INDRAFT=1
   3953     IDRAFT=3 ! only a wet updraft
   3954   ENDIF
   3955 
   3956   DO JDRAFT=IDRAFT,3
   3957 !!! Call mass fluxes computations
   3958 ! If CMF_UPDRAFT='DUAL', the updraft characteritics are already computed and will be passed as inputs of SHALLOW_MF
   3959 ! if not, they will be computed in SHALLOW_MF itself (from Méso-NH type routines)
   3960 

Page 72          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   3961 ! JDRAFT=2 : dry updraft
   3962 ! JDRAFT=3 : wet updraft
   3963 
   3964   IF (CMF_UPDRAFT=='DUAL') THEN
   3965 ! Goes from one of the updraft from the IFS level world to the Méso-NH level world
   3966 ! go from q to r)
   3967     DO JLEV = 1,KLEV
   3968       DO JLON = KIDIA,KFDIA
   3969          ZZI_MF_UP(JLON,1,JLEV) = ZMF_UP(JLON,JLEV,JDRAFT)
   3970          ZZI_ZU_UP(JLON,1,JLEV) = ZU_UP(JLON,JLEV,JDRAFT)
   3971          ZZI_ZV_UP(JLON,1,JLEV) = ZV_UP(JLON,JLEV,JDRAFT)
   3972          ZZI_THETAL_UP(JLON,1,JLEV) = ZTHETAL_UP(JLON,JLEV,JDRAFT)
   3973          ZZI_THETAV_UP(JLON,1,JLEV) = ZTHTV_UP(JLON,JLEV,JDRAFT)
   3974          ZZI_RT_UP(JLON,1,JLEV)  = ZQT_UP(JLON,JLEV,JDRAFT)/&
   3975           &                         (1.-ZQT_UP(JLON,JLEV,JDRAFT))
   3976          ZZI_RC_UP(JLON,1,JLEV)  = ZQC_UP(JLON,JLEV,JDRAFT) /&
   3977           &                         (1.-ZQT_UP(JLON,JLEV,JDRAFT))
   3978          ZZI_RI_UP(JLON,1,JLEV)  = ZQI_UP(JLON,JLEV,JDRAFT)/&
   3979           &                         (1.-ZQT_UP(JLON,JLEV,JDRAFT))
   3980          ZZI_LENGTHM(JLON,1,JLEV) = max(0.01_JPRB,ZLENGTH_M(JLON,JLEV))
   3981          ZZI_LENGTHH(JLON,1,JLEV) = max(0.01_JPRB,ZLENGTH_H(JLON,JLEV))
   3982          ZZI_PTKEEDMF(JLON,1,JLEV) = PTKEEDMF(JLON,JLEV)
   3983          ZZI_TKEEDMFS(JLON,1,JLEV) = PTKEEDMF(JLON,JLEV)*ZINVDT
   3984       ENDDO
   3985     ENDDO
   3986     ZZI_ZW_UP(KIDIA:KFDIA,1,1:IKT)=0.
   3987     ZZI_ZFRAC_UP(KIDIA:KFDIA,1,1:IKT)=0.
   3988   ENDIF
   3989   IF(MOD(KSTEP+1,NPRINTFR)==0) THEN
   3990     WRITE(NULOUT,*)"apres surface zsfth zsfrv",ZSFTH(NPTP,1),ZSFRV(NPTP,1)
   3991   ENDIF
   3992 
   3993 
   3994   ZRC_MF = 0.0_JPRB
   3995   ZRI_MF = 0.0_JPRB
   3996   ZCF_MF = 0.0_JPRB
   3997 
   3998   CALL ARO_SHALLOW_MF (KKL=IKL, KLON=ILONMNH,KLEV=KLEV,KRR=NRR,KRRL=NRRL,&
   3999    & KRRI=NRRI,KSV=NGFL_EXT,HMF_UPDRAFT=CMF_UPDRAFT, HMF_CLOUD=CMF_CLOUD,&
   4000    & HFRAC_ICE='T',&
   4001    & OMIXUV=LMIXUV, ONOMIXLG=.FALSE.,KSV_LGBEG=0,KSV_LGEND=0,&
   4002    & KTCOUNT=KSTEP+1, PTSTEP=ZDT,&
   4003    & PZZ=ZZZ(KIDIA:KFDIA,1,1:KLEV),PZZF= ZZZF(KIDIA:KFDIA,1,1:KLEV),&
   4004    & PDZZF= ZDZZF(KIDIA:KFDIA,1,1:KLEV),&
   4005    & PRHODJ=ZZI_RHODJM(KIDIA:KFDIA,1,1:KLEV),&
   4006    & PRHODREF=ZZI_RHODREFM(KIDIA:KFDIA,1,1:KLEV),&
   4007    & PPABSM=ZZI_PABSM(KIDIA:KFDIA,1,1:KLEV),&
   4008    & PEXNM=ZZI_EXNREFM(KIDIA:KFDIA,1,1:KLEV),&
   4009    & PSFTH=ZSFTH(KIDIA:KFDIA,1),PSFRV=ZSFRV(KIDIA:KFDIA,1),&
   4010    & PTHM=ZZI_THM(KIDIA:KFDIA,1,1:KLEV),PRM=ZZI_RM(KIDIA:KFDIA,1,1:KLEV,:),&
   4011    & PUM=ZZI_UM(KIDIA:KFDIA,1,1:KLEV),PVM=ZZI_VM(KIDIA:KFDIA,1,1:KLEV),&
   4012    & PTKEM=ZZI_TKEM(KIDIA:KFDIA,1,1:KLEV),PSVM=ZZI_SVM(KIDIA:KFDIA,1,1:KLEV,:),&
   4013    & PDUDT_MF=ZZI_MFUS(KIDIA:KFDIA,1,1:KLEV),PDVDT_MF=ZZI_MFVS(KIDIA:KFDIA,1,1:KLEV),&
   4014    & PDTHLDT_MF=ZZI_THLS(KIDIA:KFDIA,1,1:KLEV),PDRTDT_MF=ZZI_RTS(KIDIA:KFDIA,1,1:KLEV),&
   4015    & PDSVDT_MF=ZZI_SVSAVE(KIDIA:KFDIA,1,1:KLEV,:),&
   4016    & PSIGMF=ZSIGMF(KIDIA:KFDIA,1,1:KLEV),PRC_MF=ZRC_MF(KIDIA:KFDIA,1,1:KLEV),&
   4017    & PRI_MF=ZRI_MF(KIDIA:KFDIA,1,1:KLEV),&

Page 73          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   4018    & PCF_MF=ZCF_MF(KIDIA:KFDIA,1,1:KLEV),PFLXZTHVMF=ZFLXZTHVMF(KIDIA:KFDIA,1,1:KLEV),&
   4019    & PTHL_UP=ZZI_THETAL_UP(KIDIA:KFDIA,1,1:KLEV),PRT_UP= ZZI_RT_UP(KIDIA:KFDIA,1,1:KLEV),&
   4020    & PRV_UP=ZZI_ZRV_UP(KIDIA:KFDIA,1,1:KLEV),&
   4021    & PRC_UP=ZZI_RC_UP(KIDIA:KFDIA,1,1:KLEV),PRI_UP=ZZI_RI_UP(KIDIA:KFDIA,1,1:KLEV),&
   4022    & PU_UP=ZZI_ZU_UP(KIDIA:KFDIA,1,1:KLEV),PV_UP=ZZI_ZV_UP(KIDIA:KFDIA,1,1:KLEV),&
   4023    & PTHV_UP=ZZI_THETAV_UP(KIDIA:KFDIA,1,1:KLEV),PW_UP=ZZI_ZW_UP(KIDIA:KFDIA,1,1:KLEV),&
   4024    & PFRAC_UP=ZZI_ZFRAC_UP(KIDIA:KFDIA,1,1:KLEV),PEMF=ZZI_MF_UP(KIDIA:KFDIA,1,1:KLEV))
   4025 
   4026   ZFLXZTHVMF_SUM=ZFLXZTHVMF_SUM+ZFLXZTHVMF
   4027 ! traitement des sorties pour repasser dans le monde Aladin
   4028 
   4029 IF ((CMF_CLOUD=='DIRE'.OR.CMF_CLOUD=='BIGA').AND.JDRAFT==3) THEN
   4030 ! sauvegarde pour le schema de nuage
   4031   DO JLEV = 1,KLEV
   4032     DO JLON = KIDIA,KFDIA
   4033       PEZDIAG(JLON,JLEV,1)=ZRC_MF(JLON,1,JLEV)
   4034       PEZDIAG(JLON,JLEV,3)=ZRI_MF(JLON,1,JLEV)
   4035       PEZDIAG(JLON,JLEV,2)=ZCF_MF(JLON,1,JLEV)
   4036     ENDDO
   4037   ENDDO
   4038 ENDIF
   4039 ZZI_US=ZZI_US+ZZI_MFUS
   4040 ZZI_VS=ZZI_VS+ZZI_MFVS
   4041 ZZI_THS=ZZI_THS+ZZI_THLS
   4042 ZZI_RS(KIDIA:KFDIA,1,:,1)=ZZI_RS(KIDIA:KFDIA,1,:,1)+ZZI_RTS(KIDIA:KFDIA,1,:)
   4043 
   4044 !calcul de tendance et inversion des niveaux pour le vent horizontal
   4045   DO JLEV = 1,KLEV
   4046     DO JLON = KIDIA,KFDIA
   4047       PTENDU(JLON,JLEV)=PTENDU(JLON,JLEV)+ZZI_MFUS(JLON,1,JLEV)
   4048       PTENDV(JLON,JLEV)=PTENDV(JLON,JLEV)+ZZI_MFVS(JLON,1,JLEV)
   4049     ENDDO
   4050   ENDDO
   4051 
   4052 !conversion de la tendance de theta en tendance de T et inversion niveau
   4053   DO JLEV = 1,KLEV
   4054     DO JLON = KIDIA,KFDIA
   4055       PTENDT(JLON,JLEV)=PTENDT(JLON,JLEV)+ZZI_THLS(JLON,1,JLEV)&
   4056        & *ZZI_EXNREFM(JLON,1,JLEV)
   4057     ENDDO
   4058   ENDDO
   4059 
   4060 !inversion niveaux tendances des ri et conversion en qi en multipliant par qd
   4061   DO JLEV=1,KLEV
   4062     DO JLON=KIDIA,KFDIA
   4063       PTENDR(JLON,JLEV,1) = PTENDR(JLON,JLEV,1)&
   4064        & +ZZI_RTS(JLON,1,JLEV)*ZQDM(JLON,JLEV)
   4065     ENDDO
   4066   ENDDO
   4067 
   4068 ! End loop on JDRAFT
   4069 ENDDO
   4070 
   4071 IF (ALLOCATED(ZMF_UP)) THEN
   4072   DEALLOCATE(ZMF_UP, ZTHETAL_UP, ZTHTV_UP, ZQT_UP, ZQC_UP, ZQI_UP, ZU_UP, ZV_UP)
   4073 ENDIF
   4074 

Page 74          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   4075 ! End test (IF LMFSHAL)
   4076 ENDIF
   4077 
   4078 
   4079 !    ------------------------------------------------------------------
   4080 !     10 - TURBULENCE.
   4081 !     --------------------------------------------------------------------
   4082 IF (LTURB) THEN
   4083 
   4084 ! 10.1 sauvegarde pour le calcul des tendances
   4085   ZZI_THSAVE=ZZI_THS
   4086   ZZI_RSAVE=ZZI_RS
   4087   ZZI_TKESAVE=ZZI_TKES
   4088   IF (NGFL_EXT/=0) THEN
   4089     ZZI_SVSAVE=ZZI_SVS
   4090   ENDIF
   4091 
   4092 !prints
   4093   IF(MOD(KSTEP+1,NPRINTFR)==0) THEN
   4094     WRITE(NULOUT,*)'avant d entrer dans turb sous apl_arome U'
   4095     WRITE(NULOUT,*)MAXVAL(ZZI_UM(KIDIA:KFDIA,1,IKB)),&
   4096      & MINVAL(ZZI_UM(KIDIA:KFDIA,1,IKB))
   4097     WRITE(NULOUT,*)'avant d entrer dans turb sous apl_arome V'
   4098     WRITE(NULOUT,*)MAXVAL(ZZI_VM(KIDIA:KFDIA,1,IKB)),&
   4099      & MINVAL(ZZI_VM(KIDIA:KFDIA,1,IKB))
   4100     WRITE(NULOUT,*)'avant d entrer dans turb sous apl_arome W'
   4101     WRITE(NULOUT,*)MAXVAL(ZZI_WM(KIDIA:KFDIA,1,IKB)),&
   4102      & MINVAL(ZZI_WM(KIDIA:KFDIA,1,IKB))
   4103     WRITE(NULOUT,*)'avant d entrer dans turb sous apl_arome TKE'
   4104     WRITE(NULOUT,*)MAXVAL(ZZI_TKEM(KIDIA:KFDIA,1,IKB)),&
   4105      & MINVAL(ZZI_TKEM(KIDIA:KFDIA,1,IKB))
   4106     DO JLEV=1,KLEV
   4107       WRITE(NULOUT,*)JLEV,ZZI_UM(NPTP,1,JLEV),ZZI_VM(NPTP,1,JLEV)&
   4108       &,ZZI_WM(NPTP,1,JLEV),ZZI_TKEM(NPTP,1,JLEV)
   4109     ENDDO
   4110     WRITE(NULOUT,*)'u v w tke a S'
   4111     DO JLEV=1,KLEV
   4112       WRITE(NULOUT,*)JLEV,ZZI_US(NPTP,1,JLEV),ZZI_VS(NPTP,1,JLEV)&
   4113       &,ZZI_WS(NPTP,1,JLEV),ZZI_TKES(NPTP,1,JLEV)
   4114     ENDDO
   4115     WRITE(NULOUT,*)'ZZI_THS avant turb'
   4116     DO JLEV=1,KLEV
   4117       WRITE(NULOUT,*)JLEV,ZZI_THS(NPTP,1,JLEV)
   4118     ENDDO
   4119   ENDIF
   4120 
   4121 ! 10.2 calcul TURB
   4122   ZZTOP(KIDIA:KFDIA)=ZZI_APHIM(KIDIA:KFDIA,0)*ZINVG
   4123 
   4124   CALL ARO_TURB_MNH(KKA=IKA,KKU=IKU,KKL=IKL,KLON=ILONMNH,KLEV=KLEV,&
   4125    & KRR=NRR, KRRL=NRRL,KRRI= NRRI,&
   4126    & KSV=NGFL_EXT,KTCOUNT=KSTEP+1,PTSTEP=ZDT,&
   4127    & PZZ=ZZZ(KIDIA:KFDIA,:,1:KLEV),PZZF=ZZZF(KIDIA:KFDIA,:,1:KLEV),&
   4128    & PZZTOP= ZZTOP,PRHODJ=ZZI_RHODJM(KIDIA:KFDIA,:,1:KLEV),&
   4129    & PTHVREF=ZTHVREFM(KIDIA:KFDIA,:,1:KLEV),&
   4130    & PRHODREF=ZZI_RHODREFM(KIDIA:KFDIA,:,1:KLEV),HINST_SFU='M',&
   4131    & HMF_UPDRAFT=CMF_UPDRAFT,&

Page 75          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   4132    & PSFTH=ZSFTH(KIDIA:KFDIA,1),PSFRV=ZSFRV(KIDIA:KFDIA,1),&
   4133    & PSFSV=ZSFSV(KIDIA:KFDIA,1,1:NGFL_EXT),PSFU=ZSFU(KIDIA:KFDIA,1),&
   4134    & PSFV=ZSFV(KIDIA:KFDIA,1),PPABSM=ZZI_PABSM(KIDIA:KFDIA,:,1:KLEV),&
   4135    & PUM=ZZI_UM(KIDIA:KFDIA,:,1:KLEV),&
   4136    & PVM=ZZI_VM(KIDIA:KFDIA,:,1:KLEV),&
   4137    & PWM=ZZI_WM(KIDIA:KFDIA,:,1:KLEV),&
   4138    & PTKEM=ZZI_TKEM(KIDIA:KFDIA,:,1:KLEV),PEPSM=ZEPSM,&
   4139    & PSVM=ZZI_SVM(KIDIA:KFDIA,:,1:KLEV,:),&
   4140    & PSRCM=ZSRCS(KIDIA:KFDIA,:,1:KLEV),&
   4141    & PUT=ZZI_UM(KIDIA:KFDIA,:,1:KLEV),&
   4142    & PVT=ZZI_VM(KIDIA:KFDIA,:,1:KLEV),&
   4143    & PWT=ZZI_WM(KIDIA:KFDIA,:,1:KLEV),&
   4144    & PTHM=ZZI_THM(KIDIA:KFDIA,:,1:KLEV),&
   4145    & PRM=ZZI_RM(KIDIA:KFDIA,:,1:KLEV,:),&
   4146    & PRUS=ZZI_US(KIDIA:KFDIA,:,1:KLEV),&
   4147    & PRVS=ZZI_VS(KIDIA:KFDIA,:,1:KLEV),&
   4148    & PRWS=ZZI_WS(KIDIA:KFDIA,:,1:KLEV),&
   4149    & PRTHS=ZZI_THS(KIDIA:KFDIA,:,1:KLEV),&
   4150    & PRRS=ZZI_RS(KIDIA:KFDIA,:,1:KLEV,:),&
   4151    & PRSVS=ZZI_SVS(KIDIA:KFDIA,:,1:KLEV,:),&
   4152    & PRTKES=ZZI_TKES(KIDIA:KFDIA,:,1:KLEV),&
   4153    & PREPSS=ZEPSS,PSIGS=ZZI_SIGS(KIDIA:KFDIA,:,1:KLEV),&
   4154    & OSUBG_COND=LOSUBG_COND,&
   4155    & PFLXZTHVMF=ZFLXZTHVMF_SUM(KIDIA:KFDIA,:,1:KLEV),&
   4156    & PLENGTHM=ZZI_LENGTHM(KIDIA:KFDIA,:,1:KLEV),PLENGTHH=ZZI_LENGTHH(KIDIA:KFDIA,:,1:KLEV),&
   4157    & MFMOIST=ZZI_MF_UP(KIDIA:KFDIA,:,1:KLEV),&
   4158    & PDRUS_TURB=ZTENDU_TURB(KIDIA:KFDIA,:,1:KLEV),&
   4159    & PDRVS_TURB=ZTENDV_TURB(KIDIA:KFDIA,:,1:KLEV),&
   4160    & PDRTHLS_TURB=ZTENDTHL_TURB(KIDIA:KFDIA,:,1:KLEV),&
   4161    & PDRRTS_TURB=ZTENDRT_TURB(KIDIA:KFDIA,:,1:KLEV),&
   4162    & PDRSVS_TURB=ZTENDSV_TURB(KIDIA:KFDIA,:,1:KLEV,:),&
   4163    & PDP=ZDP(KIDIA:KFDIA,1,1:KLEV), PTP=ZTP(KIDIA:KFDIA,1,1:KLEV),&
   4164    & PTPMF=ZTPMF(KIDIA:KFDIA,1,1:KLEV),&
   4165    & PTDIFF=ZTDIFF(KIDIA:KFDIA,1,1:KLEV), PTDISS=ZTDISS(KIDIA:KFDIA,1,1:KLEV),&
   4166    & PEDR=ZZI_EDR(KIDIA:KFDIA,:,1:KLEV),YDDDH=YDDDH)
   4167 
   4168 
   4169   DO JLEV = 1 , KLEV
   4170     DO JLON = KIDIA,KFDIA
   4171        PEDR(JLON,JLEV)=ZZI_EDR(JLON,1,JLEV)
   4172     ENDDO
   4173   ENDDO
   4174    
   4175   IF (LFLEXDIA) THEN
   4176     ZDP(:,1,:)=ZDP(:,1,:)*PDELPM(:,:)*ZINVG
   4177     ZTP(:,1,:)=(ZTP(:,1,:)-ZTPMF(:,1,:))*PDELPM(:,:)*ZINVG
   4178     ZTPMF(:,1,:)=ZTPMF(:,1,:)*PDELPM(:,:)*ZINVG
   4179     ZTDIFF(:,1,:)=ZTDIFF(:,1,:)*PDELPM(:,:)*ZINVG
   4180     ZTDISS(:,1,:)=ZTDISS(:,1,:)*PDELPM(:,:)*ZINVG
   4181     IF (LDDH_OMP) THEN
   4182       CALL NEW_ADD_FIELD_3D(ZDP(:,1,:),'TKEPRDY',YDDDH)
   4183       CALL NEW_ADD_FIELD_3D(ZTP(:,1,:),'TKEPRTH',YDDDH)
   4184       CALL NEW_ADD_FIELD_3D(ZTPMF(:,1,:),'TKEPRTHMF',YDDDH)
   4185       CALL NEW_ADD_FIELD_3D(ZTDIFF(:,1,:),'TKEDIFF',YDDDH)
   4186       CALL NEW_ADD_FIELD_3D(ZTDISS(:,1,:),'TKEDISS',YDDDH)
   4187     ELSE
   4188       CALL ADD_FIELD_3D(ZDP(:,1,:),'TKEPRDY','T','ARO',.TRUE.,.TRUE.)

Page 76          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   4189       CALL ADD_FIELD_3D(ZTP(:,1,:),'TKEPRTH','T','ARO',.TRUE.,.TRUE.)
   4190       CALL ADD_FIELD_3D(ZTPMF(:,1,:),'TKEPRTHMF','T','ARO',.TRUE.,.TRUE.)
   4191       CALL ADD_FIELD_3D(ZTDIFF(:,1,:),'TKEDIFF','T','ARO',.TRUE.,.TRUE.)
   4192       CALL ADD_FIELD_3D(ZTDISS(:,1,:),'TKEDISS','T','ARO',.TRUE.,.TRUE.)
   4193     ENDIF
   4194   ENDIF 
   4195 
   4196   IF(MOD(KSTEP+1,NPRINTFR)==0) THEN
   4197     WRITE(NULOUT,*)'u v w a S apres turb'
   4198     DO JLEV=1,KLEV
   4199       WRITE(NULOUT,*)JLEV,ZZI_US(NPTP,1,JLEV),ZZI_VS(NPTP,1,JLEV)&
   4200        &,ZZI_WS(NPTP,1,JLEV),ZZI_TKES(NPTP,1,JLEV)
   4201     ENDDO
   4202     WRITE(NULOUT,*)'THS TKES SIGS apres turb'
   4203     DO JLEV=1,KLEV
   4204       WRITE(NULOUT,*)JLEV,ZZI_THS(NPTP,1,JLEV),ZZI_TKES(NPTP,1,JLEV)&
   4205        &,ZZI_SIGS(NPTP,1,JLEV)
   4206     ENDDO
   4207   ENDIF
   4208 
   4209 ! avance temporelle et inversion niveau pour ZZI_SIGS
   4210   IF (LOSUBG_COND .AND. LOSIGMAS) THEN
   4211     IF (CMF_CLOUD=='DIRE'.OR.CMF_CLOUD=='BIGA'.OR.CMF_CLOUD=='NONE') THEN
   4212       DO JLEV = 1,KLEV
   4213         DO JLON = KIDIA,KFDIA
   4214           PSIGS(JLON,JLEV)=ZZI_SIGS(JLON,1,JLEV)
   4215         ENDDO
   4216       ENDDO
   4217     ELSEIF (CMF_CLOUD=='STAT') THEN
   4218       DO JLEV = 1,KLEV
   4219         DO JLON = KIDIA,KFDIA
   4220           PSIGS(JLON,JLEV)=SQRT(ZZI_SIGS(JLON,1,JLEV)**2+ZSIGMF(JLON,1,JLEV)**2 )
   4221         ENDDO
   4222       ENDDO
   4223     ENDIF
   4224   ENDIF
   4225 
   4226 
   4227 !10.3. traitement des sorties pour repasser dans le monde Aladin
   4228 !calcul de tendance et inversion des niveaux pour le vent horizontal et la TKE
   4229 
   4230   DO JLEV = 1,KLEV
   4231     DO JLON = KIDIA,KFDIA
   4232       PTENDU(JLON,JLEV)=PTENDU(JLON,JLEV)+ZTENDU_TURB(JLON,1,JLEV)
   4233       PTENDV(JLON,JLEV)=PTENDV(JLON,JLEV)+ZTENDV_TURB(JLON,1,JLEV)
   4234 ! for the moment, turbulence do not compute w tendency:
   4235       PTENDW(JLON,JLEV)=0.0_JPRB
   4236 ! PTENDW(JLON,JLEV)+(ZZI_WS(JLON,1,JLEV)-&
   4237 ! & ZZI_WSAVE(JLON,1,JLEV))
   4238        IF (LHARATU) THEN
   4239           PTENDTKE(JLON,JLEV)=PTENDTKE(JLON,JLEV)+(ZZI_TKEEDMFS(JLON,1,JLEV)-&
   4240           & ZZI_TKESAVE(JLON,1,JLEV))
   4241        ELSE
   4242          PTENDTKE(JLON,JLEV)=PTENDTKE(JLON,JLEV)+(ZZI_TKES(JLON,1,JLEV)-&
   4243          & ZZI_TKESAVE(JLON,1,JLEV))
   4244        ENDIF
   4245 

Page 77          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   4246     ENDDO
   4247   ENDDO
   4248 
   4249   IF(NGFL_EXT/=0) THEN
   4250     DO JLEV = 1,KLEV
   4251       DO JLON = KIDIA,KFDIA
   4252         PTENDEXT(JLON,JLEV,:)=PTENDEXT(JLON,JLEV,:)+&
   4253          & (ZZI_SVS(JLON,1,JLEV,:)-&
   4254          & ZZI_SVSAVE(JLON,1,JLEV,:))
   4255       ENDDO
   4256     ENDDO
   4257   ENDIF
   4258 
   4259 
   4260 !conversion de la tendance de theta en tendance de T et inversion niveau
   4261   DO JLEV = 1,KLEV
   4262     DO JLON = KIDIA,KFDIA
   4263       PTENDT(JLON,JLEV)=PTENDT(JLON,JLEV)+ZTENDTHL_TURB(JLON,1,JLEV)&
   4264        & *ZZI_EXNREFM(JLON,1,JLEV)
   4265     ENDDO
   4266   ENDDO
   4267 !inversion niveaux tendances des rv et conversion en qv en multipliant par qd
   4268     DO JLEV=1,KLEV
   4269       DO JLON=KIDIA,KFDIA
   4270         PTENDR(JLON,JLEV,1)= PTENDR(JLON,JLEV,1)&
   4271          & +ZTENDRT_TURB(JLON,1,JLEV)*ZQDM(JLON,JLEV)
   4272       ENDDO
   4273     ENDDO
   4274 
   4275 ENDIF
   4276 !    ------------------------------------------------------------------
   4277 !     11 - MICROPHYSIQUE.
   4278 !     --------------------------------------------------------------------
   4279 IF (LMICRO) THEN
   4280 
   4281   ZZI_THSAVE=ZZI_THS
   4282   ZZI_RSAVE=ZZI_RS
   4283   
   4284 !prints
   4285   IF (MOD(KSTEP+1,NPRINTFR)==0) THEN
   4286     WRITE(NULOUT,*)'avant rain_ice sous apl_arome'
   4287     WRITE(NULOUT,*)'JLEV   ZZZF      ZZZ      ZRHODREF',&
   4288      & '    ZRHODJ      ZZI_PABSM        ZZI_THS       ZZI_THM      '   
   4289     DO JLEV=1,KLEV+1 
   4290       WRITE(NULOUT,'(I2,x,7f10.3)')JLEV,ZZZF(NPTP,1,JLEV),ZZZ(NPTP,1,JLEV),&
   4291        & ZZI_RHODREFM(NPTP,1,JLEV),&
   4292        & ZZI_RHODJM(NPTP,1,JLEV), ZZI_PABSM(NPTP,1,JLEV), ZZI_THS(NPTP,1,JLEV),&
   4293        & ZZI_THM(NPTP,1,JLEV)  
   4294     ENDDO 
   4295     WRITE(NULOUT,*)'JLEV        PDELPM        ZZI_PABSM         ZEXNREF',&
   4296        &'          ZZI_SIGS'
   4297     DO JLEV=2,KLEV
   4298       WRITE(NULOUT,'(I2,x,4f10.3)')JLEV, PDELPM(NPTP,JLEV),&
   4299        & ZZI_PABSM(NPTP,1,JLEV),ZZI_EXNREFM(NPTP,1,JLEV),ZZI_SIGS(NPTP,1,JLEV)  
   4300     ENDDO
   4301     WRITE(NULOUT,*)'JLEV    PTM       PRM          PCPM'
   4302     DO JLEV=1,KLEV

Page 78          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   4303       WRITE(NULOUT,'(I2,x,3f10.3)')JLEV,ZTM(NPTP,KLEV+1-JLEV),&
   4304        & ZRHM(NPTP,KLEV+1-JLEV)&
   4305        & ,ZCPM(NPTP,KLEV+1-JLEV)  
   4306     ENDDO
   4307     WRITE (NULOUT,*)'JLEV  rhoQv  rhoQc   rhoQr   rhoQi   rhoQs   rhoQg'
   4308     DO JLEV=1,KLEV
   4309       WRITE(NULOUT,'(I2,x,6e11.4)')JLEV,ZZI_RM(NPTP,1,JLEV,1),&
   4310        & ZZI_RM(NPTP,1,JLEV,2),&
   4311        & ZZI_RM(NPTP,1,JLEV,3),ZZI_RM(NPTP,1,JLEV,4),ZZI_RM(NPTP,1,JLEV,5),&
   4312        & ZZI_RM(NPTP,1,JLEV,6)  
   4313     ENDDO
   4314     WRITE (NULOUT,*)'JLEV  ZRSQv  ZRSQc   ZRSQr   ZRSQi   ZRSQs   ZRSQg'
   4315     DO JLEV=1,KLEV
   4316       WRITE(NULOUT,'(I2,x,6e11.4)')JLEV,ZZI_RS(NPTP,1,JLEV,1),&
   4317        & ZZI_RS(NPTP,1,JLEV,2),&
   4318        & ZZI_RS(NPTP,1,JLEV,3),ZZI_RS(NPTP,1,JLEV,4),ZZI_RS(NPTP,1,JLEV,5),&
   4319        & ZZI_RS(NPTP,1,JLEV,6)  
   4320     ENDDO
   4321     WRITE(NULOUT,*)'ZDT=',ZDT
   4322     WRITE(NULOUT,*)'NRR & co',NRR,KSTEP+1,NSPLITR,LOSUBG_COND,&
   4323      & LOSIGMAS, CSUBG_AUCV_RC,LOWARM  
   4324   ENDIF
   4325   
   4326 ! because of leap-frog time step supposed in mesoNH we have to divide ACPR*
   4327 !  by two before calling AC_RAIN_ICE and multiply after
   4328   DO JLON=KIDIA,KFDIA
   4329     ZACPRR(JLON,1)=0.5_JPRB*ZACPRR(JLON,1)
   4330     ZACPRS(JLON,1)=0.5_JPRB*ZACPRS(JLON,1)
   4331     ZACPRG(JLON,1)=0.5_JPRB*ZACPRG(JLON,1)
   4332   ENDDO
   4333 
   4334    ZSEA(:,1)=0.0_JPRB
   4335    ZTOWN(:,1)=0.0_JPRB
   4336 
   4337    IF (LOLSMC) THEN
   4338     DO JLON = KIDIA, KFDIA
   4339      IF(PLSM(JLON) < 0.5) THEN
   4340         ZSEA(JLON,1) = 1.0_JPRB
   4341      ENDIF
   4342     ENDDO
   4343    ENDIF
   4344          
   4345    IF (LOTOWNC) THEN
   4346      ZTOWN(:,1) = ZTOWNS
   4347    ENDIF  
   4348 
   4349   CALL ARO_RAIN_ICE (KLEV,IKU,IKL,ILONMNH,KLEV,NRR,KSTEP+1,NSPLITR,&
   4350    & LOSUBG_COND, CSUBG_AUCV_RC, LOSEDIC,CSEDIM,&
   4351    & ZDT,ZDZZ(KIDIA:KFDIA,:,1:KLEV) ,&
   4352    & ZZI_RHODJM(KIDIA:KFDIA,:,1:KLEV),ZZI_RHODREFM(KIDIA:KFDIA,:,1:KLEV),&
   4353    & ZZI_EXNREFM(KIDIA:KFDIA,:,1:KLEV),&
   4354    & ZZI_PABSM(KIDIA:KFDIA,:,1:KLEV),&
   4355    & ZZI_THM(KIDIA:KFDIA,:,1:KLEV),ZZI_RM(KIDIA:KFDIA,:,1:KLEV,:),&
   4356    & ZZI_SIGS(KIDIA:KFDIA,:,1:KLEV),&
   4357    & ZNEBMNH(KIDIA:KFDIA,:,1:KLEV),&
   4358    & ZZI_THS(KIDIA:KFDIA,:,1:KLEV),ZZI_RS(KIDIA:KFDIA,:,1:KLEV,:),&
   4359    & ZEVAP(KIDIA:KFDIA,:,1:KLEV),&

Page 79          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   4360    & ZCIT(KIDIA:KFDIA,:,1:KLEV),LOWARM,ZSEA,ZTOWN,&
   4361    & LOCND2,LGRSN,&
   4362    & ZINPRR_NOTINCR(KIDIA:KFDIA,1),ZACPRR(KIDIA:KFDIA,1),&
   4363    & ZINPRS_NOTINCR(KIDIA:KFDIA,1),ZACPRS(KIDIA:KFDIA,1),&
   4364    & ZINPRG_NOTINCR(KIDIA:KFDIA,1),ZACPRG(KIDIA:KFDIA,1),&
   4365    & ZINPRH_NOTINCR(KIDIA:KFDIA,1),ZZI_PFPR(KIDIA:KFDIA,1,1:KLEV,:),&
   4366    & CSUBG_RC_RR_ACCR, CSUBG_RR_EVAP, CSUBG_RPR_PDF,YDDDH)
   4367 
   4368   DO JLON=KIDIA,KFDIA
   4369     ZINPRR(JLON,1)=ZINPRR(JLON,1)+ZINPRR_NOTINCR(JLON,1)
   4370     ZINPRS(JLON,1)=ZINPRS(JLON,1)+ZINPRS_NOTINCR(JLON,1)
   4371     ZINPRG(JLON,1)=ZINPRG(JLON,1)+ZINPRG_NOTINCR(JLON,1)
   4372     ZINPRH(JLON,1)=ZINPRH(JLON,1)+ZINPRH_NOTINCR(JLON,1)
   4373   ENDDO
   4374 
   4375   DO JLON=KIDIA,KFDIA
   4376     ZACPRR(JLON,1)=2._JPRB*ZACPRR(JLON,1)
   4377     ZACPRS(JLON,1)=2._JPRB*ZACPRS(JLON,1)
   4378     ZACPRG(JLON,1)=2._JPRB*ZACPRG(JLON,1)
   4379   ENDDO
   4380 
   4381 !conversion de la tendance de theta en tendance de T et inversion niveau
   4382   DO JLEV = 1,KLEV
   4383     DO JLON = KIDIA,KFDIA
   4384       PTENDT(JLON,JLEV)= PTENDT(JLON,JLEV)+(ZZI_THS(JLON,1,JLEV)-&
   4385        & ZZI_THSAVE(JLON,1,JLEV))*ZZI_EXNREFM(JLON,1,JLEV)  
   4386     ENDDO
   4387   ENDDO
   4388   
   4389 !inversion niveaux tendances des ri et conversion en qi en multipliant par qd
   4390   DO JR=1,NRR
   4391     DO JLEV=1,KLEV
   4392       DO JLON=KIDIA,KFDIA
   4393         PTENDR(JLON,JLEV,JR)=PTENDR(JLON,JLEV,JR)&
   4394          & +(ZZI_RS(JLON,1,JLEV,JR)&
   4395          & -ZZI_RSAVE(JLON,1,JLEV,JR))*ZQDM(JLON,JLEV)  
   4396       ENDDO
   4397     ENDDO
   4398   ENDDO
   4399 
   4400 !inversion of levels of upper-air precipitation
   4401   DO JR=2,NRR ! no precip for qv
   4402     ZFPR(:,0,JR)=0._JPRB  ! zero precip at top of atmosphere
   4403     DO JLEV=1,KLEV
   4404       DO JLON=KIDIA,KFDIA
   4405         ZFPR(JLON,JLEV,JR)=ZZI_PFPR(JLON,1,JLEV,JR)
   4406       ENDDO
   4407     ENDDO
   4408   ENDDO
   4409 !store cumulative 3D precipitations for mocage
   4410   IF (LFPREC3D) THEN
   4411     DO JR=2,NRR ! no precip for qv
   4412       DO JLEV=1,KLEV
   4413         DO JLON=KIDIA,KFDIA
   4414           PEZDIAG(JLON,JLEV,4)=PEZDIAG(JLON,JLEV,4)+ZZI_PFPR(JLON,1,JLEV,JR)&
   4415                                                      &*1000._JPRB*PDT
   4416         ENDDO

Page 80          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   4417       ENDDO
   4418     ENDDO
   4419   ENDIF
   4420 !prints
   4421   IF(MOD(KSTEP+1,NPRINTFR)==0) THEN
   4422     WRITE(NULOUT,*)'PTENDT en sortie de rain_ice'
   4423     WRITE(NULOUT,*)'ZZI_THS en sortie de rain_ice'
   4424     DO JLEV=1,KLEV
   4425       WRITE(NULOUT,*)PTENDT(NPTP,JLEV),ZZI_THS(NPTP,1,JLEV)
   4426     ENDDO
   4427     WRITE (NULOUT,*)'JLEV  ZTENDQv  ZTZNDQc   ZTENDQr   ZTENDQi'&
   4428      & ,'ZTENDQs   ZTENDQg'  
   4429     DO JLEV=1,KLEV
   4430       WRITE(NULOUT,'(I2,x,6e11.4)')JLEV,PTENDR(NPTP,JLEV,1),&
   4431        & PTENDR(NPTP,JLEV,2),&
   4432        & PTENDR(NPTP,JLEV,3),PTENDR(NPTP,JLEV,4),PTENDR(NPTP,JLEV,5),&
   4433        & PTENDR(NPTP,JLEV,6)  
   4434     ENDDO
   4435     WRITE (NULOUT,*) 'ZSRCS et ZNEBMNH',MAXVAL(ZSRCS),MAXVAL(ZNEBMNH) 
   4436   ENDIF
   4437   
   4438   IF (LRDEPOS) THEN
   4439     ISPLITR=NSPLITR
   4440     ZZI_SVSAVE=ZZI_SVM
   4441     CALL ARO_RAINAERO(ILONMNH,KLEV,NGFL_EXT,NRR, PDT,&
   4442         &          ZZI_SVM(KIDIA:KFDIA,:,:,1:NGFL_EXT),&
   4443         &          ZZZ(KIDIA:KFDIA,:,:),&
   4444         &          ZZI_PABSM(KIDIA:KFDIA,:,:),&
   4445         &          ZZI_THM(KIDIA:KFDIA,:,:),&
   4446         &          ZZI_RHODREFM(KIDIA:KFDIA,:,:),&
   4447         &          KSTEP+1,&
   4448         &          ZZI_RM(KIDIA:KFDIA,:,:,:),&
   4449         &          ZEVAP(KIDIA:KFDIA,:,:),&
   4450         &          ISPLITR               )
   4451 ! return to tendency
   4452      DO JLEV = 1,KLEV
   4453        DO JLON = KIDIA,KFDIA
   4454          PTENDEXT(JLON,JLEV,:)=PTENDEXT(JLON,JLEV,:)+&
   4455          & (ZZI_SVM(JLON,1,JLEV,:)-&
   4456          & ZZI_SVSAVE(JLON,1,JLEV,:))*ZINVDT
   4457        ENDDO
   4458      ENDDO
   4459   ENDIF
   4460 
   4461 ENDIF
   4462     
   4463 !    ------------------------------------------------------------------
   4464 !     11 - SAVE FIELDS FOR EXT. SURFACE.
   4465 !     --------------------------------------------------------------------
   4466 !    Cette partie n'est plus necessaire apres branchement de la physique
   4467 !    de surface sous apl_arome
   4468 
   4469 !    ------------------------------------------------------------------
   4470 !     12 - CALL CHEMICAL SCHEME.
   4471 !     --------------------------------------------------------------------
   4472 IF (LUSECHEM) THEN
   4473 ! ANNEE

Page 81          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   4474 IYEAR = NINDAT / 10000
   4475 ! MOIS
   4476 IMONTH = (NINDAT - 10000*IYEAR ) / 100
   4477 ! JOUR DU MOIS
   4478 IDAY = NINDAT - 10000*IYEAR - 100*IMONTH
   4479 
   4480 DO JLON = KIDIA,KFDIA
   4481   ZLAT(JLON,1) = 180. * ASIN(PGEMU(JLON)) / (2.*ASIN(1.))
   4482   ZLON(JLON,1) = 180. * PGELAM(JLON) / (2.*ASIN(1.))
   4483   ZZENITH(JLON,1) = ACOS( PMU0(JLON) )
   4484    ZZS(JLON,1)=POROG(JLON)/RG
   4485    ZALB_UV(JLON,1)=ZALBP(JLON,1)
   4486 ENDDO
   4487 
   4488 DO JGFL=1,NGFL_EXT
   4489   DO JLEV=2,KLEV+1
   4490     DO JLON= KIDIA,KFDIA
   4491      ZZI_SVS(JLON,1,JLEV, JGFL)=MAX(0.0_JPRB, ZZI_SVS(JLON,1,JLEV, JGFL))
   4492      ZZI_SVSAVE(JLON,1,JLEV, JGFL)=ZZI_SVS(JLON,1,JLEV, JGFL)
   4493     ENDDO
   4494   ENDDO
   4495 ENDDO
   4496     IEZDIAG_CHEM=NGFL_EZDIAG-IOFF_MFSHAL+1
   4497     CALL ARO_MNHC(ZZI_SVS(KIDIA:KFDIA,1:1,1:KLEV,1:NGFL_EXT),&
   4498              & ZZI_RHODREFM(KIDIA:KFDIA,1:1,1:KLEV),&
   4499              & PDT,ZZI_THM(KIDIA:KFDIA,1:1,1:KLEV),&
   4500              & ZZI_PABSM(KIDIA:KFDIA,1:1,1:KLEV),&
   4501              & ZZI_RM(KIDIA:KFDIA,1:1,1:KLEV,1:NRR),&
   4502              & ZLAT(KIDIA:KFDIA,1:1), ZLON(KIDIA:KFDIA,1:1),&
   4503              & ZALB_UV(KIDIA:KFDIA,1:1), ZZS(KIDIA:KFDIA,1:1),&
   4504              & ZZENITH(KIDIA:KFDIA,1:1),ZZZ(KIDIA:KFDIA,1:1,1:KLEV),&
   4505              & IYEAR,IMONTH,IDAY, REAL(RHGMT,JPRB)+PDT/2.,&
   4506              & ILONMNH,KLEV,NGFL_EXT, NRR, KSTEP+1,NULOUT,IEZDIAG_CHEM,&
   4507              & ZZI_PEZDIAG(KIDIA:KFDIA,:,IOFF_MFSHAL:NGFL_EZDIAG)           )
   4508  
   4509     PEZDIAG(KIDIA:KFDIA,:,IOFF_MFSHAL:NGFL_EZDIAG)=&
   4510                        &ZZI_PEZDIAG(KIDIA:KFDIA,:,IOFF_MFSHAL:NGFL_EZDIAG)
   4511 
   4512 
   4513 !inversion niveau de la tendance des scalaires passifs
   4514 
   4515   DO JGFL=1,NGFL_EXT
   4516     DO JLEV = 1,KLEV
   4517       DO JLON = KIDIA,KFDIA
   4518         PTENDEXT(JLON,JLEV,JGFL)=PTENDEXT(JLON,JLEV,JGFL)+&
   4519         &(ZZI_SVS(JLON,1,JLEV,JGFL)-&
   4520         & ZZI_SVSAVE(JLON,1,JLEV,JGFL))
   4521       ENDDO
   4522     ENDDO
   4523   ENDDO
   4524 
   4525 ENDIF
   4526 
   4527 !    ------------------------------------------------------------------
   4528 !     13 - STOCHASTIC PHYSICS : PERTURB TENDENCIES
   4529 !     -----------------------------------------------------------------
   4530 

Page 82          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   4531 IF(LSPSDT) THEN
   4532   DO JLEV=1,KLEV
   4533     DO JLON=KIDIA,KFDIA
   4534       ZMULNOISE(JLON,JLEV)=PGP2DSDT(JLON,1)  ! Use a single 2D pattern for all levels
   4535       ZDUMMY(JLON,JLEV)=0.0_JPRB             ! Dummy nonphys tendency for compatibility with ecmwf stochphy
   4536     ENDDO
   4537   ENDDO
   4538 
   4539   CALL SPPTEN (KIDIA,KFDIA,KLON,KLEV,PDT,&! In: block indices, physics timestep
   4540        & PTM, PQVM, PCLFS, PAPRSFM, PAPRSM,&! In: (T,Q,cloud) for supersatcheck, Pfull, Phalf
   4541        & ZDUMMY,ZDUMMY,ZDUMMY,ZDUMMY,&! In: dummy nonphys tendencies
   4542        & ZMULNOISE,&! In: stochphy 3D random multiplicative pattern (less one)
   4543        & PTENDU,PTENDV,PTENDT,PTENDR(:,:,1) )    ! Inout: (u,v,t,qv) tendencies to perturb
   4544 ENDIF
   4545 
   4546 !    ------------------------------------------------------------------
   4547 !     14 - FINAL CALCULATIONS.
   4548 !     --------------------------------------------------------------------
   4549 
   4550 !forcage pour declencher la ligne de grain
   4551 IF (LSQUALL) THEN
   4552   IF (LTWOTL) THEN
   4553     ZDT2=2*ZDT
   4554   ELSE
   4555     ZDT2=ZDT
   4556   ENDIF
   4557   IF((KSTEP+1)*ZDT2 < 600.) THEN
   4558     WRITE(NULOUT, *)'refroidissement impose de',NREFROI1,' a ',NREFROI2
   4559     DO JLON=NREFROI1,NREFROI2
   4560       DO JLEV=KLEV,KLEV-20,-1
   4561         PTENDT(JLON,JLEV)=-0.01_JPRB
   4562       ENDDO
   4563     ENDDO
   4564   ENDIF
   4565 ENDIF
   4566 
   4567 !ecriture du buffer
   4568 IF(LLMSE.OR.LSFORCS) THEN
   4569   DO JLON = KIDIA,KFDIA
   4570     PGPAR(JLON,MINPRR)=ZINPRR(JLON,1)+ZSURFPREP(JLON)/1000._JPRB
   4571     PGPAR(JLON,MINPRS)=ZINPRS(JLON,1)+ZSURFSNOW(JLON)/1000._JPRB
   4572     PGPAR(JLON,MINPRG)=ZINPRG(JLON,1)+ZINPRH(JLON,1)
   4573     PGPAR(JLON,MACPRR)=PGPAR(JLON,MACPRR)+(ZINPRR(JLON,1)+ZSURFPREP(JLON)/1000._JPRB)*PDT
   4574     PGPAR(JLON,MACPRS)=PGPAR(JLON,MACPRS)+(ZINPRS(JLON,1)+ZSURFSNOW(JLON)/1000._JPRB)*PDT
   4575     PGPAR(JLON,MACPRG)=PGPAR(JLON,MACPRG)+(ZINPRG(JLON,1)+ZINPRH(JLON,1))*PDT
   4576     PGPAR(JLON,MVTS)=ZTSURF(JLON)
   4577     PGPAR(JLON,MVEMIS)=ZEMIS(JLON)
   4578     PGPAR(JLON,MVQS)=ZQS(JLON)
   4579   ENDDO
   4580   DO JSW=1,NSW
   4581     DO JLON = KIDIA,KFDIA
   4582       PGPAR(JLON,MALBDIR-1+JSW)=ZALBP(JLON,JSW)
   4583       PGPAR(JLON,MALBSCA-1+JSW)=ZALBD(JLON,JSW)
   4584     ENDDO
   4585   ENDDO
   4586 ENDIF
   4587 

Page 83          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   4588 ! collect updated direct and downward diffuse surface SW fluxes
   4589 
   4590 DO JLON = KIDIA,KFDIA
   4591    ZFRSOPS(JLON)=0.
   4592    ZFRSOFS(JLON)=0.
   4593    DO JSW=1,NSW
   4594       ZFRSOPS(JLON)=ZFRSOPS(JLON)+ZZSFSWDIR(JLON,JSW)
   4595       ZFRSOFS(JLON)=ZFRSOFS(JLON)+ZZSFSWDIF(JLON,JSW)
   4596    ENDDO
   4597    PFRSODS(JLON)=ZFRSOPS(JLON)+ZFRSOFS(JLON)
   4598 
   4599 ! direct normal irradiance with securities, remove slope effect
   4600 
   4601    ZFRSDNI(JLON)=ZFRSOPS(JLON)/ZSLOPE(JLON)
   4602    IF (PMU0(JLON).GT.3.0E-02_JPRB) THEN
   4603       ZFRSDNI(JLON)=ZFRSOPS(JLON)/(ZSLOPE(JLON)*PMU0(JLON))
   4604    ENDIF
   4605    ZFRSDNI(JLON)=MAX(0.0_JPRB,ZFRSDNI(JLON))
   4606    PFRSDNI(JLON)=ZFRSDNI(JLON)
   4607 
   4608 ENDDO
   4609 
   4610 ! update sunshine duration [s]
   4611 
   4612 DO JLON=KIDIA,KFDIA
   4613 
   4614   IF(PFRSDNI(JLON) > RSUNDUR) THEN
   4615     PSDUR(JLON)=PSDUR(JLON)+TSTEP
   4616   ENDIF
   4617 
   4618 ENDDO
   4619 
   4620 IF (LMUSCLFA) CALL ECR1D(NMUSCLFA,'PCLCT_apl',PCLCT,1,KLON)
   4621 ! initialisations for CFU for Rainfalls
   4622 DO JLEV = 0,KLEV
   4623   DO JLON = KIDIA,KFDIA
   4624 ! conversion from m/s in mm/s
   4625     PFPLSL(JLON,JLEV)= ZINPRR(JLON,1)*1000._JPRB+ZSURFPREP(JLON)
   4626     PFPLSN(JLON,JLEV)= ZINPRS(JLON,1)*1000._JPRB+ZSURFSNOW(JLON)
   4627     PFPLSG(JLON,JLEV)= ZINPRG(JLON,1)*1000._JPRB
   4628     PFPLSH(JLON,JLEV)= ZINPRH(JLON,1)*1000._JPRB
   4629 ! conversion in correct Unit for BADP (same as ALADIN)
   4630     PSTRTU(JLON,JLEV)= ZSFU(JLON,1)*ZZI_RHODREFM(JLON,1,IKB) 
   4631     PSTRTV(JLON,JLEV)= ZSFV(JLON,1)*ZZI_RHODREFM(JLON,1,IKB) 
   4632   ENDDO
   4633 ENDDO
   4634 !Hail diagnostic
   4635 IF (LXXDIAGH) THEN
   4636   DO JLEV=1,KLEV
   4637     DO JLON=KIDIA,KFDIA
   4638        PDIAGH(JLON)=PDIAGH(JLON)+ZQGM(JLON,JLEV)*PDELPM(JLON,JLEV)*ZINVG
   4639     ENDDO
   4640   ENDDO
   4641 ENDIF
   4642 !!! modif pour LMSE non activee
   4643 IF (LLMSE) THEN
   4644    DO JLEV=1,KSGST+1

Page 84          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

   4645       DO JLON = KIDIA,KFDIA
   4646          PFCS(JLON,JLEV)=-ZSFTH(JLON,1)*ZZI_RHODREFM(JLON,1,IKB)*RCPD
   4647          PFCLL(JLON,JLEV) = PFCLL(JLON,JLEV)*ZZI_RHODREFM(JLON,1,IKB)
   4648          PFCLN(JLON,JLEV) = PFCLN(JLON,JLEV)*ZZI_RHODREFM(JLON,1,IKB)
   4649          PFEVL(JLON,JLEV) = PFEVL(JLON,JLEV)*ZZI_RHODREFM(JLON,1,IKB)
   4650          PFEVN(JLON,JLEV) = PFEVN(JLON,JLEV)*ZZI_RHODREFM(JLON,1,IKB)
   4651       ENDDO
   4652    ENDDO
   4653 ENDIF
   4654 IF (LSFORCS) THEN
   4655    DO JLEV=1,KSGST+1
   4656       DO JLON = KIDIA,KFDIA
   4657          PFCS(JLON,JLEV)=-ZSFTH(JLON,1)*ZZI_RHODREFM(JLON,1,IKB)*RCPD
   4658          ZDELTA=MAX(0.0_JPRB,SIGN(1.0_JPRB,RTT-ZTSURF(JLON)))
   4659          PFCLL(JLON,JLEV)=-ZSFRV(JLON,1)*ZZI_RHODREFM(JLON,1,IKB)* &
   4660               & FOLH (ZTSURF(JLON),0._JPRB)*(1.0_JPRB-ZDELTA)
   4661          PFCLN(JLON,JLEV)=-ZSFRV(JLON,1)*ZZI_RHODREFM(JLON,1,IKB)* &
   4662               & FOLH (ZTSURF(JLON),0._JPRB)*ZDELTA
   4663       ENDDO
   4664    ENDDO
   4665 ENDIF  
   4666 
   4667 DO JSG  = 1, KSGST+1
   4668   DO JLEV = 0, KLEV
   4669     DO JLON = KIDIA, KFDIA
   4670       PFRTH(JLON,JLEV,JSG)=PFRTH(JLON,JLEV,JSG)+ZBUDTH(JLON)
   4671     ENDDO
   4672   ENDDO
   4673 ENDDO
   4674 
   4675 ! daand: radflex
   4676 IF (LINTFLEX) THEN
   4677 ! account for radiation separately
   4678   LLRAD=.NOT.LRADFLEX
   4679     
   4680   CALL APL_AROME2INTFLEX(KLON,KIDIA,KFDIA,KLEV, PDT,&
   4681    & PRDELPM,&
   4682    & PUM, PVM, PTM,&
   4683    & PGPAR(1,MVTS), PCPM,&
   4684    & ZFPR,&! precipitation fluxes
   4685    & LLRAD, PFRTH, PFRSO,&! radiative fluxes
   4686    & PTENDU, PTENDV, PTENDT,&! momentum and temperature tendencies
   4687    & PTENDR, PTENDTKE, PTENDEXT,&! total gfl tendencies
   4688    & YDPROCSET)
   4689 ENDIF
   4690 
   4691 !     --------------------------------------------------------------------------
   4692 END ASSOCIATE
   4693 END ASSOCIATE
   4694 IF (LHOOK) CALL DR_HOOK('APL_AROME',1,ZHOOK_HANDLE)
   4695 open(unit=15,file="test_apl_arome3.txt") !DUCHENEF
   4696 write(15,*) "test 1" !DUCHENEF
   4697 close(15)
   4698 END SUBROUTINE APL_AROME

Page 85          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90


COMPILER OPTIONS BEING USED

       -align noall                          -align nonone
       -align nocommons                      -align nodcommons
       -align noqcommons                     -align nozcommons
       -align records                        -align nosequence
       -align norec1byte                     -align norec2byte
       -align norec4byte                     -align norec8byte
       -align norec16byte                    -align norec32byte
       -align norec64byte                    -align noarray8byte
       -align noarray16byte                  -align noarray32byte
       -align array64byte                    -align noarray128byte
       -align noarray256byte                 -altparam
       -assume accuracy_sensitive            -assume nobscc
       -assume nobuffered_io                 -assume nobuffered_stdout
       -assume byterecl                      -assume cc_omp
       -assume nocstring                     -assume nodummy_aliases
       -assume nofpe_summary                 -assume noieee_fpe_flags
       -assume nominus0                      -assume noold_boz
       -assume old_complex_align             -assume old_unit_star
       -assume old_ldout_format              -assume noold_logical_assign
       -assume noold_logical_ldio            -assume old_maxminloc
       -assume old_xor                       -assume noprotect_allocates
       -assume protect_constants             -assume noprotect_parens
       -assume split_common                  -assume source_include
       -assume nostd_intent_in               -assume std_minus0_rounding
       -assume nostd_mod_proc_name           -assume std_value
       -assume realloc_lhs                   -assume underscore
       -assume no2underscores                -auto
  no   -auto_scalar                     no   -bintext
       -ccdefault default                    -check noargs
       -check noarg_temp_created             -check noassume
       -check nobounds                       -check noformat
       -check nooutput_conversion            -check nooverflow
       -check nopointers                     -check power
       -check noshape                        -check nostack
       -check nounderflow                    -check nouninitialized
       -coarray-num-procs 0             no   -coarray-config-file
       -convert big_endian                   -cross_reference
       -D __INTEL_COMPILER=1700              -D __INTEL_COMPILER_UPDATE=0
       -D __unix__                           -D __unix
       -D __linux__                          -D __linux
       -D __gnu_linux__                      -D unix
       -D linux                              -D __ELF__
       -D __x86_64                           -D __x86_64__
       -D __amd64                            -D __amd64__
       -D __INTEL_COMPILER_BUILD_DATE=20160721       -D __PIC__
       -D __pic__                            -D _OPENMP=201511
       -D __INTEL_OFFLOAD                    -D __pentium4
       -D __pentium4__                       -D __tune_pentium4__
       -D __SSE2__                           -D __SSE2_MATH__
       -D __SSE3__                           -D __SSSE3__
       -D __SSE4_1__                         -D __SSE4_2__
       -D __SSE__                            -D __SSE_MATH__
       -D __MMX__                            -D __AVX__
       -D __AVX_I__                          -D __AVX2__

Page 86          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

       -D __FMA__                            -D LINUX
       -D LITTLE_ENDIAN                      -D LITTLE
       -D ADDRESS64                          -D GRIB_API_1
       -double_size 64                  no   -d_lines
  no   -Qdyncom                              -error_limit 30
  no   -f66                             no   -f77rtl
  no   -fast                                 -fpscomp nofilesfromcmd
       -fpscomp nogeneral                    -fpscomp noioformat
       -fpscomp noldio_spacing               -fpscomp nologicals
  no   -fpconstant                           -fpe3
       -fprm nearest                         -ftz
       -fp_model noprecise                   -fp_model nofast
       -fp_model strict                      -fp_model nosource
       -fp_model nodouble                    -fp_model noextended
       -fp_model novery_fast                 -fp_model noexcept
       -fp_model nono_except                 -fp_modbits nofp_contract
       -fp_modbits nono_fp_contract          -fp_modbits nofenv_access
       -fp_modbits nono_fenv_access          -fp_modbits nocx_limited_range
       -fp_modbits nono_cx_limited_range       -fp_modbits noprec_div
       -fp_modbits nono_prec_div             -fp_modbits noprec_sqrt
       -fp_modbits nono_prec_sqrt            -fp_modbits ftz
       -fp_modbits nono_ftz                  -fp_modbits nointrin_limited_range
       -fp_modbits nono_intrin_limited_range       -fp_modbits notrunc_compares
       -fp_modbits nono_trunc_compares       -fp_modbits noieee_nan_compares
       -fp_modbits nono_ieee_nan_compares       -fp_modbits nohonor_f32_conversion
       -fp_modbits nono_honor_f32_conversion       -fp_modbits nohonor_f64_conversion
       -fp_modbits nono_honor_f64_conversion       -fp_modbits nono_x87_copy
       -fp_modbits nono_no_x87_copy          -fp_modbits noexception_semantics
       -fp_modbits nono_exception_semantics       -fp_modbits noprecise_libm_functions
       -fp_modbits nono_precise_libm_functions       -heap_arrays 0
       -threadprivate_compat                 -free
       -g2                                   -iface nomixed_str_len_arg
       -iface nono_mixed_str_len_arg         -init noarrays
       -init noinf                           -init nonan
       -init nosnan                          -init nozero
  no   -intconstant                          -integer_size 32
  no   -mixed_str_len_arg               no   -module
       -names lowercase                 no   -noinclude
       -offload-build=host                   -openmp
       -openmp-simd                          -openmp-offload
       -O2                              no   -pad_source
       -real_size 32                    no   -recursive
       -reentrancy threaded             no   -sharable_localsaves
       -vec=simd                             -show nofullpath
       -show noinclude                       -show map
       -show options                    no   -syntax_only
  no   -threadcom                       no   -U
  no   -vms                                  -w noall
       -w nonone                             -w alignments
       -w nodeclarations                     -w general
       -w noignore_bounds                    -w noignore_loc
       -w nointerfaces                       -w notruncated_source
       -w uncalled                           -w uninitialized
       -w nounused                           -w usage
  no   -wrap-margins

       -includepath : .D[4]/,.D[9]/,.D[14]/,.D[19]/,.D[24]/,.D[29]/,.D[34]/,.D[39]/,/home/ald_team/software/boost/1.66.0/include/,

Page 87          Source Listing                  
2024-11-22 11:31                                 apl_arome.F90

           /sw/sdev/intel/parallel_studio_xe_2017_update1/compilers_and_libraries/linux/mkl/include/intel64/lp64/,
           /sw/sdev/intel/parallel_studio_xe_2015_update_3-pguyan/composer_xe_2015.3.187/mkl/include/intel64/lp64/,
           /space/hpc-home/ald_team/software/gcc/5.5.0/bin/../lib64/gcc/x86_64-unknown-linux-gnu/5.5.0/include/,.f,
           ./.f,.D[1]/.f,.D[2]/.f,.D[3]/.f,.D[4]/.f,.D[5]/.f,.D[6]/.f,.D[7]/.f,.D[8]/.f,.D[9]/.f,.D[10]/.f,.D[11]/.f,
           .D[12]/.f,.D[13]/.f,.D[14]/.f,.D[15]/.f,.D[16]/.f,.D[17]/.f,.D[18]/.f,.D[19]/.f,.D[20]/.f,.D[21]/.f,.D[22]/.f,
           .D[23]/.f,.D[24]/.f,.D[25]/.f,.D[26]/.f,.D[27]/.f,.D[28]/.f,.D[29]/.f,.D[30]/.f,.D[31]/.f,.D[32]/.f,.D[33]/.f,
           .D[34]/.f,.D[35]/.f,.D[36]/.f,.D[37]/.f,.D[38]/.f,.D[39]/.f,.D[40]/.f,.D[41]/.f,.D[42]/.f,.D[43]/.f,/home/ald_team/software/boost/1.66.0/include/.f,
           /sw/sdev/intel/parallel_studio_xe_2017/compilers_and_libraries/linux/mkl/include/intel64/lp64/.f,/home/ald_team/software/build/2018a/include/.f,
           /home/ald_team/software/gcc/5.5.0/include/.f,/home/ald_team/software/auxlibs/3.1_i17c/include/.f,/sw/sdev/intel/parallel_studio_xe_2017_update1/compilers_and_libraries/linux/mkl/include/intel64/lp64/.f,
           /home/ald_team/software/eccodes/i17c/include/.f,/home/ald_team/software/misc/i17c/include/openjpeg-2.3/.f,
           /home/ald_team/software/misc/i17c/include/.f,/opt/hpe/hpc/mpt/mpt-2.17/include/.f,/sw/sdev/intel/parallel_studio_xe_2015_update_3-pguyan/composer_xe_2015.3.187/mkl/include/intel64/lp64/.f,
           /space/hpc-apps/sw/sdev/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/compiler/include/intel64/.f,
           /space/hpc-apps/sw/sdev/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/compiler/include/icc/.f,
           /space/hpc-apps/sw/sdev/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/compiler/include/.f,
           /usr/local/include/.f,/space/hpc-home/ald_team/software/gcc/5.5.0/bin/../lib64/gcc/x86_64-unknown-linux-gnu/5.5.0/include/.f,
           /space/hpc-home/ald_team/software/gcc/5.5.0/bin/../lib64/gcc/x86_64-unknown-linux-gnu/5.5.0/include-fixed/.f,
           /space/hpc-home/ald_team/software/gcc/5.5.0/bin/../include/.f,/usr/include/.f,/usr/include/.f
       -list filename : apl_arome.lst
       -o    filename : none

COMPILER: Intel(R) Fortran 17.0-1589

apl_arome.F90(2417): error #6628: Non-keyword arguments are invalid after keyword arguments have been encountered.   [ZTOWNS]
     & ZTOWNS(KIDIA:KFDIA))
-------^
apl_arome.F90(2490): error #6628: Non-keyword arguments are invalid after keyword arguments have been encountered.   [ZTOWNS]
     & ZTOWNS(KIDIA:KFDIA))
-------^
.D[24]/fcttrm.func.h(35): remark #7713: This statement function has not been used.   [RLF]
REAL(KIND=JPRB) :: RLV,RLS,RLF,ESW,ESS,ES
---------------------------^
.D[24]/fcttrm.func.h(35): remark #7713: This statement function has not been used.   [ESW]
REAL(KIND=JPRB) :: RLV,RLS,RLF,ESW,ESS,ES
-------------------------------^
.D[24]/fcttrm.func.h(35): remark #7713: This statement function has not been used.   [ESS]
REAL(KIND=JPRB) :: RLV,RLS,RLF,ESW,ESS,ES
-----------------------------------^
.D[24]/fcttrm.func.h(35): remark #7713: This statement function has not been used.   [ES]
REAL(KIND=JPRB) :: RLV,RLS,RLF,ESW,ESS,ES
---------------------------------------^
.D[24]/fcttrm.func.h(67): remark #7713: This statement function has not been used.   [FODLEW]
REAL(KIND=JPRB) :: FODLEW
-------------------^
.D[24]/fcttrm.func.h(83): remark #7713: This statement function has not been used.   [FOQSTP]
REAL(KIND=JPRB) :: FOQSTP
-------------------^
.D[24]/fcttrm.func.h(91): remark #7713: This statement function has not been used.   [FODQS]
REAL(KIND=JPRB) :: FODQS 
-------------------^
.D[24]/fcttrm.func.h(100): remark #7713: This statement function has not been used.   [FDQW]
REAL(KIND=JPRB) :: FDQW
-------------------^
compilation aborted for apl_arome.F90 (code 1)

Interface blocks checker diagnostic messages 3 : file apl_arome.F90


Norms checker report :



========== Working on file apl_arome.F90 ==========
apl_arome.F90[2] : SUBROUTINE APL_AROME(YDGEOMETRY,YDSURF, KBL, KGPCOMP, KIDIA , KFDIA , KLON ,
  KTDIA  , KLEV , KSTEP ,
  KSGST, PDT, LDXFUMSE, PINDX, PINDY ,
  PGEMU,PGELAM,POROG,PGM,PMU0,PMU0LU,PMU0M,PMU0N,PCLON, PSLON,PVO3ABC,PLSM,
  PAESEA , PAELAN , PAESOO , PAEDES , PAESUL, PAEVOL,
  PGP2DSDT,
 !---------------------------------------------------------------------
 ! - INPUT A M
  PAPHIM,PAPHIFM,PAPRSM, PAPRSFM, PRDELPM, PDELPM, PTM, PQVM ,
  PCPM    , PRM     ,PALPHM , PLNPRM,
  PQCM    , PQIM    ,PQRM   , PQSM, PQGM, PQHM,
  PTKEM   , PEFB1   ,PEFB2  , PEFB3,
  PSIGM,PSVM,
  PUM    , PVM, PWM, PEDR,
 !---------------------------------------------------------------------
 !  - INOUT A S
  PGPAR, PEMTD, PEMTU, PTRSO,
  PGDEOSI, PGUEOSI, PGMU0, PGMU0_MIN, PGMU0_MAX,
  PGDEOTI, PGDEOTI2, PGUEOTI, PGUEOTI2, PGEOLT, PGEOXT,
  PGRPROX, PGMIXP, PGFLUXC, PGRSURF,
 !  - OUT A S
  PQLRAD, PQIRAD, PRH, PCLFS, PSIGS,
  PTENDT, PTENDR, PTENDU, PTENDV,PTENDW,
  PTENDTKE, PTENDEFB1, PTENDEFB2, PTENDEFB3,
  PTENDEXT,PFRTH, PFRSO,PFRTHDS, PFRSODS, PFRSOPS, PFRSDNI,
  PFRSOPT, PFRTHC, PFRSOC, 
 !---------------------------------------------------------------------
 !  - IN FOR RADIATION IF NO SURFACE SCHEME
  PALBIN,PEMIS,
 !  - INOUT for easy diag
  PEZDIAG,
 !  - INOUT for CFU XFU
  PCLCH,PCLCL,PCLCM,PCLCT,PFPLSL,PFPLSN,PFPLSG,PFPLSH,PSTRTU,PSTRTV,PFCS,PFCLL,
  PFCLN,PUCLS,PVCLS,PNUCLS,PNVCLS,PTCLS,PQCLS,PHUCLS,PUGST,PVGST,PFEVL,PFEVN, PPBLH,PSPSG,
  PSDUR,PDIAGH,PSFORC,
 ! daand: radflex
  YDPROCSET ,YDDDH)
  -- (I) 3.6 : Routines should have no more than 50 dummy arguments
  -- Routine APL_AROME has 139

apl_arome.F90[2419] : 	write(13,*) "test 2" !DUCHENEF
  -- (S) 4.3 : The TAB character is not permitted

apl_arome.F90[2491] : 	write(13,*) "test 3" !DUCHENEF
  -- (S) 4.3 : The TAB character is not permitted

apl_arome.F90[3264] :    IF (PMU0(JLON).GT.3.0E-02_JPRB) THEN
  -- (W) 4.15 : Use Fortran90 comparison operators
  -- Relational operator ">" preferred to ".GT."

apl_arome.F90[3359] : close(15)
  -- (S) 1.9 : Rules for DR_HOOK
  -- The "last" executable statement is not a proper call to DR_HOOK

apl_arome.F90[559] : REAL(KIND=JPRB) :: PTKEEDMF(KLON,KLEV)
  -- (W) 4.10 : Variable names should follow the prefix convention as defined in the programming standards document
  -- Variable "PTKEEDMF" should have prefix "Z"

